[
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/configs/build/postcss.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/configs/build/tailwind.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/configs/build/vite.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/configs/deployment/vercel.build.cjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/configs/linting/commitlint.config.cjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/configs/linting/eslint.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/debug_test.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/App.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/Root.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/Navigation.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/achievements/AchievementDashboard.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (187). Maximum allowed is 75.",
        "line": 20,
        "column": 47,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 219,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Achievement Dashboard Component\n * Overview of user's achievement progress and recent unlocks\n */\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  FaTrophy,\n  FaFire,\n  FaBullseye,\n  FaClock,\n  FaStar,\n  FaArrowRight,\n} from \"../../utils/iconImport\";\nimport { useAchievements } from \"../../hooks/useAchievements\";\nimport { useAuthState } from \"../../contexts\";\nimport { AchievementCategory, UserAchievement, Achievement } from \"../../types\";\n\nexport const AchievementDashboard: React.FC = () => {\n  const { user } = useAuthState();\n  const {\n    achievementStats,\n    userAchievements,\n    unreadNotifications,\n    allAchievements,\n    getAchievementsByCategory,\n    isLoading,\n  } = useAchievements(user?.uid);\n\n  if (isLoading || !achievementStats) {\n    return (\n      <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-gray-300 rounded w-1/3 mb-4\"></div>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-20 bg-gray-300 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const recentAchievements = userAchievements\n    .sort(\n      (a: UserAchievement, b: UserAchievement) =>\n        b.earnedAt.toDate().getTime() - a.earnedAt.toDate().getTime(),\n    )\n    .slice(0, 3);\n\n  const categories: AchievementCategory[] = [\n    AchievementCategory.SESSION_MILESTONES,\n    AchievementCategory.CONSISTENCY_BADGES,\n    AchievementCategory.STREAK_ACHIEVEMENTS,\n    AchievementCategory.GOAL_BASED,\n    AchievementCategory.TASK_COMPLETION,\n    AchievementCategory.SPECIAL_ACHIEVEMENTS,\n  ];\n\n  const categoryProgress = categories.map((category) => {\n    const categoryAchievements = getAchievementsByCategory(category);\n    const earned = achievementStats.categoryCounts[category] || 0;\n    const total = categoryAchievements.length;\n    const percentage = total > 0 ? (earned / total) * 100 : 0;\n\n    return {\n      category,\n      earned,\n      total,\n      percentage,\n      name: getCategoryDisplayName(category),\n      icon: getCategoryIcon(category),\n    };\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <FaTrophy className=\"text-2xl text-nightly-lavender-floral\" />\n          <h2 className=\"text-2xl font-bold text-nightly-honeydew\">\n            Achievements\n          </h2>\n        </div>\n        <Link\n          to=\"/achievements\"\n          className=\"flex items-center space-x-2 text-nightly-aquamarine hover:text-nightly-lavender-floral transition-colors\"\n        >\n          <span>View All</span>\n          <FaArrowRight />\n        </Link>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <div className=\"bg-gradient-to-br from-nightly-aquamarine/20 to-nightly-aquamarine/10 rounded-lg p-4 border border-nightly-aquamarine/30\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-nightly-celadon\">Total Earned</p>\n              <p className=\"text-2xl font-bold text-nightly-honeydew\">\n                {achievementStats.totalEarned}\n              </p>\n            </div>\n            <FaTrophy className=\"text-2xl text-nightly-aquamarine\" />\n          </div>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-nightly-lavender-floral/20 to-nightly-lavender-floral/10 rounded-lg p-4 border border-nightly-lavender-floral/30\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-nightly-celadon\">Total Points</p>\n              <p className=\"text-2xl font-bold text-nightly-honeydew\">\n                {achievementStats.totalPoints}\n              </p>\n            </div>\n            <FaStar className=\"text-2xl text-nightly-lavender-floral\" />\n          </div>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-nightly-spring-green/20 to-nightly-spring-green/10 rounded-lg p-4 border border-nightly-spring-green/30\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-nightly-celadon\">Completion</p>\n              <p className=\"text-2xl font-bold text-nightly-honeydew\">\n                {achievementStats.completionPercentage.toFixed(0)}%\n              </p>\n            </div>\n            <FaBullseye className=\"text-2xl text-nightly-spring-green\" />\n          </div>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-red-500/20 to-red-500/10 rounded-lg p-4 border border-red-500/30\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-nightly-celadon\">New Unlocks</p>\n              <p className=\"text-2xl font-bold text-nightly-honeydew\">\n                {unreadNotifications.length}\n              </p>\n            </div>\n            <FaFire className=\"text-2xl text-red-400\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Recent Achievements */}\n      {recentAchievements.length > 0 && (\n        <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-nightly-honeydew mb-4\">\n            Recent Achievements\n          </h3>\n          <div className=\"space-y-3\">\n            {recentAchievements.map((userAchievement: UserAchievement) => {\n              const achievement = allAchievements.find(\n                (a: Achievement) => a.id === userAchievement.achievementId,\n              );\n              if (!achievement) return null;\n\n              return (\n                <div\n                  key={userAchievement.id}\n                  className=\"flex items-center space-x-3 p-3 bg-white/5 rounded-lg\"\n                >\n                  <div className=\"text-2xl\">{achievement.icon}</div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-nightly-honeydew\">\n                      {achievement.name}\n                    </h4>\n                    <p className=\"text-sm text-nightly-celadon\">\n                      {achievement.description}\n                    </p>\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      <span className=\"text-xs bg-yellow-500/20 text-yellow-300 px-2 py-1 rounded\">\n                        +{achievement.points} points\n                      </span>\n                      <span className=\"text-xs text-nightly-celadon\">\n                        {formatDate(userAchievement.earnedAt.toDate())}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* Category Progress */}\n      <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold text-nightly-honeydew mb-4\">\n          Progress by Category\n        </h3>\n        <div className=\"space-y-4\">\n          {categoryProgress.map((category) => (\n            <div key={category.category} className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  {category.icon}\n                  <span className=\"text-nightly-celadon\">{category.name}</span>\n                </div>\n                <span className=\"text-sm text-nightly-celadon\">\n                  {category.earned} / {category.total}\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                <div\n                  className=\"bg-gradient-to-r from-nightly-aquamarine to-nightly-lavender-floral h-2 rounded-full transition-all duration-300\"\n                  style={{ width: `${category.percentage}%` }}\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getCategoryDisplayName(category: AchievementCategory): string {\n  switch (category) {\n    case \"session_milestones\":\n      return \"Session Milestones\";\n    case \"consistency_badges\":\n      return \"Consistency\";\n    case \"streak_achievements\":\n      return \"Streaks\";\n    case \"goal_based\":\n      return \"Goals\";\n    case \"task_completion\":\n      return \"Tasks\";\n    case \"special_achievements\":\n      return \"Special\";\n    default:\n      return \"Unknown\";\n  }\n}\n\nfunction getCategoryIcon(category: AchievementCategory) {\n  switch (category) {\n    case \"session_milestones\":\n      return <FaClock className=\"text-nightly-aquamarine\" />;\n    case \"consistency_badges\":\n      return <FaBullseye className=\"text-nightly-lavender-floral\" />;\n    case \"streak_achievements\":\n      return <FaFire className=\"text-red-400\" />;\n    case \"goal_based\":\n      return <FaTrophy className=\"text-yellow-400\" />;\n    case \"task_completion\":\n      return <FaStar className=\"text-green-400\" />;\n    case \"special_achievements\":\n      return <FaStar className=\"text-purple-400\" />;\n    default:\n      return <FaTrophy className=\"text-gray-400\" />;\n  }\n}\n\nfunction formatDate(date: Date): string {\n  const now = new Date();\n  const diffInMs = now.getTime() - date.getTime();\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n\n  if (diffInDays === 0) {\n    return \"Today\";\n  } else if (diffInDays === 1) {\n    return \"Yesterday\";\n  } else if (diffInDays < 7) {\n    return `${diffInDays} days ago`;\n  } else {\n    return date.toLocaleDateString();\n  }\n}\n\nexport default AchievementDashboard;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/achievements/AchievementGallery.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/achievements/AchievementGallerySubComponents.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/achievements/AchievementNotification.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/achievements/AchievementPrivacySettings.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/achievements/LeaderboardView.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/achievements/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/common/ConflictResolutionModal.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (161). Maximum allowed is 75.",
        "line": 29,
        "column": 75,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 202,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (91). Maximum allowed is 75.",
        "line": 78,
        "column": 28,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 173,
        "endColumn": 14
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Conflict Resolution Modal\n * User interface for resolving data sync conflicts\n */\nimport React, { useState } from \"react\";\nimport type { ConflictInfo } from \"@/types/database\";\n\ninterface ConflictResolutionProps {\n  conflicts: ConflictInfo[];\n  onResolve: (resolutions: Record<string, \"local\" | \"remote\">) => void;\n  onCancel: () => void;\n  isOpen: boolean;\n}\n\nconst formatTimestamp = (date: Date): string => {\n  return new Intl.DateTimeFormat(\"en-US\", {\n    dateStyle: \"short\",\n    timeStyle: \"short\",\n  }).format(date);\n};\n\nconst formatValue = (value: unknown): string => {\n  if (value === null || value === undefined) return \"Not set\";\n  if (typeof value === \"boolean\") return value ? \"Yes\" : \"No\";\n  if (typeof value === \"object\") return JSON.stringify(value, null, 2);\n  return String(value);\n};\n\nexport const ConflictResolutionModal: React.FC<ConflictResolutionProps> = ({\n  conflicts,\n  onResolve,\n  onCancel,\n  isOpen,\n}) => {\n  const [resolutions, setResolutions] = useState<\n    Record<string, \"local\" | \"remote\">\n  >({});\n\n  if (!isOpen || conflicts.length === 0) {\n    return null;\n  }\n\n  const handleResolve = () => {\n    if (Object.keys(resolutions).length === conflicts.length) {\n      onResolve(resolutions);\n    }\n  };\n\n  const handleResolutionChange = (\n    conflictId: string,\n    resolution: \"local\" | \"remote\",\n  ) => {\n    setResolutions((prev) => ({\n      ...prev,\n      [conflictId]: resolution,\n    }));\n  };\n\n  const getDeviceLabel = (isLocal: boolean): string => {\n    return isLocal ? \"This Device\" : \"Other Device\";\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-gray-800 border border-purple-700 rounded-lg shadow-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-hidden\">\n        <div className=\"p-6 border-b border-purple-700\">\n          <h2 className=\"text-xl font-semibold text-purple-300\">\n            Data Sync Conflicts Detected\n          </h2>\n          <p className=\"text-gray-400 mt-2\">\n            Your data was modified on multiple devices. Please choose which\n            version to keep for each conflict:\n          </p>\n        </div>\n\n        <div className=\"p-6 overflow-y-auto max-h-[60vh]\">\n          <div className=\"space-y-6\">\n            {conflicts.map((conflict, index) => {\n              const conflictId = `${conflict.collection}-${conflict.documentId}-${index}`;\n              const localTimestamp = new Date(\n                conflict.localData.lastModified as string,\n              );\n              const remoteTimestamp = new Date(\n                conflict.remoteData.lastModified as string,\n              );\n\n              return (\n                <div\n                  key={conflictId}\n                  className=\"border border-gray-700 rounded-lg p-4\"\n                >\n                  <h3 className=\"text-lg font-medium text-purple-200 mb-3\">\n                    {conflict.collection.charAt(0).toUpperCase() +\n                      conflict.collection.slice(1)}{\" \"}\n                    Conflict\n                  </h3>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {/* Local Version */}\n                    <label className=\"cursor-pointer\">\n                      <input\n                        type=\"radio\"\n                        name={conflictId}\n                        value=\"local\"\n                        checked={resolutions[conflictId] === \"local\"}\n                        onChange={() =>\n                          handleResolutionChange(conflictId, \"local\")\n                        }\n                        className=\"sr-only\"\n                      />\n                      <div\n                        className={`border-2 rounded-lg p-4 transition-colors ${\n                          resolutions[conflictId] === \"local\"\n                            ? \"border-purple-500 bg-purple-500/10\"\n                            : \"border-gray-600 hover:border-purple-400\"\n                        }`}\n                      >\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"font-medium text-purple-300\">\n                            {getDeviceLabel(true)}\n                          </span>\n                          <span className=\"text-sm text-gray-400\">\n                            {formatTimestamp(localTimestamp)}\n                          </span>\n                        </div>\n\n                        <div className=\"bg-gray-900 rounded p-3 text-sm\">\n                          <pre className=\"whitespace-pre-wrap text-gray-300 overflow-x-auto\">\n                            {formatValue(conflict.localData)}\n                          </pre>\n                        </div>\n                      </div>\n                    </label>\n\n                    {/* Remote Version */}\n                    <label className=\"cursor-pointer\">\n                      <input\n                        type=\"radio\"\n                        name={conflictId}\n                        value=\"remote\"\n                        checked={resolutions[conflictId] === \"remote\"}\n                        onChange={() =>\n                          handleResolutionChange(conflictId, \"remote\")\n                        }\n                        className=\"sr-only\"\n                      />\n                      <div\n                        className={`border-2 rounded-lg p-4 transition-colors ${\n                          resolutions[conflictId] === \"remote\"\n                            ? \"border-purple-500 bg-purple-500/10\"\n                            : \"border-gray-600 hover:border-purple-400\"\n                        }`}\n                      >\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"font-medium text-purple-300\">\n                            {getDeviceLabel(false)}\n                          </span>\n                          <span className=\"text-sm text-gray-400\">\n                            {formatTimestamp(remoteTimestamp)}\n                          </span>\n                        </div>\n\n                        <div className=\"bg-gray-900 rounded p-3 text-sm\">\n                          <pre className=\"whitespace-pre-wrap text-gray-300 overflow-x-auto\">\n                            {formatValue(conflict.remoteData)}\n                          </pre>\n                        </div>\n                      </div>\n                    </label>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        <div className=\"p-6 border-t border-purple-700 flex justify-between items-center\">\n          <div className=\"text-sm text-gray-400\">\n            {Object.keys(resolutions).length} of {conflicts.length} conflicts\n            resolved\n          </div>\n\n          <div className=\"flex space-x-3\">\n            <button\n              onClick={onCancel}\n              className=\"px-4 py-2 text-gray-400 hover:text-white transition-colors\"\n            >\n              Cancel\n            </button>\n            <button\n              onClick={handleResolve}\n              disabled={Object.keys(resolutions).length !== conflicts.length}\n              className=\"px-6 py-2 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg transition-colors\"\n            >\n              Resolve Conflicts\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/common/DexieDemo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/common/SyncStatusIndicator.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/common/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/dashboard/DashboardHeader.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/dashboard/DashboardMain.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/dashboard/FeatureCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/database/DatabaseDemo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/demo/SessionPersistenceDemo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/examples/IntegratedTaskManager.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/feedback/FeedbackFAB.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (86). Maximum allowed is 75.",
        "line": 11,
        "column": 31,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 107,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// src/components/feedback/FeedbackFAB.tsx\n\nimport React, { useState } from \"react\";\nimport { FaPlus, FaBug, FaLightbulb, FaComment } from \"../../utils/iconImport\";\nimport FeedbackModal from \"./FeedbackModal\";\n// TODO: Replace with proper hook - components shouldn't import services directly\n// import { FeedbackService } from \"../../services/feedbackService\";\nimport type { FeedbackType, FeedbackData } from \"../../types/feedback\";\nimport { logger } from \"../../utils/logging\";\n\nconst FeedbackFAB: React.FC = () => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [feedbackType, setFeedbackType] = useState<FeedbackType | null>(null);\n\n  const openFeedback = (type: FeedbackType) => {\n    setFeedbackType(type);\n    setShowModal(true);\n    setIsExpanded(false);\n  };\n\n  const handleFeedbackSubmit = async (feedback: FeedbackData) => {\n    try {\n      // TODO: Replace with proper hook - components shouldn't call services directly\n      // await FeedbackService.submitFeedback(feedback);\n      logger.info(\n        \"Feedback submission temporarily disabled - needs hook implementation\",\n        feedback,\n      );\n    } catch (error) {\n      logger.error(\"Failed to submit feedback\", error);\n      // Error handling - could show a toast notification\n      throw error;\n    }\n  };\n\n  return (\n    <>\n      {/* Main FAB */}\n      <div className=\"fixed bottom-6 right-6 z-40\">\n        <div\n          className={`transition-all duration-300 ${isExpanded ? \"space-y-3\" : \"space-y-0\"}`}\n        >\n          {/* Expanded Options */}\n          {isExpanded && (\n            <div className=\"space-y-3\">\n              <button\n                onClick={() => openFeedback(\"bug\")}\n                className=\"flex items-center gap-2 bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-full shadow-lg transition-all transform translate-y-0 opacity-100\"\n              >\n                <FaBug />\n                <span className=\"text-sm font-medium\">Report Bug</span>\n              </button>\n\n              <button\n                onClick={() => openFeedback(\"feature\")}\n                className=\"flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-full shadow-lg transition-all transform translate-y-0 opacity-100\"\n              >\n                <FaLightbulb />\n                <span className=\"text-sm font-medium\">Suggest Feature</span>\n              </button>\n\n              <button\n                onClick={() => openFeedback(\"general\")}\n                className=\"flex items-center gap-2 bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-full shadow-lg transition-all transform translate-y-0 opacity-100\"\n              >\n                <FaComment />\n                <span className=\"text-sm font-medium\">General Feedback</span>\n              </button>\n            </div>\n          )}\n\n          {/* Main Button */}\n          <button\n            onClick={() => setIsExpanded(!isExpanded)}\n            className={`w-14 h-14 bg-blue-600 hover:bg-blue-700 text-white rounded-full shadow-lg flex items-center justify-center transition-all ${\n              isExpanded ? \"rotate-45\" : \"rotate-0\"\n            }`}\n            aria-label=\"Open feedback options\"\n          >\n            <FaPlus className=\"text-xl\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Backdrop for closing when expanded */}\n      {isExpanded && (\n        <div\n          className=\"fixed inset-0 z-30\"\n          onClick={() => setIsExpanded(false)}\n        />\n      )}\n\n      {/* Feedback Modal */}\n      {showModal && (\n        <FeedbackModal\n          type={feedbackType}\n          onClose={() => {\n            setShowModal(false);\n            setFeedbackType(null);\n          }}\n          onSubmit={handleFeedbackSubmit}\n        />\n      )}\n    </>\n  );\n};\n\nexport default FeedbackFAB;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/feedback/FeedbackModal.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (78). Maximum allowed is 75.",
        "line": 411,
        "column": 53,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 496,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// src/components/feedback/FeedbackModal.tsx\n\nimport React, { useState } from \"react\";\nimport {\n  FaBug,\n  FaLightbulb,\n  FaComment,\n  FaTimes,\n  FaPaperPlane,\n} from \"../../utils/iconImport\";\nimport type {\n  FeedbackModalProps,\n  FeedbackData,\n  FeedbackType,\n} from \"../../types/feedback\";\nimport { collectSystemInfo } from \"../../utils/systemInfo\";\nimport { logger } from \"../../utils/logging\";\n\n// Form field components\ninterface FormFieldProps {\n  label: string;\n  required?: boolean;\n  children: React.ReactNode;\n}\n\nconst FormField: React.FC<FormFieldProps> = ({ label, required, children }) => (\n  <div>\n    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n      {label} {required && <span className=\"text-red-400\">*</span>}\n    </label>\n    {children}\n  </div>\n);\n\ninterface TextInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder: string;\n  disabled?: boolean;\n  required?: boolean;\n}\n\nconst TextInput: React.FC<TextInputProps> = ({\n  value,\n  onChange,\n  placeholder,\n  disabled,\n  required,\n}) => (\n  <input\n    type=\"text\"\n    value={value}\n    onChange={(e) => onChange(e.target.value)}\n    className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n    placeholder={placeholder}\n    required={required}\n    disabled={disabled}\n  />\n);\n\ninterface TextAreaProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder: string;\n  rows?: number;\n  disabled?: boolean;\n  required?: boolean;\n}\n\nconst TextArea: React.FC<TextAreaProps> = ({\n  value,\n  onChange,\n  placeholder,\n  rows = 4,\n  disabled,\n  required,\n}) => (\n  <textarea\n    value={value}\n    onChange={(e) => onChange(e.target.value)}\n    className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-white placeholder-gray-400 resize-none focus:outline-none focus:ring-2 focus:ring-blue-500\"\n    rows={rows}\n    placeholder={placeholder}\n    required={required}\n    disabled={disabled}\n  />\n);\n\n// Priority selector component\ninterface PrioritySelectorProps {\n  value: string;\n  onChange: (value: string) => void;\n  disabled?: boolean;\n}\n\nconst PrioritySelector: React.FC<PrioritySelectorProps> = ({\n  value,\n  onChange,\n  disabled,\n}) => (\n  <select\n    value={value}\n    onChange={(e) => onChange(e.target.value)}\n    className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n    disabled={disabled}\n  >\n    <option value=\"low\">Low - Minor inconvenience</option>\n    <option value=\"medium\">Medium - Affects functionality</option>\n    <option value=\"high\">High - Prevents core features</option>\n  </select>\n);\n\n// Bug-specific fields component\ninterface BugFieldsProps {\n  formData: {\n    steps: string;\n    expected: string;\n    actual: string;\n    priority: string;\n  };\n  onUpdateField: (field: string, value: string) => void;\n  disabled: boolean;\n}\n\nconst BugFields: React.FC<BugFieldsProps> = ({\n  formData,\n  onUpdateField,\n  disabled,\n}) => (\n  <>\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n      <FormField label=\"Steps to Reproduce\">\n        <TextArea\n          value={formData.steps}\n          onChange={(value) => onUpdateField(\"steps\", value)}\n          placeholder=\"1. Go to...&#10;2. Click on...&#10;3. See error\"\n          rows={3}\n          disabled={disabled}\n        />\n      </FormField>\n\n      <FormField label=\"Priority\">\n        <PrioritySelector\n          value={formData.priority}\n          onChange={(value) => onUpdateField(\"priority\", value)}\n          disabled={disabled}\n        />\n      </FormField>\n    </div>\n\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n      <FormField label=\"Expected Behavior\">\n        <TextArea\n          value={formData.expected}\n          onChange={(value) => onUpdateField(\"expected\", value)}\n          placeholder=\"What should have happened?\"\n          rows={2}\n          disabled={disabled}\n        />\n      </FormField>\n\n      <FormField label=\"Actual Behavior\">\n        <TextArea\n          value={formData.actual}\n          onChange={(value) => onUpdateField(\"actual\", value)}\n          placeholder=\"What actually happened?\"\n          rows={2}\n          disabled={disabled}\n        />\n      </FormField>\n    </div>\n  </>\n);\n\n// Helper functions extracted from main component\nconst getModalTitle = (type: FeedbackType): string => {\n  switch (type) {\n    case \"bug\":\n      return \"Report a Bug\";\n    case \"feature\":\n      return \"Suggest a Feature\";\n    case \"general\":\n      return \"General Feedback\";\n    default:\n      return \"Feedback\";\n  }\n};\n\nconst getModalIcon = (type: FeedbackType): React.ReactElement => {\n  switch (type) {\n    case \"bug\":\n      return <FaBug className=\"text-red-400\" />;\n    case \"feature\":\n      return <FaLightbulb className=\"text-blue-400\" />;\n    case \"general\":\n      return <FaComment className=\"text-green-400\" />;\n    default:\n      return <FaComment className=\"text-green-400\" />;\n  }\n};\n\nconst getTitlePlaceholder = (type: FeedbackType): string => {\n  switch (type) {\n    case \"bug\":\n      return \"Brief description of the bug\";\n    case \"feature\":\n      return \"Short title for your feature request\";\n    case \"general\":\n      return \"Summary of your feedback\";\n    default:\n      return \"Brief title\";\n  }\n};\n\nconst getDescriptionPlaceholder = (type: FeedbackType): string => {\n  switch (type) {\n    case \"bug\":\n      return \"Describe what happened and what you expected to happen\";\n    case \"feature\":\n      return \"Describe your feature idea and how it would help\";\n    case \"general\":\n      return \"Share your thoughts and suggestions\";\n    default:\n      return \"Describe your feedback\";\n  }\n};\n\nconst getTitleLabel = (type: FeedbackType): string => {\n  switch (type) {\n    case \"bug\":\n      return \"Bug Summary\";\n    case \"feature\":\n      return \"Feature Title\";\n    default:\n      return \"Feedback Title\";\n  }\n};\n\n// Form content component\ninterface FeedbackFormProps {\n  type: FeedbackType;\n  formData: {\n    title: string;\n    description: string;\n    steps: string;\n    expected: string;\n    actual: string;\n    priority: string;\n    contactEmail: string;\n    includeSystemInfo: boolean;\n  };\n  updateField: (field: string, value: string | boolean | File | null) => void;\n  isSubmitting: boolean;\n  onSubmit: (e: React.FormEvent) => void;\n  onClose: () => void;\n}\n\n// Form actions component (toggle and buttons)\ninterface FormActionsProps {\n  type: FeedbackType;\n  formData: { includeSystemInfo: boolean };\n  updateField: (field: string, value: boolean | File | null) => void;\n  isSubmitting: boolean;\n  onClose: () => void;\n}\n\nconst FormActions: React.FC<FormActionsProps> = ({\n  type,\n  formData,\n  updateField,\n  isSubmitting,\n  onClose,\n}) => (\n  <>\n    {/* System Info Toggle */}\n    <div className=\"flex items-center justify-between\">\n      <div>\n        <div className=\"text-sm font-medium text-gray-300\">\n          Include System Information\n        </div>\n        <div className=\"text-xs text-gray-500\">\n          Helps us debug technical issues\n        </div>\n      </div>\n      <label className=\"relative inline-flex items-center cursor-pointer\">\n        <input\n          type=\"checkbox\"\n          checked={formData.includeSystemInfo}\n          onChange={(e) => updateField(\"includeSystemInfo\", e.target.checked)}\n          className=\"sr-only peer\"\n          disabled={isSubmitting}\n        />\n        <div className=\"w-11 h-6 bg-gray-600 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n      </label>\n    </div>\n\n    {/* Submit Buttons */}\n    <div className=\"flex gap-3 pt-4\">\n      <button\n        type=\"submit\"\n        disabled={isSubmitting}\n        className=\"bg-blue-600 hover:bg-blue-700 disabled:bg-blue-800 disabled:opacity-50 text-white px-6 py-3 rounded font-medium transition-colors flex items-center gap-2\"\n      >\n        <FaPaperPlane />\n        {getSubmitButtonText(type, isSubmitting)}\n      </button>\n      <button\n        type=\"button\"\n        onClick={onClose}\n        disabled={isSubmitting}\n        className=\"bg-white/10 hover:bg-white/20 disabled:bg-white/5 text-gray-300 px-6 py-3 rounded font-medium transition-colors\"\n      >\n        Cancel\n      </button>\n    </div>\n  </>\n);\n\nconst FeedbackForm: React.FC<FeedbackFormProps> = ({\n  type,\n  formData,\n  updateField,\n  isSubmitting,\n  onSubmit,\n  onClose,\n}) => (\n  <form\n    onSubmit={onSubmit}\n    className=\"p-6 overflow-y-auto max-h-[70vh] space-y-4\"\n  >\n    {/* Title */}\n    <FormField label={getTitleLabel(type)} required>\n      <TextInput\n        value={formData.title}\n        onChange={(value) => updateField(\"title\", value)}\n        placeholder={getTitlePlaceholder(type)}\n        disabled={isSubmitting}\n        required\n      />\n    </FormField>\n\n    {/* Description */}\n    <FormField label=\"Description\" required>\n      <TextArea\n        value={formData.description}\n        onChange={(value) => updateField(\"description\", value)}\n        placeholder={getDescriptionPlaceholder(type)}\n        disabled={isSubmitting}\n        required\n      />\n    </FormField>\n\n    {/* Bug-specific fields */}\n    {type === \"bug\" && (\n      <BugFields\n        formData={formData}\n        onUpdateField={updateField}\n        disabled={isSubmitting}\n      />\n    )}\n\n    {/* Screenshot Upload */}\n    <FormField label=\"Screenshot (Optional)\">\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={(e) => updateField(\"screenshot\", e.target.files?.[0] || null)}\n        className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-white file:mr-4 file:rounded file:border-0 file:bg-blue-600 file:px-4 file:py-2 file:text-white hover:file:bg-blue-700\"\n        disabled={isSubmitting}\n      />\n    </FormField>\n\n    {/* Contact Email */}\n    <FormField label=\"Contact Email (Optional)\">\n      <input\n        type=\"email\"\n        value={formData.contactEmail}\n        onChange={(e) => updateField(\"contactEmail\", e.target.value)}\n        className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        placeholder=\"your@email.com (if you want updates)\"\n        disabled={isSubmitting}\n      />\n    </FormField>\n\n    <FormActions\n      type={type}\n      formData={formData}\n      updateField={updateField}\n      isSubmitting={isSubmitting}\n      onClose={onClose}\n    />\n  </form>\n);\n\nconst getSubmitButtonText = (\n  type: FeedbackType,\n  isSubmitting: boolean,\n): string => {\n  if (isSubmitting) return \"Submitting...\";\n\n  switch (type) {\n    case \"bug\":\n      return \"Submit Bug Report\";\n    case \"feature\":\n      return \"Submit Feature Request\";\n    default:\n      return \"Submit Feedback\";\n  }\n};\n\nconst FeedbackModal: React.FC<FeedbackModalProps> = ({\n  type,\n  onClose,\n  onSubmit,\n}) => {\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    steps: \"\", // For bug reports\n    expected: \"\", // For bug reports\n    actual: \"\", // For bug reports\n    priority: \"medium\" as \"low\" | \"medium\" | \"high\",\n    category: \"\",\n    contactEmail: \"\",\n    includeSystemInfo: true,\n    screenshot: null as File | null,\n  });\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  if (!type) return null;\n\n  const updateField = (\n    field: string,\n    value: string | boolean | File | null,\n  ) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      const feedbackData: FeedbackData = {\n        type,\n        ...formData,\n        systemInfo: formData.includeSystemInfo\n          ? await collectSystemInfo()\n          : null,\n        timestamp: new Date(),\n        userAgent: navigator.userAgent,\n        url: window.location.pathname,\n      };\n\n      await onSubmit(feedbackData);\n      onClose();\n    } catch (error) {\n      logger.error(\"Failed to submit feedback\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n      <div className=\"bg-gradient-to-br from-gray-900 to-gray-800 max-w-2xl w-full max-h-[90vh] rounded-lg border border-gray-600 overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-600\">\n          <div className=\"flex items-center gap-3\">\n            {getModalIcon(type)}\n            <h2 className=\"text-xl font-bold text-white\">\n              {getModalTitle(type)}\n            </h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-white/10 rounded-lg transition-colors\"\n            disabled={isSubmitting}\n          >\n            <FaTimes className=\"text-gray-400\" />\n          </button>\n        </div>\n\n        <FeedbackForm\n          type={type}\n          formData={formData}\n          updateField={updateField}\n          isSubmitting={isSubmitting}\n          onSubmit={handleSubmit}\n          onClose={onClose}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default FeedbackModal;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/feedback/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/goals/SpecialChallengeSection.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (156). Maximum allowed is 75.",
        "line": 19,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 193,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from \"react\";\nimport {\n  FaCalendarAlt,\n  FaTrophy,\n  FaLock,\n  FaBan,\n  FaCheckCircle,\n  FaSpinner,\n} from \"@/utils/iconImport\";\nimport { useSpecialChallenges } from \"@/hooks/useSpecialChallenges\";\nimport { logger } from \"@/utils/logging\";\n\ninterface SpecialChallengeSectionProps {\n  userId: string | null;\n}\n\nexport const SpecialChallengeSection: React.FC<\n  SpecialChallengeSectionProps\n> = ({ userId }) => {\n  const {\n    challengeStatus,\n    isLoading,\n    error,\n    joinChallenge,\n    getChallengeProgress,\n  } = useSpecialChallenges(userId);\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-white/10 backdrop-blur-xs border-white/20 p-4 rounded-lg\">\n        <div className=\"flex items-center justify-center py-8\">\n          <FaSpinner className=\"animate-spin text-2xl text-blue-400\" />\n          <span className=\"ml-2 text-blue-200\">Loading challenges...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-900/20 border-red-500/50 p-4 rounded-lg\">\n        <p className=\"text-red-300\">Error loading challenges: {error}</p>\n      </div>\n    );\n  }\n\n  const handleJoinChallenge = async (\n    challengeType: \"locktober\" | \"no_nut_november\",\n  ) => {\n    try {\n      await joinChallenge(challengeType);\n    } catch (err) {\n      // Error is handled by the hook\n      logger.error(\n        \"Failed to join challenge\",\n        { error: err },\n        \"SpecialChallengeSection\",\n      );\n    }\n  };\n\n  const ChallengeCard: React.FC<{\n    type: \"locktober\" | \"no_nut_november\";\n    title: string;\n    description: string;\n    icon: React.ReactNode;\n    month: string;\n    colorClasses: string;\n  }> = ({ type, title, description, icon, month, colorClasses }) => {\n    const challengeMap = {\n      locktober: challengeStatus.locktober,\n      no_nut_november: challengeStatus.noNutNovember,\n    };\n    const challenge = challengeMap[type as keyof typeof challengeMap];\n    const progress = getChallengeProgress(type);\n\n    return (\n      <div className={`p-4 rounded-lg border ${colorClasses}`}>\n        <div className=\"flex items-center mb-3\">\n          {icon}\n          <h3 className=\"text-xl font-bold ml-2\">{title}</h3>\n        </div>\n\n        <p className=\"text-sm opacity-80 mb-4\">{description}</p>\n\n        <div className=\"flex items-center text-sm mb-3\">\n          <FaCalendarAlt className=\"mr-2\" />\n          <span>Active during {month}</span>\n        </div>\n\n        {!challenge.available && (\n          <div className=\"text-center py-3\">\n            <p className=\"text-sm opacity-60\">Available during {month} only</p>\n          </div>\n        )}\n\n        {challenge.available && !challenge.active && !challenge.completed && (\n          <button\n            onClick={() => handleJoinChallenge(type)}\n            className=\"w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-200 flex items-center justify-center\"\n          >\n            <FaTrophy className=\"mr-2\" />\n            Join Challenge\n          </button>\n        )}\n\n        {challenge.active && (\n          <div>\n            <div className=\"mb-3\">\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span>Progress</span>\n                <span>{progress.toFixed(1)}%</span>\n              </div>\n              <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                <div\n                  className=\"bg-gradient-to-r from-green-400 to-blue-500 h-2 rounded-full transition-all duration-300\"\n                  style={{ width: `${Math.min(100, progress)}%` }}\n                />\n              </div>\n            </div>\n            <div className=\"text-center py-2\">\n              <div className=\"flex items-center justify-center text-green-400\">\n                <FaCheckCircle className=\"mr-2\" />\n                <span className=\"font-semibold\">Challenge Active!</span>\n              </div>\n              <p className=\"text-xs opacity-70 mt-1\">\n                Keep going to complete the challenge\n              </p>\n            </div>\n          </div>\n        )}\n\n        {challenge.completed && (\n          <div className=\"text-center py-3\">\n            <div className=\"flex items-center justify-center text-gold-400 mb-2\">\n              <FaTrophy className=\"text-2xl mr-2\" />\n              <span className=\"text-lg font-bold\">Completed!</span>\n            </div>\n            <p className=\"text-sm opacity-80\">\n              Congratulations on completing the challenge!\n            </p>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // Only show section if at least one challenge is available or active\n  const shouldShow =\n    challengeStatus.locktober.available ||\n    challengeStatus.noNutNovember.available ||\n    challengeStatus.locktober.active ||\n    challengeStatus.noNutNovember.active ||\n    challengeStatus.locktober.completed ||\n    challengeStatus.noNutNovember.completed;\n\n  if (!shouldShow) {\n    return null;\n  }\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-xs border-white/20 p-4 rounded-lg\">\n      <h2 className=\"text-2xl font-bold mb-4 flex items-center\">\n        <FaCalendarAlt className=\"mr-2 text-purple-400\" />\n        Special Challenges\n      </h2>\n\n      <p className=\"text-sm opacity-80 mb-6\">\n        Take on month-long challenges for special achievements and recognition!\n      </p>\n\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <ChallengeCard\n          type=\"locktober\"\n          title=\"Locktober\"\n          description=\"Stay locked in chastity for the entire month of October\"\n          icon={<FaLock className=\"text-2xl text-orange-400\" />}\n          month=\"October\"\n          colorClasses=\"bg-orange-900/20 border-orange-500/50 text-orange-100\"\n        />\n\n        <ChallengeCard\n          type=\"no_nut_november\"\n          title=\"No Nut November\"\n          description=\"Abstain from orgasms for the entire month of November\"\n          icon={<FaBan className=\"text-2xl text-blue-400\" />}\n          month=\"November\"\n          colorClasses=\"bg-blue-900/20 border-blue-500/50 text-blue-100\"\n        />\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/AcceptInviteCodeSection.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/AccountLinking.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (116). Maximum allowed is 75.",
        "line": 23,
        "column": 62,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 154,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Account Linking Component\n * Manages keyholder-submissive relationship creation and management\n */\nimport React from \"react\";\nimport { useKeyholderRelationships } from \"../../hooks/useKeyholderRelationships\";\nimport { getAccountLinkingState } from \"./AccountLinkingHelpers\";\nimport { AccountLinkingLoading } from \"./AccountLinkingLoading\";\nimport { AccountLinkingHeader } from \"./AccountLinkingHeader\";\nimport { LinkingMessageDisplay } from \"./LinkingMessageDisplay\";\nimport { RelationshipSummary } from \"./RelationshipSummary\";\nimport { ActiveKeyholderDisplay } from \"./ActiveKeyholderDisplay\";\nimport { InviteCodeCreationSection } from \"./InviteCodeCreationSection\";\nimport { ActiveInviteCodesDisplay } from \"./ActiveInviteCodesDisplay\";\nimport { AcceptInviteCodeSection } from \"./AcceptInviteCodeSection\";\nimport { SubmissiveRelationshipsDisplay } from \"./SubmissiveRelationshipsDisplay\";\nimport { AccountLinkingHelp } from \"./AccountLinkingHelp\";\n\ninterface AccountLinkingProps {\n  className?: string;\n}\n\nexport const AccountLinking: React.FC<AccountLinkingProps> = ({\n  className = \"\",\n}) => {\n  const {\n    relationships,\n    activeKeyholder,\n    activeInviteCodes,\n    relationshipSummary,\n    isLoading,\n    isCreatingInvite,\n    isAcceptingInvite,\n    inviteCodeInput,\n    keyholderNameInput,\n    message,\n    messageType,\n    createInviteCode,\n    acceptInviteCode,\n    revokeInviteCode,\n    endRelationship,\n    setInviteCodeInput,\n    setKeyholderNameInput,\n    clearMessage,\n    validateInviteCode,\n  } = useKeyholderRelationships();\n\n  // Helper functions to reduce complexity\n  const handleCreateInvite = async () => {\n    await createInviteCode(24); // 24 hour expiration\n  };\n\n  const handleAcceptInvite = async () => {\n    if (!validateInviteCode(inviteCodeInput)) {\n      return;\n    }\n    await acceptInviteCode(inviteCodeInput, keyholderNameInput);\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n    } catch {\n      // Fallback for older browsers\n      const textArea = document.createElement(\"textarea\");\n      textArea.value = text;\n      document.body.appendChild(textArea);\n      textArea.focus();\n      textArea.select();\n      document.execCommand(\"copy\");\n      document.body.removeChild(textArea);\n    }\n  };\n\n  const linkingState = getAccountLinkingState(\n    relationships,\n    activeKeyholder,\n    activeInviteCodes,\n    message,\n    messageType,\n  );\n\n  if (isLoading) {\n    return <AccountLinkingLoading className={className} />;\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <AccountLinkingHeader />\n\n      {/* Messages */}\n      <LinkingMessageDisplay\n        message={message}\n        messageType={messageType}\n        onClearMessage={clearMessage}\n      />\n\n      {/* Relationship Summary */}\n      <RelationshipSummary relationshipSummary={relationshipSummary} />\n\n      {/* Active Keyholder Relationship */}\n      {activeKeyholder && (\n        <ActiveKeyholderDisplay\n          activeKeyholder={{\n            ...activeKeyholder,\n            permissions: activeKeyholder.permissions as unknown as Record<\n              string,\n              boolean\n            >,\n          }}\n          onEndRelationship={endRelationship}\n        />\n      )}\n\n      {/* Create Invite Code Section */}\n      <InviteCodeCreationSection\n        shouldShow={!linkingState.hasActiveKeyholder}\n        isCreatingInvite={isCreatingInvite}\n        onCreateInvite={handleCreateInvite}\n      />\n\n      {/* Active Invite Codes */}\n      <ActiveInviteCodesDisplay\n        activeInviteCodes={activeInviteCodes}\n        onCopyCode={copyToClipboard}\n        onRevokeCode={revokeInviteCode}\n      />\n\n      {/* Accept Invite Code Section */}\n      <AcceptInviteCodeSection\n        inviteCodeInput={inviteCodeInput}\n        keyholderNameInput={keyholderNameInput}\n        isAcceptingInvite={isAcceptingInvite}\n        onSetInviteCodeInput={setInviteCodeInput}\n        onSetKeyholderNameInput={setKeyholderNameInput}\n        onAcceptInvite={handleAcceptInvite}\n        validateInviteCode={validateInviteCode}\n      />\n\n      {/* Submissive Relationships */}\n      <SubmissiveRelationshipsDisplay\n        relationships={relationships.asKeyholder.map((rel) => ({\n          ...rel,\n          permissions: rel.permissions as unknown as Record<string, boolean>,\n        }))}\n        onEndRelationship={endRelationship}\n      />\n\n      {/* Help Section */}\n      <AccountLinkingHelp />\n    </div>\n  );\n};\n\nexport default AccountLinking;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/AccountLinkingComponents.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/AccountLinkingDemo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/AccountLinkingDemoComponents.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/AccountLinkingHeader.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/AccountLinkingHelp.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/AccountLinkingHelpers.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/AccountLinkingLoading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/AccountLinkingPreview.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/ActiveInviteCodesDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/ActiveKeyholderDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/AdminDashboard.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (155). Maximum allowed is 75.",
        "line": 16,
        "column": 41,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 185,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from \"react\";\nimport {\n  FaUserShield,\n  FaEye,\n  FaCog,\n  FaUsers,\n  FaTasks,\n  FaLock,\n  FaHistory,\n  FaShieldAlt,\n  FaSpinner,\n} from \"react-icons/fa\";\nimport { useAccountLinking } from \"../../hooks/account-linking/useAccountLinking\";\nimport { AdminRelationship } from \"../../types/account-linking\";\n\nexport const AdminDashboard: React.FC = () => {\n  const {\n    relationships,\n    keyholderRelationships,\n    selectedWearerId,\n    setSelectedWearer,\n    startAdminSession,\n    isAdminSessionActive,\n    isLoadingRelationships,\n  } = useAccountLinking();\n\n  const [selectedTab, setSelectedTab] = useState<\n    \"overview\" | \"sessions\" | \"tasks\" | \"settings\"\n  >(\"overview\");\n\n  // Only show admin dashboard if user is a keyholder\n  const isKeyholder = keyholderRelationships.length > 0;\n\n  if (!isKeyholder) {\n    return null;\n  }\n\n  const selectedRelationship = selectedWearerId\n    ? relationships.find((r) => r.wearerId === selectedWearerId)\n    : keyholderRelationships[0];\n\n  const handleStartAdminSession = () => {\n    if (selectedRelationship) {\n      startAdminSession(selectedRelationship.id);\n    }\n  };\n\n  if (isLoadingRelationships) {\n    return (\n      <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6 mb-6\">\n        <div className=\"flex items-center justify-center py-8\">\n          <FaSpinner className=\"animate-spin text-2xl text-nightly-aquamarine\" />\n          <span className=\"ml-3 text-nightly-celadon\">\n            Loading admin dashboard...\n          </span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6 mb-6\">\n      <div className=\"flex items-center gap-3 mb-6\">\n        <FaUserShield className=\"text-nightly-lavender-floral\" />\n        <h2 className=\"text-xl font-semibold text-nightly-honeydew\">\n          Keyholder Admin Dashboard\n        </h2>\n        <span className=\"bg-nightly-lavender-floral/20 text-nightly-lavender-floral px-2 py-1 text-xs rounded\">\n          KEYHOLDER\n        </span>\n      </div>\n\n      {/* Wearer Selection */}\n      {keyholderRelationships.length > 1 && (\n        <div className=\"mb-6\">\n          <label className=\"block text-sm font-medium text-nightly-honeydew mb-2\">\n            Select Wearer to Manage:\n          </label>\n          <select\n            value={selectedWearerId || \"\"}\n            onChange={(e) => setSelectedWearer(e.target.value || null)}\n            className=\"bg-black/20 text-nightly-honeydew px-3 py-2 rounded w-full max-w-md\"\n          >\n            {keyholderRelationships.map((relationship) => (\n              <option key={relationship.id} value={relationship.wearerId}>\n                Wearer: {relationship.wearerId}\n              </option>\n            ))}\n          </select>\n        </div>\n      )}\n\n      {selectedRelationship && (\n        <>\n          {/* Admin Session Status */}\n          <div className=\"bg-white/5 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"font-medium text-nightly-honeydew mb-1\">\n                  Admin Session\n                </h3>\n                <p className=\"text-sm text-nightly-celadon\">\n                  {isAdminSessionActive\n                    ? `Active session for ${selectedRelationship.wearerId}`\n                    : \"No active admin session\"}\n                </p>\n              </div>\n              <div>\n                {!isAdminSessionActive ? (\n                  <button\n                    onClick={handleStartAdminSession}\n                    className=\"bg-nightly-lavender-floral hover:bg-nightly-lavender-floral/80 text-white px-4 py-2 rounded font-medium transition-colors flex items-center gap-2\"\n                  >\n                    <FaShieldAlt />\n                    Start Admin Session\n                  </button>\n                ) : (\n                  <div className=\"flex items-center gap-2 text-green-400\">\n                    <FaShieldAlt />\n                    <span className=\"text-sm\">Session Active</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Navigation Tabs */}\n          <div className=\"flex space-x-1 bg-black/20 rounded-lg p-1 mb-6\">\n            {[\n              { id: \"overview\", label: \"Overview\", icon: FaEye },\n              { id: \"sessions\", label: \"Sessions\", icon: FaLock },\n              { id: \"tasks\", label: \"Tasks\", icon: FaTasks },\n              { id: \"settings\", label: \"Settings\", icon: FaCog },\n            ].map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() =>\n                  setSelectedTab(\n                    tab.id as \"overview\" | \"sessions\" | \"tasks\" | \"settings\",\n                  )\n                }\n                className={`flex-1 flex items-center justify-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${\n                  selectedTab === tab.id\n                    ? \"bg-nightly-lavender-floral text-white\"\n                    : \"text-nightly-celadon hover:text-nightly-honeydew hover:bg-white/5\"\n                }`}\n              >\n                <tab.icon />\n                {tab.label}\n              </button>\n            ))}\n          </div>\n\n          {/* Tab Content */}\n          <div className=\"space-y-6\">\n            {selectedTab === \"overview\" && (\n              <AdminOverview relationship={selectedRelationship} />\n            )}\n\n            {selectedTab === \"sessions\" && (\n              <AdminSessions\n                relationship={selectedRelationship}\n                isSessionActive={isAdminSessionActive}\n              />\n            )}\n\n            {selectedTab === \"tasks\" && (\n              <AdminTasks\n                relationship={selectedRelationship}\n                isSessionActive={isAdminSessionActive}\n              />\n            )}\n\n            {selectedTab === \"settings\" && (\n              <AdminSettings\n                relationship={selectedRelationship}\n                isSessionActive={isAdminSessionActive}\n              />\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\n// Sub-components for each tab\nconst AdminOverview: React.FC<{ relationship: AdminRelationship }> = ({\n  relationship,\n}) => (\n  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n    <div className=\"bg-white/5 rounded-lg p-4\">\n      <div className=\"flex items-center gap-3 mb-3\">\n        <FaUsers className=\"text-nightly-aquamarine\" />\n        <h4 className=\"font-medium text-nightly-honeydew\">Relationship</h4>\n      </div>\n      <div className=\"text-sm text-nightly-celadon space-y-1\">\n        <p>\n          Status: <span className=\"text-green-400\">{relationship.status}</span>\n        </p>\n        <p>\n          Established:{\" \"}\n          {relationship.establishedAt.toDate().toLocaleDateString()}\n        </p>\n        <p>Method: {relationship.linkMethod}</p>\n      </div>\n    </div>\n\n    <div className=\"bg-white/5 rounded-lg p-4\">\n      <div className=\"flex items-center gap-3 mb-3\">\n        <FaShieldAlt className=\"text-nightly-lavender-floral\" />\n        <h4 className=\"font-medium text-nightly-honeydew\">Permissions</h4>\n      </div>\n      <div className=\"text-sm text-nightly-celadon space-y-1\">\n        <p>Sessions: {relationship.permissions.controlSessions ? \"✓\" : \"✗\"}</p>\n        <p>Tasks: {relationship.permissions.manageTasks ? \"✓\" : \"✗\"}</p>\n        <p>Settings: {relationship.permissions.editSettings ? \"✓\" : \"✗\"}</p>\n      </div>\n    </div>\n\n    <div className=\"bg-white/5 rounded-lg p-4\">\n      <div className=\"flex items-center gap-3 mb-3\">\n        <FaHistory className=\"text-nightly-spring-green\" />\n        <h4 className=\"font-medium text-nightly-honeydew\">Activity</h4>\n      </div>\n      <div className=\"text-sm text-nightly-celadon\">\n        <p>\n          Last Access:{\" \"}\n          {relationship.lastAdminAccess\n            ? relationship.lastAdminAccess.toDate().toLocaleDateString()\n            : \"Never\"}\n        </p>\n        <p>Session Timeout: {relationship.security.sessionTimeout}m</p>\n      </div>\n    </div>\n  </div>\n);\n\nconst AdminSessions: React.FC<{\n  relationship: AdminRelationship;\n  isSessionActive: boolean;\n}> = ({ relationship, isSessionActive }) => (\n  <div className=\"space-y-4\">\n    <div className=\"bg-white/5 rounded-lg p-4\">\n      <h4 className=\"font-medium text-nightly-honeydew mb-3\">\n        Session Control\n      </h4>\n      {isSessionActive ? (\n        <div className=\"space-y-4\">\n          <p className=\"text-nightly-celadon\">\n            You have active admin access to manage {relationship.wearerId}'s\n            chastity sessions.\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n            <button className=\"bg-blue-500/20 hover:bg-blue-500/30 text-blue-400 px-4 py-2 rounded font-medium transition-colors\">\n              View Current Session\n            </button>\n            <button className=\"bg-green-500/20 hover:bg-green-500/30 text-green-400 px-4 py-2 rounded font-medium transition-colors\">\n              Start New Session\n            </button>\n            <button className=\"bg-yellow-500/20 hover:bg-yellow-500/30 text-yellow-400 px-4 py-2 rounded font-medium transition-colors\">\n              Pause Session\n            </button>\n            <button className=\"bg-red-500/20 hover:bg-red-500/30 text-red-400 px-4 py-2 rounded font-medium transition-colors\">\n              End Session\n            </button>\n          </div>\n        </div>\n      ) : (\n        <p className=\"text-nightly-celadon\">\n          Start an admin session to control {relationship.wearerId}'s chastity\n          sessions.\n        </p>\n      )}\n    </div>\n  </div>\n);\n\nconst AdminTasks: React.FC<{\n  relationship: AdminRelationship;\n  isSessionActive: boolean;\n}> = ({ relationship, isSessionActive }) => (\n  <div className=\"space-y-4\">\n    <div className=\"bg-white/5 rounded-lg p-4\">\n      <h4 className=\"font-medium text-nightly-honeydew mb-3\">\n        Task Management\n      </h4>\n      {isSessionActive ? (\n        <div className=\"space-y-4\">\n          <p className=\"text-nightly-celadon\">\n            Manage tasks for {relationship.wearerId}.\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n            <button className=\"bg-blue-500/20 hover:bg-blue-500/30 text-blue-400 px-4 py-2 rounded font-medium transition-colors\">\n              View All Tasks\n            </button>\n            <button className=\"bg-green-500/20 hover:bg-green-500/30 text-green-400 px-4 py-2 rounded font-medium transition-colors\">\n              Create New Task\n            </button>\n            <button className=\"bg-yellow-500/20 hover:bg-yellow-500/30 text-yellow-400 px-4 py-2 rounded font-medium transition-colors\">\n              Review Submissions\n            </button>\n            <button className=\"bg-purple-500/20 hover:bg-purple-500/30 text-purple-400 px-4 py-2 rounded font-medium transition-colors\">\n              Set Rewards/Punishments\n            </button>\n          </div>\n        </div>\n      ) : (\n        <p className=\"text-nightly-celadon\">\n          Start an admin session to manage tasks.\n        </p>\n      )}\n    </div>\n  </div>\n);\n\nconst AdminSettings: React.FC<{\n  relationship: AdminRelationship;\n  isSessionActive: boolean;\n}> = ({ relationship, isSessionActive: _isSessionActive }) => (\n  <div className=\"space-y-4\">\n    <div className=\"bg-white/5 rounded-lg p-4\">\n      <h4 className=\"font-medium text-nightly-honeydew mb-3\">Admin Settings</h4>\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-nightly-celadon\">Session Timeout</span>\n          <span className=\"text-nightly-honeydew\">\n            {relationship.security.sessionTimeout} minutes\n          </span>\n        </div>\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-nightly-celadon\">Audit Logging</span>\n          <span className=\"text-nightly-honeydew\">\n            {relationship.security.auditLog ? \"Enabled\" : \"Disabled\"}\n          </span>\n        </div>\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-nightly-celadon\">Wearer Notifications</span>\n          <span className=\"text-nightly-honeydew\">\n            {relationship.privacy.wearerCanSeeAdminActions\n              ? \"Enabled\"\n              : \"Disabled\"}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/InviteCodeCreationSection.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/KeyholderPasswordUnlock.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (110). Maximum allowed is 75.",
        "line": 6,
        "column": 50,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 127,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from \"react\";\nimport { useKeyholderStore } from \"../../stores/keyholderStore\";\nimport { FaLock, FaUnlock, FaKey, FaSpinner } from \"../../utils/iconImport\";\n\n// Password Unlock Component\nexport const KeyholderPasswordUnlock: React.FC = () => {\n  // Selective subscriptions for specific state values\n  const isKeyholderModeUnlocked = useKeyholderStore(\n    (state) => state.isKeyholderModeUnlocked,\n  );\n  const isPasswordDialogOpen = useKeyholderStore(\n    (state) => state.isPasswordDialogOpen,\n  );\n  const passwordAttempt = useKeyholderStore((state) => state.passwordAttempt);\n  const keyholderMessage = useKeyholderStore((state) => state.keyholderMessage);\n  const isCheckingPassword = useKeyholderStore(\n    (state) => state.isCheckingPassword,\n  );\n\n  // Selective subscriptions for actions (stable references)\n  const openPasswordDialog = useKeyholderStore(\n    (state) => state.openPasswordDialog,\n  );\n  const setPasswordAttempt = useKeyholderStore(\n    (state) => state.setPasswordAttempt,\n  );\n  const checkPassword = useKeyholderStore((state) => state.checkPassword);\n  const clearMessage = useKeyholderStore((state) => state.clearMessage);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!passwordAttempt.trim()) return;\n\n    // For demo - in real app this would come from settings\n    const storedHash = \"demo_password_hash\"; // This would be from user settings\n    await checkPassword(passwordAttempt, storedHash);\n  };\n\n  if (isKeyholderModeUnlocked) {\n    return (\n      <div className=\"bg-green-500/10 border border-green-500/20 rounded-lg p-4 mb-6\">\n        <div className=\"flex items-center gap-3\">\n          <FaUnlock className=\"text-green-400\" />\n          <span className=\"text-green-400 font-medium\">\n            Keyholder Controls Unlocked\n          </span>\n        </div>\n        <p className=\"text-nightly-celadon text-sm mt-2\">\n          You have temporary admin access to this account's chastity controls.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6 mb-6\">\n      <div className=\"flex items-center gap-3 mb-4\">\n        <FaLock className=\"text-nightly-aquamarine\" />\n        <h2 className=\"text-xl font-semibold text-nightly-honeydew\">\n          Temporary Keyholder Access\n        </h2>\n      </div>\n\n      <p className=\"text-nightly-celadon mb-4\">\n        This is the current temporary password-based keyholder system. In the\n        future, this will be replaced with secure account linking.\n      </p>\n\n      {!isPasswordDialogOpen ? (\n        <button\n          onClick={openPasswordDialog}\n          className=\"bg-nightly-aquamarine hover:bg-nightly-aquamarine/80 text-black px-6 py-2 rounded font-medium transition-colors flex items-center gap-2\"\n        >\n          <FaKey />\n          Unlock Keyholder Controls\n        </button>\n      ) : (\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n              Keyholder Password\n            </label>\n            <input\n              type=\"password\"\n              value={passwordAttempt}\n              onChange={(e) => setPasswordAttempt(e.target.value)}\n              placeholder=\"Enter keyholder password\"\n              className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew placeholder-nightly-celadon/50\"\n              disabled={isCheckingPassword}\n            />\n          </div>\n\n          {keyholderMessage && (\n            <div className=\"bg-yellow-500/10 border border-yellow-500/20 rounded p-3\">\n              <p className=\"text-yellow-300 text-sm\">{keyholderMessage}</p>\n              <button\n                type=\"button\"\n                onClick={clearMessage}\n                className=\"text-yellow-400 hover:text-yellow-300 text-sm mt-1\"\n              >\n                Dismiss\n              </button>\n            </div>\n          )}\n\n          <button\n            type=\"submit\"\n            disabled={isCheckingPassword || !passwordAttempt.trim()}\n            className=\"bg-nightly-aquamarine hover:bg-nightly-aquamarine/80 disabled:opacity-50 text-black px-6 py-2 rounded font-medium transition-colors flex items-center gap-2\"\n          >\n            {isCheckingPassword ? (\n              <>\n                <FaSpinner className=\"animate-spin\" />\n                Checking...\n              </>\n            ) : (\n              <>\n                <FaUnlock />\n                Unlock\n              </>\n            )}\n          </button>\n        </form>\n      )}\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/LinkingMessageDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/RelationshipSummary.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/SessionControls.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (76). Maximum allowed is 75.",
        "line": 10,
        "column": 64,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 92,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from \"react\";\nimport type { DBSession } from \"../../types/database\";\nimport { FaClock, FaPlay, FaPause, FaStop } from \"../../utils/iconImport\";\n\n// Current Session Control (for unlocked keyholder mode)\ninterface SessionControlsProps {\n  session: DBSession | null;\n}\n\nexport const SessionControls: React.FC<SessionControlsProps> = ({\n  session,\n}) => {\n  if (!session) {\n    return (\n      <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <FaClock className=\"text-nightly-aquamarine\" />\n          <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n            Session Control\n          </h3>\n        </div>\n        <p className=\"text-nightly-celadon\">No active session to control.</p>\n      </div>\n    );\n  }\n\n  const formatDuration = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    return `${hours}h ${minutes}m`;\n  };\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n      <div className=\"flex items-center gap-3 mb-4\">\n        <FaClock className=\"text-nightly-aquamarine\" />\n        <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n          Session Control\n        </h3>\n      </div>\n\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-nightly-celadon\">Status:</span>\n          <div className=\"flex items-center gap-2\">\n            {session.isPaused ? (\n              <>\n                <FaPause className=\"text-yellow-400\" />\n                <span className=\"text-yellow-400\">Paused</span>\n              </>\n            ) : (\n              <>\n                <FaPlay className=\"text-green-400\" />\n                <span className=\"text-green-400\">Active</span>\n              </>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-nightly-celadon\">Started:</span>\n          <span className=\"text-nightly-honeydew\">\n            {session.startTime.toLocaleDateString()}{\" \"}\n            {session.startTime.toLocaleTimeString()}\n          </span>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-nightly-celadon\">Pause Time:</span>\n          <span className=\"text-nightly-honeydew\">\n            {formatDuration(session.accumulatedPauseTime)}\n          </span>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-3 mt-6\">\n          <button\n            disabled={session.isPaused}\n            className=\"bg-yellow-500 hover:bg-yellow-600 disabled:opacity-50 disabled:cursor-not-allowed text-white px-4 py-2 rounded font-medium transition-colors flex items-center justify-center gap-2\"\n          >\n            <FaPause />\n            Pause Session\n          </button>\n\n          <button className=\"bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded font-medium transition-colors flex items-center justify-center gap-2\">\n            <FaStop />\n            End Session\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/SubmissiveRelationshipsDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/TaskManagement.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (182). Maximum allowed is 75.",
        "line": 17,
        "column": 62,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 214,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from \"react\";\nimport type { TaskStatus } from \"../../types/database\";\nimport { useTasksQuery, useTaskMutations } from \"../../hooks/api\";\nimport { useNotificationActions } from \"../../stores\";\nimport {\n  FaTasks,\n  FaPlus,\n  FaCheckCircle,\n  FaTimesCircle,\n} from \"../../utils/iconImport\";\n\n// Task Management for Keyholder\ninterface TaskManagementProps {\n  userId: string; // Changed to accept userId instead of tasks array\n}\n\nexport const TaskManagement: React.FC<TaskManagementProps> = ({ userId }) => {\n  const [newTaskText, setNewTaskText] = useState(\"\");\n  const [showAddTask, setShowAddTask] = useState(false);\n\n  // Use TanStack Query hooks instead of direct service calls\n  const { data: tasks = [], isLoading, error } = useTasksQuery(userId);\n  const { updateTaskStatus, createTask } = useTaskMutations();\n  const { showSuccess, showError } = useNotificationActions();\n\n  const pendingTasks = tasks.filter((t) =>\n    [\"pending\", \"submitted\"].includes(t.status),\n  );\n\n  const handleTaskAction = async (\n    taskId: string,\n    action: \"approve\" | \"reject\",\n    feedback?: string,\n  ) => {\n    try {\n      const newStatus: TaskStatus =\n        action === \"approve\" ? \"approved\" : \"rejected\";\n\n      await updateTaskStatus.mutateAsync({\n        taskId,\n        userId,\n        status: newStatus,\n        feedback,\n      });\n\n      showSuccess(\n        `Task ${action === \"approve\" ? \"approved\" : \"rejected\"} successfully`,\n        \"Task Updated\",\n      );\n    } catch {\n      showError(\n        `Failed to ${action} task. Please try again.`,\n        \"Task Update Failed\",\n      );\n    }\n  };\n\n  const handleAddTask = async () => {\n    if (!newTaskText.trim()) return;\n\n    try {\n      await createTask.mutateAsync({\n        userId,\n        title: newTaskText.trim(),\n        description: \"\",\n      });\n\n      setNewTaskText(\"\");\n      setShowAddTask(false);\n      showSuccess(\"Task created successfully\", \"Task Added\");\n    } catch {\n      showError(\n        \"Failed to create task. Please try again.\",\n        \"Task Creation Failed\",\n      );\n    }\n  };\n\n  if (error) {\n    return (\n      <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\">\n        Failed to load tasks. Please refresh the page.\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <FaTasks className=\"text-nightly-lavender-floral\" />\n          <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n            Task Management\n          </h3>\n        </div>\n        <button\n          onClick={() => setShowAddTask(!showAddTask)}\n          className=\"bg-nightly-lavender-floral hover:bg-nightly-lavender-floral/80 text-white px-3 py-1 rounded text-sm flex items-center gap-2\"\n        >\n          <FaPlus />\n          Add Task\n        </button>\n      </div>\n\n      {showAddTask && (\n        <div className=\"mb-6 bg-white/5 rounded-lg p-4\">\n          <h4 className=\"font-medium text-nightly-honeydew mb-3\">\n            Create New Task\n          </h4>\n          <div className=\"space-y-3\">\n            <textarea\n              value={newTaskText}\n              onChange={(e) => setNewTaskText(e.target.value)}\n              placeholder=\"Task description...\"\n              className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew placeholder-nightly-celadon/50 resize-none\"\n              rows={3}\n            />\n            <div className=\"flex gap-2\">\n              <button\n                onClick={handleAddTask}\n                disabled={!newTaskText.trim() || createTask.isPending}\n                className=\"bg-nightly-aquamarine hover:bg-nightly-aquamarine/80 disabled:opacity-50 text-black px-4 py-2 rounded font-medium transition-colors\"\n              >\n                {createTask.isPending ? \"Creating...\" : \"Create Task\"}\n              </button>\n              <button\n                onClick={() => setShowAddTask(false)}\n                className=\"bg-white/10 hover:bg-white/20 text-nightly-celadon px-4 py-2 rounded font-medium transition-colors\"\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Loading state */}\n      {isLoading && (\n        <div className=\"text-center text-nightly-celadon py-4\">\n          Loading tasks...\n        </div>\n      )}\n\n      {/* Tasks list */}\n      <div className=\"space-y-3\">\n        {!isLoading && pendingTasks.length === 0 ? (\n          <p className=\"text-nightly-celadon\">No pending tasks</p>\n        ) : (\n          pendingTasks.map((task) => (\n            <div key={task.id} className=\"bg-white/5 rounded-lg p-4\">\n              <div className=\"mb-3\">\n                <h4 className=\"font-medium text-nightly-honeydew mb-1\">\n                  {task.title}\n                </h4>\n                <div className=\"flex items-center gap-2 text-sm text-nightly-celadon\">\n                  <span>Status: {task.status}</span>\n                  {task.priority && (\n                    <>\n                      <span>•</span>\n                      <span>Priority: {task.priority}</span>\n                    </>\n                  )}\n                  {task.deadline && (\n                    <>\n                      <span>•</span>\n                      <span>Due: {task.deadline.toLocaleDateString()}</span>\n                    </>\n                  )}\n                </div>\n                {task.description && (\n                  <p className=\"text-sm text-nightly-celadon mt-1\">\n                    {task.description}\n                  </p>\n                )}\n              </div>\n\n              {task.submissiveNote && (\n                <div className=\"bg-white/5 rounded p-2 mb-3\">\n                  <div className=\"text-xs text-nightly-celadon mb-1\">\n                    Submissive Note:\n                  </div>\n                  <div className=\"text-sm text-nightly-honeydew\">\n                    {task.submissiveNote}\n                  </div>\n                </div>\n              )}\n\n              {task.status === \"submitted\" && (\n                <div className=\"flex gap-2\">\n                  <button\n                    onClick={() => handleTaskAction(task.id, \"approve\")}\n                    disabled={updateTaskStatus.isPending}\n                    className=\"bg-green-500 hover:bg-green-600 disabled:opacity-50 text-white px-3 py-1 rounded text-sm flex items-center gap-1\"\n                  >\n                    <FaCheckCircle />\n                    {updateTaskStatus.isPending ? \"Processing...\" : \"Approve\"}\n                  </button>\n                  <button\n                    onClick={() => handleTaskAction(task.id, \"reject\")}\n                    disabled={updateTaskStatus.isPending}\n                    className=\"bg-red-500 hover:bg-red-600 disabled:opacity-50 text-white px-3 py-1 rounded text-sm flex items-center gap-1\"\n                  >\n                    <FaTimesCircle />\n                    {updateTaskStatus.isPending ? \"Processing...\" : \"Reject\"}\n                  </button>\n                </div>\n              )}\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/keyholder/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/layout/AchievementNotifications.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/layout/AppLayout.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (83). Maximum allowed is 75.",
        "line": 19,
        "column": 45,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 119,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'setPageTitle'. Either include it or remove the dependency array. Outer scope values like 'navItems' aren't valid dependencies because mutating them doesn't re-render the component.",
        "line": 68,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 68,
        "endColumn": 35,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [location.pathname, setPageTitle]",
            "fix": {
              "range": [2205, 2234],
              "text": "[location.pathname, setPageTitle]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'closeMobileMenu'. Either include it or remove the dependency array.",
        "line": 74,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 74,
        "endColumn": 25,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [closeMobileMenu, location.pathname]",
            "fix": {
              "range": [2447, 2466],
              "text": "[closeMobileMenu, location.pathname]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useNavigationStore } from \"@/stores\";\nimport { ToastContainer } from \"react-toastify\";\nimport { useAuthState } from \"../../contexts\";\nimport { useAchievements } from \"../../hooks/useAchievements\";\nimport { BottomNavigation } from \"../mobile\";\nimport { useViewport } from \"../../hooks/mobile\";\nimport { Header } from \"./Header\";\nimport { MobileMenu } from \"./MobileMenu\";\nimport { AchievementNotifications } from \"./AchievementNotifications\";\nimport { navItems, mobileNavItemsConfig } from \"./NavigationData\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\ninterface AppLayoutProps {\n  children: React.ReactNode;\n}\n\nconst AppLayout: React.FC<AppLayoutProps> = ({ children }) => {\n  const location = useLocation();\n  const { user } = useAuthState();\n  const { isMobile } = useViewport();\n\n  // Achievement notifications\n  const { unreadNotifications, allAchievements, markNotificationRead } =\n    useAchievements(user?.uid);\n\n  // Navigation store subscriptions\n  const isMobileMenuOpen = useNavigationStore(\n    (state) => state.isMobileMenuOpen,\n  );\n  const toggleMobileMenu = useNavigationStore(\n    (state) => state.toggleMobileMenu,\n  );\n  const closeMobileMenu = useNavigationStore((state) => state.closeMobileMenu);\n  const setPageTitle = useNavigationStore((state) => state.setPageTitle);\n\n  // Create mobile navigation items with React elements from configuration\n  const mobileNavItems = mobileNavItemsConfig.map((item) => ({\n    ...item,\n    icon: (\n      <svg\n        className=\"w-5 h-5\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={2}\n          d={item.iconPath}\n        />\n      </svg>\n    ),\n  }));\n\n  // Update page title based on current route\n  useEffect(() => {\n    const currentItem = navItems.find(\n      (item) => item.path === location.pathname,\n    );\n    const title = currentItem\n      ? `${currentItem.label} - ChastityOS`\n      : \"ChastityOS\";\n    setPageTitle(title);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.pathname, navItems]); // setPageTitle omitted - Zustand store actions are stable\n\n  // Close mobile menu when route changes\n  useEffect(() => {\n    closeMobileMenu();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.pathname]); // closeMobileMenu omitted - Zustand store actions are stable\n\n  return (\n    <div className=\"bg-dark_purple min-h-screen text-white font-inter\">\n      <Header\n        navItems={navItems}\n        isMobileMenuOpen={isMobileMenuOpen}\n        toggleMobileMenu={toggleMobileMenu}\n      />\n\n      <MobileMenu\n        navItems={navItems}\n        isOpen={isMobileMenuOpen}\n        onClose={closeMobileMenu}\n      />\n\n      <main className=\"flex-1 relative\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {children}\n        </div>\n      </main>\n\n      {isMobile && <BottomNavigation items={mobileNavItems} />}\n\n      <AchievementNotifications\n        unreadNotifications={unreadNotifications}\n        allAchievements={allAchievements}\n        markNotificationRead={markNotificationRead}\n      />\n\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={5000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick={false}\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n        theme=\"dark\"\n        toastClassName=\"achievement-toast\"\n      />\n    </div>\n  );\n};\n\nexport default AppLayout;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/layout/Header.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/layout/MobileMenu.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/layout/NavigationData.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/log_event/EventList.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (78). Maximum allowed is 75.",
        "line": 48,
        "column": 52,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 131,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from \"react\";\nimport type { DBEvent, EventType } from \"../../types/database\";\nimport {\n  FaCalendar,\n  FaHeart,\n  FaFire,\n  FaGamepad,\n  FaTint,\n} from \"../../utils/iconImport\";\n\n// Event type definitions with modern icons\nconst EVENT_TYPES = [\n  {\n    value: \"orgasm\" as EventType,\n    label: \"Orgasm\",\n    icon: FaHeart,\n    color: \"text-red-400\",\n    description: \"Self or partner induced orgasm\",\n  },\n  {\n    value: \"sexual_activity\" as EventType,\n    label: \"Sexual Activity\",\n    icon: FaFire,\n    color: \"text-orange-400\",\n    description: \"Sexual play or activity\",\n  },\n  {\n    value: \"milestone\" as EventType,\n    label: \"Milestone\",\n    icon: FaGamepad,\n    color: \"text-nightly-aquamarine\",\n    description: \"Achievement or milestone reached\",\n  },\n  {\n    value: \"note\" as EventType,\n    label: \"Note\",\n    icon: FaTint,\n    color: \"text-nightly-lavender-floral\",\n    description: \"General note or observation\",\n  },\n];\n\n// Event List Component\ninterface EventListProps {\n  events: DBEvent[];\n}\n\nexport const EventList: React.FC<EventListProps> = ({ events }) => {\n  const getEventTypeInfo = (type: EventType) => {\n    return EVENT_TYPES.find((et) => et.value === type) || EVENT_TYPES[3]!; // Default to note\n  };\n\n  const formatDate = (date: Date) => {\n    return date.toLocaleDateString() + \" \" + date.toLocaleTimeString();\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {events.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <FaCalendar className=\"text-4xl text-nightly-celadon/50 mb-4 mx-auto\" />\n          <div className=\"text-nightly-celadon\">No events logged yet</div>\n          <div className=\"text-sm text-nightly-celadon/70\">\n            Log your first event above\n          </div>\n        </div>\n      ) : (\n        events.map((event) => {\n          const eventTypeInfo = getEventTypeInfo(event.type);\n          const Icon = eventTypeInfo.icon;\n\n          return (\n            <div\n              key={event.id}\n              className=\"bg-white/10 backdrop-blur-sm rounded-lg p-4\"\n            >\n              {/* Header */}\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex items-center gap-3\">\n                  <Icon className={eventTypeInfo.color} />\n                  <div>\n                    <h3 className=\"font-medium text-nighty-honeydew\">\n                      {eventTypeInfo.label}\n                    </h3>\n                    <div className=\"text-xs text-nightly-celadon\">\n                      {formatDate(event.timestamp)}\n                    </div>\n                  </div>\n                </div>\n                {event.isPrivate && (\n                  <span className=\"bg-nightly-lavender-floral/20 text-nightly-lavender-floral px-2 py-1 text-xs rounded\">\n                    Private\n                  </span>\n                )}\n              </div>\n\n              {/* Content */}\n              {event.details.notes && (\n                <p className=\"text-nighty-honeydew mb-3\">\n                  {event.details.notes}\n                </p>\n              )}\n\n              {/* Details */}\n              <div className=\"flex gap-4 text-xs text-nightly-celadon\">\n                {event.details.mood && <span>Mood: {event.details.mood}</span>}\n                {event.details.intensity && (\n                  <span>Intensity: {event.details.intensity}/10</span>\n                )}\n              </div>\n\n              {/* Tags */}\n              {event.details.tags && event.details.tags.length > 0 && (\n                <div className=\"flex gap-2 mt-3\">\n                  {event.details.tags.map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"bg-nightly-aquamarine/20 text-nightly-aquamarine px-2 py-1 text-xs rounded\"\n                    >\n                      {tag}\n                    </span>\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n        })\n      )}\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/log_event/LogEventForm.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (230). Maximum allowed is 75.",
        "line": 52,
        "column": 58,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 298,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from \"react\";\nimport { useAuthState } from \"../../contexts\";\nimport { useEventMutations } from \"../../hooks/api\";\nimport { useNotificationActions } from \"../../stores\";\nimport type { EventType } from \"../../types/database\";\nimport {\n  FaPlus,\n  FaHeart,\n  FaFire,\n  FaGamepad,\n  FaTint,\n  FaSpinner,\n} from \"../../utils/iconImport\";\n\n// Event type definitions with modern icons\nconst EVENT_TYPES = [\n  {\n    value: \"orgasm\" as EventType,\n    label: \"Orgasm\",\n    icon: FaHeart,\n    color: \"text-red-400\",\n    description: \"Self or partner induced orgasm\",\n  },\n  {\n    value: \"sexual_activity\" as EventType,\n    label: \"Sexual Activity\",\n    icon: FaFire,\n    color: \"text-orange-400\",\n    description: \"Sexual play or activity\",\n  },\n  {\n    value: \"milestone\" as EventType,\n    label: \"Milestone\",\n    icon: FaGamepad,\n    color: \"text-nightly-aquamarine\",\n    description: \"Achievement or milestone reached\",\n  },\n  {\n    value: \"note\" as EventType,\n    label: \"Note\",\n    icon: FaTint,\n    color: \"text-nightly-lavender-floral\",\n    description: \"General note or observation\",\n  },\n];\n\n// Event Form Component\ninterface LogEventFormProps {\n  onEventLogged?: () => void; // Simplified callback since TanStack Query handles data updates\n}\n\nexport const LogEventForm: React.FC<LogEventFormProps> = ({\n  onEventLogged,\n}) => {\n  const { user } = useAuthState();\n  const { createEvent } = useEventMutations();\n  const { showSuccess, showError } = useNotificationActions();\n  const [formData, setFormData] = useState({\n    type: \"note\" as EventType,\n    notes: \"\",\n    timestamp: new Date().toISOString().slice(0, 16), // Format for datetime-local input\n    mood: \"\",\n    intensity: 5,\n    tags: \"\",\n    isPrivate: false,\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!user) return;\n\n    try {\n      await createEvent.mutateAsync({\n        userId: user.uid,\n        type: formData.type,\n        timestamp: new Date(formData.timestamp),\n        notes: formData.notes,\n        isPrivate: formData.isPrivate,\n        metadata: {\n          mood: formData.mood,\n          intensity: formData.intensity,\n          tags: formData.tags\n            .split(\",\")\n            .map((tag) => tag.trim())\n            .filter((tag) => tag),\n        },\n      });\n\n      // Show success notification\n      showSuccess(\"Event logged successfully\", \"Event Added\");\n\n      // Call optional callback\n      onEventLogged?.();\n\n      // Reset form on success\n      setFormData({\n        type: \"note\" as EventType,\n        notes: \"\",\n        timestamp: new Date().toISOString().slice(0, 16),\n        mood: \"\",\n        intensity: 5,\n        tags: \"\",\n        isPrivate: false,\n      });\n    } catch {\n      showError(\"Failed to log event. Please try again.\", \"Event Log Failed\");\n    }\n  };\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6 mb-6\">\n      <div className=\"flex items-center gap-3 mb-6\">\n        <FaPlus className=\"text-nightly-aquamarine\" />\n        <h2 className=\"text-xl font-semibold text-nighty-honeydew\">\n          Log New Event\n        </h2>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        {/* Event Type Selection */}\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-3\">\n            Event Type\n          </label>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n            {EVENT_TYPES.map((eventType) => {\n              const Icon = eventType.icon;\n              return (\n                <button\n                  key={eventType.value}\n                  type=\"button\"\n                  onClick={() =>\n                    setFormData((prev) => ({ ...prev, type: eventType.value }))\n                  }\n                  className={`p-3 rounded-lg border-2 transition-all ${\n                    formData.type === eventType.value\n                      ? \"border-nightly-aquamarine bg-nightly-aquamarine/10\"\n                      : \"border-white/10 bg-white/5 hover:bg-white/10\"\n                  }`}\n                >\n                  <Icon\n                    className={`text-lg mb-2 mx-auto ${\n                      formData.type === eventType.value\n                        ? \"text-nightly-aquamarine\"\n                        : eventType.color\n                    }`}\n                  />\n                  <div\n                    className={`text-sm font-medium ${\n                      formData.type === eventType.value\n                        ? \"text-nighty-honeydew\"\n                        : \"text-nightly-celadon\"\n                    }`}\n                  >\n                    {eventType.label}\n                  </div>\n                </button>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Timestamp */}\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Date & Time\n          </label>\n          <input\n            type=\"datetime-local\"\n            value={formData.timestamp}\n            onChange={(e) =>\n              setFormData((prev) => ({ ...prev, timestamp: e.target.value }))\n            }\n            className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nighty-honeydew\"\n          />\n        </div>\n\n        {/* Notes */}\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Notes\n          </label>\n          <textarea\n            value={formData.notes}\n            onChange={(e) =>\n              setFormData((prev) => ({ ...prev, notes: e.target.value }))\n            }\n            placeholder=\"Describe the event...\"\n            className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nighty-honeydew placeholder-nightly-celadon/50 resize-none\"\n            rows={4}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {/* Mood */}\n          <div>\n            <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n              Mood\n            </label>\n            <input\n              type=\"text\"\n              value={formData.mood}\n              onChange={(e) =>\n                setFormData((prev) => ({ ...prev, mood: e.target.value }))\n              }\n              placeholder=\"Happy, frustrated, excited...\"\n              className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nighty-honeydew placeholder-nightly-celadon/50\"\n            />\n          </div>\n\n          {/* Intensity */}\n          <div>\n            <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n              Intensity (1-10)\n            </label>\n            <input\n              type=\"range\"\n              min=\"1\"\n              max=\"10\"\n              value={formData.intensity}\n              onChange={(e) =>\n                setFormData((prev) => ({\n                  ...prev,\n                  intensity: parseInt(e.target.value),\n                }))\n              }\n              className=\"w-full mb-2\"\n            />\n            <div className=\"text-center text-nighty-honeydew\">\n              {formData.intensity}\n            </div>\n          </div>\n        </div>\n\n        {/* Tags */}\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Tags (comma separated)\n          </label>\n          <input\n            type=\"text\"\n            value={formData.tags}\n            onChange={(e) =>\n              setFormData((prev) => ({ ...prev, tags: e.target.value }))\n            }\n            placeholder=\"romantic, intense, relaxed...\"\n            className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nighty-honeydew placeholder-nightly-celadon/50\"\n          />\n        </div>\n\n        {/* Privacy */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-sm font-medium text-nightly-celadon\">\n              Private Event\n            </div>\n            <div className=\"text-xs text-nightly-celadon/70\">\n              Keep this event private\n            </div>\n          </div>\n          <label className=\"relative inline-flex items-center cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              checked={formData.isPrivate}\n              onChange={(e) =>\n                setFormData((prev) => ({\n                  ...prev,\n                  isPrivate: e.target.checked,\n                }))\n              }\n              className=\"sr-only peer\"\n            />\n            <div className=\"w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-nightly-lavender-floral\"></div>\n          </label>\n        </div>\n\n        {/* Submit Button */}\n        <button\n          type=\"submit\"\n          disabled={createEvent.isPending}\n          className=\"w-full bg-nightly-aquamarine hover:bg-nightly-aquamarine/80 disabled:opacity-50 text-black px-6 py-3 rounded font-medium transition-colors flex items-center justify-center gap-2\"\n        >\n          {createEvent.isPending ? (\n            <>\n              <FaSpinner className=\"animate-spin\" />\n              Logging Event...\n            </>\n          ) : (\n            <>\n              <FaPlus />\n              Log Event\n            </>\n          )}\n        </button>\n      </form>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/log_event/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/mobile/BottomNavigation.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (100). Maximum allowed is 75.",
        "line": 22,
        "column": 66,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 129,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Bottom Navigation Component\n * Mobile-first navigation bar that appears at the bottom of the screen\n */\nimport React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useViewport } from \"../../hooks/mobile/useViewport\";\nimport { useHapticFeedback } from \"../../hooks/mobile/useHapticFeedback\";\n\ninterface NavItem {\n  path: string;\n  label: string;\n  icon: React.ReactNode;\n  badge?: number;\n}\n\ninterface BottomNavigationProps {\n  items: NavItem[];\n  className?: string;\n}\n\nexport const BottomNavigation: React.FC<BottomNavigationProps> = ({\n  items,\n  className = \"\",\n}) => {\n  const location = useLocation();\n  const { isMobile, safeAreaInsets } = useViewport();\n  const { light } = useHapticFeedback();\n\n  if (!isMobile) return null;\n\n  const handleNavClick = () => {\n    light();\n  };\n\n  return (\n    <nav\n      className={`\n        fixed bottom-0 left-0 right-0 z-40\n        bg-dark_purple/95 \n        backdrop-blur-lg\n        border-t border-tekhelet/20\n        safe-area-inset-bottom\n        ${className}\n      `}\n      style={{\n        paddingBottom: safeAreaInsets.bottom,\n      }}\n    >\n      <div className=\"flex justify-around items-center px-2 py-2\">\n        {items.map((item) => {\n          const isActive = location.pathname === item.path;\n\n          return (\n            <Link\n              key={item.path}\n              to={item.path}\n              onClick={handleNavClick}\n              className={`\n                touch-target\n                relative\n                flex flex-col items-center justify-center\n                px-3 py-2\n                rounded-lg\n                transition-all duration-200 ease-in-out\n                min-h-[48px] min-w-[48px]\n                ${\n                  isActive\n                    ? \"text-white bg-tekhelet shadow-lg transform scale-105\"\n                    : \"text-lavender_web hover:text-white hover:bg-tekhelet/20\"\n                }\n              `}\n            >\n              {/* Icon */}\n              <div\n                className={`\n                transition-transform duration-200\n                ${isActive ? \"scale-110\" : \"scale-100\"}\n              `}\n              >\n                {item.icon}\n              </div>\n\n              {/* Label */}\n              <span\n                className={`\n                text-xs font-medium mt-1 leading-none\n                transition-all duration-200\n                ${isActive ? \"text-white\" : \"text-lavender_web\"}\n              `}\n              >\n                {item.label}\n              </span>\n\n              {/* Badge */}\n              {item.badge && item.badge > 0 && (\n                <div\n                  className=\"\n                  absolute -top-1 -right-1\n                  bg-red-500 text-white text-xs\n                  rounded-full h-5 w-5\n                  flex items-center justify-center\n                  animate-pulse\n                \"\n                >\n                  {item.badge > 99 ? \"99+\" : item.badge}\n                </div>\n              )}\n\n              {/* Active indicator */}\n              {isActive && (\n                <div\n                  className=\"\n                  absolute -top-1 left-1/2 transform -translate-x-1/2\n                  w-1 h-1 bg-white rounded-full\n                  animate-pulse\n                \"\n                />\n              )}\n            </Link>\n          );\n        })}\n      </div>\n\n      {/* Visual separator line at top */}\n      <div className=\"absolute top-0 left-4 right-4 h-px bg-gradient-to-r from-transparent via-tekhelet/30 to-transparent\" />\n    </nav>\n  );\n};\n\nexport default BottomNavigation;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/mobile/BottomSheet.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (116). Maximum allowed is 75.",
        "line": 21,
        "column": 56,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 150,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Bottom Sheet Component\n * Mobile-optimized modal that slides up from the bottom\n */\nimport React, { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { useViewport } from \"../../hooks/mobile/useViewport\";\nimport { useHapticFeedback } from \"../../hooks/mobile/useHapticFeedback\";\nimport { useTouchGestures } from \"../../hooks/mobile/useTouchGestures\";\n\ninterface BottomSheetProps {\n  isOpen: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n  title?: string;\n  maxHeight?: string;\n  preventClose?: boolean;\n  className?: string;\n}\n\nexport const BottomSheet: React.FC<BottomSheetProps> = ({\n  isOpen,\n  onClose,\n  children,\n  title,\n  maxHeight = \"80vh\",\n  preventClose = false,\n  className = \"\",\n}) => {\n  const { isMobile, safeAreaInsets } = useViewport();\n  const { light } = useHapticFeedback();\n\n  // Handle swipe down to close\n  const { onTouchStart, onTouchMove, onTouchEnd } = useTouchGestures(\n    {\n      onSwipeDown: () => {\n        if (!preventClose) {\n          light();\n          onClose();\n        }\n      },\n    },\n    {\n      threshold: 50,\n      minDistance: 100,\n    },\n  );\n\n  // Handle escape key\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\" && !preventClose) {\n        onClose();\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleEscape);\n    return () => document.removeEventListener(\"keydown\", handleEscape);\n  }, [isOpen, onClose, preventClose]);\n\n  // Prevent body scroll when open\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      document.body.style.overflow = \"hidden\";\n      return () => {\n        document.body.style.overflow = \"\";\n      };\n    }\n    return undefined;\n  }, [isOpen, isMobile]);\n\n  if (!isOpen) return null;\n\n  const bottomSheetContent = (\n    <div className=\"fixed inset-0 z-50 flex items-end justify-center\">\n      {/* Backdrop */}\n      <div\n        className=\"absolute inset-0 bg-black/50 backdrop-blur-sm transition-opacity duration-300\"\n        onClick={!preventClose ? onClose : undefined}\n        style={{\n          paddingBottom: safeAreaInsets.bottom,\n        }}\n      />\n\n      {/* Bottom Sheet */}\n      <div\n        className={`\n          relative w-full bg-white dark:bg-gray-900 \n          rounded-t-3xl shadow-xl transform transition-transform duration-300 ease-out\n          ${isOpen ? \"translate-y-0\" : \"translate-y-full\"}\n          ${className}\n        `}\n        style={{\n          maxHeight,\n          paddingBottom: safeAreaInsets.bottom,\n        }}\n        onTouchStart={onTouchStart}\n        onTouchMove={onTouchMove}\n        onTouchEnd={onTouchEnd}\n      >\n        {/* Handle */}\n        <div className=\"flex justify-center pt-4 pb-2\">\n          <div className=\"w-12 h-1 bg-gray-300 dark:bg-gray-600 rounded-full\" />\n        </div>\n\n        {/* Header */}\n        {title && (\n          <div className=\"flex items-center justify-between px-6 pb-4\">\n            <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n              {title}\n            </h2>\n            {!preventClose && (\n              <button\n                onClick={onClose}\n                className=\"touch-target p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n                aria-label=\"Close\"\n              >\n                <svg\n                  className=\"w-5 h-5 text-gray-500\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M6 18L18 6M6 6l12 12\"\n                  />\n                </svg>\n              </button>\n            )}\n          </div>\n        )}\n\n        {/* Content */}\n        <div\n          className=\"overflow-auto\"\n          style={{ maxHeight: \"calc(80vh - 120px)\" }}\n        >\n          <div className=\"px-6 pb-6\">{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return createPortal(bottomSheetContent, document.body);\n};\n\nexport default BottomSheet;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/mobile/MobileButton.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (123). Maximum allowed is 75.",
        "line": 20,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 154,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Mobile Button Component\n * Touch-optimized button with haptic feedback\n */\nimport React, { forwardRef } from \"react\";\nimport { useHapticFeedback } from \"../../hooks/mobile/useHapticFeedback\";\n\ninterface MobileButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: \"primary\" | \"secondary\" | \"outline\" | \"ghost\" | \"danger\";\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n  fullWidth?: boolean;\n  loading?: boolean;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  hapticFeedback?: \"light\" | \"medium\" | \"heavy\" | \"none\";\n}\n\nexport const MobileButton = forwardRef<HTMLButtonElement, MobileButtonProps>(\n  (\n    {\n      variant = \"primary\",\n      size = \"md\",\n      fullWidth = false,\n      loading = false,\n      leftIcon,\n      rightIcon,\n      hapticFeedback = \"light\",\n      children,\n      className = \"\",\n      onClick,\n      disabled,\n      ...props\n    },\n    ref,\n  ) => {\n    const { light, medium, heavy } = useHapticFeedback();\n\n    const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (disabled || loading) return;\n\n      // Trigger haptic feedback\n      if (hapticFeedback !== \"none\") {\n        switch (hapticFeedback) {\n          case \"light\":\n            light();\n            break;\n          case \"medium\":\n            medium();\n            break;\n          case \"heavy\":\n            heavy();\n            break;\n        }\n      }\n\n      onClick?.(e);\n    };\n\n    const sizeClasses = {\n      sm: \"h-10 px-4 text-sm font-medium\",\n      md: \"h-12 px-6 text-base font-semibold\",\n      lg: \"h-14 px-8 text-lg font-semibold\",\n      xl: \"h-16 px-10 text-xl font-bold\",\n    };\n\n    const variantClasses = {\n      primary: `\n      bg-tekhelet hover:bg-tekhelet-600 active:bg-tekhelet-700\n      text-white border-2 border-tekhelet\n      shadow-lg hover:shadow-xl active:shadow-md\n    `,\n      secondary: `\n      bg-lavender_web hover:bg-lavender_web-600 active:bg-lavender_web-700\n      text-dark_purple border-2 border-lavender_web\n      shadow-lg hover:shadow-xl active:shadow-md\n    `,\n      outline: `\n      bg-transparent hover:bg-tekhelet/10 active:bg-tekhelet/20\n      text-tekhelet border-2 border-tekhelet\n      hover:text-white hover:bg-tekhelet\n    `,\n      ghost: `\n      bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800 active:bg-gray-200 dark:active:bg-gray-700\n      text-gray-700 dark:text-gray-300 border-2 border-transparent\n    `,\n      danger: `\n      bg-red-500 hover:bg-red-600 active:bg-red-700\n      text-white border-2 border-red-500\n      shadow-lg hover:shadow-xl active:shadow-md\n    `,\n    };\n\n    const baseClasses = `\n    relative\n    inline-flex\n    items-center\n    justify-center\n    min-h-[44px]\n    rounded-xl\n    font-medium\n    transition-all\n    duration-200\n    ease-in-out\n    focus:outline-none\n    focus-visible:ring-2\n    focus-visible:ring-purple-500\n    focus-visible:ring-offset-2\n    focus-visible:ring-offset-white\n    dark:focus-visible:ring-offset-gray-900\n    transform\n    active:scale-98\n    disabled:opacity-50\n    disabled:cursor-not-allowed\n    disabled:transform-none\n    ${fullWidth ? \"w-full\" : \"\"}\n    ${sizeClasses[size]}\n    ${variantClasses[variant]}\n    ${className}\n  `;\n\n    return (\n      <button\n        ref={ref}\n        className={baseClasses}\n        onClick={handleClick}\n        disabled={disabled || loading}\n        {...props}\n      >\n        {/* Loading Spinner */}\n        {loading && (\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"w-5 h-5 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n          </div>\n        )}\n\n        {/* Content */}\n        <div\n          className={`flex items-center space-x-2 ${loading ? \"opacity-0\" : \"opacity-100\"}`}\n        >\n          {leftIcon && <span className=\"flex-shrink-0\">{leftIcon}</span>}\n\n          {children && <span className=\"truncate\">{children}</span>}\n\n          {rightIcon && <span className=\"flex-shrink-0\">{rightIcon}</span>}\n        </div>\n\n        {/* Ripple effect overlay */}\n        <div className=\"absolute inset-0 rounded-xl overflow-hidden\">\n          <div className=\"absolute inset-0 bg-white/20 transform scale-0 group-active:scale-100 transition-transform duration-150 ease-out\" />\n        </div>\n      </button>\n    );\n  },\n);\n\nMobileButton.displayName = \"MobileButton\";\n\nexport default MobileButton;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/mobile/MobileCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/mobile/MobileInput.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (104). Maximum allowed is 75.",
        "line": 67,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 183,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Mobile Input Component\n * Touch-optimized form input with mobile-specific enhancements\n */\nimport React, { forwardRef } from \"react\";\n\ninterface MobileInputProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, \"size\"> {\n  label?: string;\n  error?: string;\n  helpText?: string;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  size?: \"sm\" | \"md\" | \"lg\";\n  variant?: \"default\" | \"filled\" | \"borderless\";\n}\n\n// Helper function to get input mode based on type\nconst getInputMode = (\n  type: string,\n): React.HTMLAttributes<HTMLInputElement>[\"inputMode\"] => {\n  switch (type) {\n    case \"email\":\n      return \"email\";\n    case \"tel\":\n      return \"tel\";\n    case \"number\":\n      return \"numeric\";\n    case \"url\":\n      return \"url\";\n    default:\n      return \"text\";\n  }\n};\n\n// Helper function to get autocomplete value\nconst getAutoComplete = (\n  type: string,\n  existingAutoComplete?: string,\n): string => {\n  if (existingAutoComplete) return existingAutoComplete;\n\n  switch (type) {\n    case \"email\":\n      return \"email\";\n    case \"tel\":\n      return \"tel\";\n    case \"password\":\n      return \"current-password\";\n    default:\n      return \"off\";\n  }\n};\n\n// Helper function to get border and focus styles\nconst getBorderStyles = (error?: string): string => {\n  if (error) return \"border-red-500 focus:border-red-500\";\n  return \"focus:border-purple-500\";\n};\n\n// Helper function to get border radius\nconst getBorderRadius = (variant: string): string => {\n  return variant !== \"borderless\" ? \"rounded-lg\" : \"\";\n};\n\nexport const MobileInput = forwardRef<HTMLInputElement, MobileInputProps>(\n  (\n    {\n      label,\n      error,\n      helpText,\n      leftIcon,\n      rightIcon,\n      size = \"md\",\n      variant = \"default\",\n      className = \"\",\n      type = \"text\",\n      ...props\n    },\n    ref,\n  ) => {\n    const sizeClasses = {\n      sm: \"h-10 px-3 text-sm\",\n      md: \"h-12 px-4 text-base\",\n      lg: \"h-14 px-5 text-lg\",\n    };\n\n    const variantClasses = {\n      default:\n        \"border-2 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800\",\n      filled: \"border-0 bg-gray-100 dark:bg-gray-700\",\n      borderless:\n        \"border-0 bg-transparent border-b-2 border-gray-300 dark:border-gray-600 rounded-none\",\n    };\n\n    const inputClasses = `\n    w-full\n    ${sizeClasses[size]}\n    ${variantClasses[variant]}\n    ${leftIcon ? \"pl-10\" : \"\"}\n    ${rightIcon ? \"pr-10\" : \"\"}\n    ${getBorderStyles(error)}\n    ${getBorderRadius(variant)}\n    font-medium\n    text-gray-900 dark:text-white\n    placeholder-gray-500 dark:placeholder-gray-400\n    transition-all duration-200 ease-in-out\n    focus:outline-none focus:ring-2 focus:ring-purple-500/20\n    disabled:opacity-50 disabled:cursor-not-allowed\n    ${className}\n  `;\n\n    // Mobile-specific input attributes\n    const mobileInputProps = {\n      ...props,\n      // Prevent iOS zoom on focus\n      style: { fontSize: \"16px\", ...props.style },\n      // Set appropriate input modes for better mobile keyboards\n      inputMode: getInputMode(type),\n      // Optimize autocomplete\n      autoComplete: getAutoComplete(type, props.autoComplete),\n    };\n\n    return (\n      <div className=\"space-y-2\">\n        {/* Label */}\n        {label && (\n          <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n            {label}\n            {props.required && <span className=\"text-red-500 ml-1\">*</span>}\n          </label>\n        )}\n\n        {/* Input Container */}\n        <div className=\"relative\">\n          {/* Left Icon */}\n          {leftIcon && (\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n              <div className=\"text-gray-400\">{leftIcon}</div>\n            </div>\n          )}\n\n          {/* Input */}\n          <input\n            ref={ref}\n            type={type}\n            className={inputClasses}\n            {...mobileInputProps}\n          />\n\n          {/* Right Icon */}\n          {rightIcon && (\n            <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n              <div className=\"text-gray-400\">{rightIcon}</div>\n            </div>\n          )}\n        </div>\n\n        {/* Help Text */}\n        {helpText && !error && (\n          <p className=\"text-sm text-gray-500 dark:text-gray-400\">{helpText}</p>\n        )}\n\n        {/* Error Message */}\n        {error && (\n          <p className=\"text-sm text-red-600 dark:text-red-400 flex items-center\">\n            <svg\n              className=\"w-4 h-4 mr-1\"\n              fill=\"currentColor\"\n              viewBox=\"0 0 20 20\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\"\n                clipRule=\"evenodd\"\n              />\n            </svg>\n            {error}\n          </p>\n        )}\n      </div>\n    );\n  },\n);\n\nMobileInput.displayName = \"MobileInput\";\n\nexport default MobileInput;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/mobile/PullToRefresh.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (87). Maximum allowed is 75.",
        "line": 45,
        "column": 60,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 136,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Pull to Refresh Component\n * Wraps content with pull-to-refresh functionality\n */\nimport React from \"react\";\nimport { usePullToRefresh } from \"../../hooks/mobile/usePullToRefresh\";\nimport { useViewport } from \"../../hooks/mobile/useViewport\";\n\ninterface PullToRefreshProps {\n  children: React.ReactNode;\n  onRefresh: () => Promise<void> | void;\n  disabled?: boolean;\n  threshold?: number;\n  maxPullDistance?: number;\n  className?: string;\n}\n\n// Helper function to calculate indicator transform\nconst getIndicatorTransform = (pullDistance: number): string => {\n  const translateY = Math.min(pullDistance - 40, 20);\n  return `translateX(-50%) translateY(${translateY}px)`;\n};\n\n// Helper function to get content transform\nconst getContentTransform = (\n  isPulling: boolean,\n  isRefreshing: boolean,\n  pullDistance: number,\n): string => {\n  if (isPulling && !isRefreshing) {\n    return `translateY(${pullDistance * 0.5}px)`;\n  }\n  return \"translateY(0)\";\n};\n\n// Helper function to determine if indicator should be shown\nconst shouldShowIndicator = (\n  isMobile: boolean,\n  isPulling: boolean,\n  isRefreshing: boolean,\n): boolean => {\n  return isMobile && (isPulling || isRefreshing);\n};\n\nexport const PullToRefresh: React.FC<PullToRefreshProps> = ({\n  children,\n  onRefresh,\n  disabled = false,\n  threshold = 80,\n  maxPullDistance = 120,\n  className = \"\",\n}) => {\n  const { isMobile } = useViewport();\n\n  const {\n    isRefreshing,\n    isPulling,\n    pullDistance,\n    pullPercentage,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n    onScroll,\n  } = usePullToRefresh({\n    onRefresh,\n    disabled: disabled || !isMobile,\n    threshold,\n    maxPullDistance,\n  });\n\n  const refreshIndicatorOpacity = Math.min(pullPercentage / 100, 1);\n  const refreshIndicatorScale = Math.min(0.5 + (pullPercentage / 100) * 0.5, 1);\n\n  return (\n    <div\n      className={`relative overflow-hidden ${className}`}\n      onTouchStart={onTouchStart}\n      onTouchMove={onTouchMove}\n      onTouchEnd={onTouchEnd}\n      onScroll={onScroll}\n    >\n      {/* Pull to refresh indicator */}\n      {shouldShowIndicator(isMobile, isPulling, isRefreshing) && (\n        <div\n          className=\"absolute top-0 left-1/2 transform -translate-x-1/2 z-10 transition-all duration-200 ease-out\"\n          style={{\n            transform: getIndicatorTransform(pullDistance),\n            opacity: isRefreshing ? 1 : refreshIndicatorOpacity,\n          }}\n        >\n          <div\n            className=\"flex items-center justify-center w-10 h-10 bg-white dark:bg-gray-800 rounded-full shadow-lg border border-gray-200 dark:border-gray-700\"\n            style={{\n              transform: `scale(${isRefreshing ? 1 : refreshIndicatorScale})`,\n            }}\n          >\n            {isRefreshing ? (\n              <div className=\"w-5 h-5 border-2 border-purple-500 border-t-transparent rounded-full animate-spin\" />\n            ) : (\n              <svg\n                className={`w-5 h-5 text-purple-500 transition-transform duration-200 ${\n                  pullPercentage >= 100 ? \"rotate-180\" : \"\"\n                }`}\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M19 14l-7 7m0 0l-7-7m7 7V3\"\n                />\n              </svg>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Content with transform during pull */}\n      <div\n        className=\"transition-transform duration-200 ease-out\"\n        style={{\n          transform: getContentTransform(isPulling, isRefreshing, pullDistance),\n        }}\n      >\n        {children}\n      </div>\n\n      {/* Loading overlay during refresh */}\n      {isRefreshing && (\n        <div className=\"absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-purple-500 to-pink-500 animate-pulse\" />\n      )}\n    </div>\n  );\n};\n\nexport default PullToRefresh;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/mobile/SwipeableCard.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (125). Maximum allowed is 75.",
        "line": 26,
        "column": 60,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 162,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Swipeable Card Component\n * Card that responds to swipe gestures for actions\n */\nimport React, { useState, useRef } from \"react\";\nimport { useTouchGestures } from \"../../hooks/mobile/useTouchGestures\";\nimport { useHapticFeedback } from \"../../hooks/mobile/useHapticFeedback\";\n\ninterface SwipeAction {\n  id: string;\n  label: string;\n  icon?: React.ReactNode;\n  color: \"red\" | \"green\" | \"blue\" | \"yellow\" | \"purple\";\n  action: () => void;\n}\n\ninterface SwipeableCardProps {\n  children: React.ReactNode;\n  className?: string;\n  leftActions?: SwipeAction[];\n  rightActions?: SwipeAction[];\n  onSwipeThreshold?: number;\n  disabled?: boolean;\n}\n\nexport const SwipeableCard: React.FC<SwipeableCardProps> = ({\n  children,\n  className = \"\",\n  leftActions = [],\n  rightActions = [],\n  onSwipeThreshold: _onSwipeThreshold = 0.3,\n  disabled = false,\n}) => {\n  const [translateX, setTranslateX] = useState(0);\n  const [isRevealed, setIsRevealed] = useState(false);\n  const [revealedSide, setRevealedSide] = useState<\"left\" | \"right\" | null>(\n    null,\n  );\n  const cardRef = useRef<HTMLDivElement>(null);\n  const _startX = useRef(0);\n  const { medium, success } = useHapticFeedback();\n\n  const maxSwipeDistance = 120; // Maximum pixels to swipe\n\n  const { onTouchStart, onTouchMove, onTouchEnd } = useTouchGestures(\n    {\n      onSwipeLeft: () => {\n        if (disabled || rightActions.length === 0) return;\n        handleSwipeReveal(\"right\");\n      },\n      onSwipeRight: () => {\n        if (disabled || leftActions.length === 0) return;\n        handleSwipeReveal(\"left\");\n      },\n    },\n    {\n      threshold: 20,\n      minDistance: 50,\n    },\n  );\n\n  const handleSwipeReveal = (side: \"left\" | \"right\") => {\n    if (isRevealed && revealedSide === side) {\n      // Close if already revealed on the same side\n      closeActions();\n    } else {\n      // Reveal actions\n      medium();\n      setIsRevealed(true);\n      setRevealedSide(side);\n      setTranslateX(side === \"left\" ? maxSwipeDistance : -maxSwipeDistance);\n    }\n  };\n\n  const closeActions = () => {\n    setIsRevealed(false);\n    setRevealedSide(null);\n    setTranslateX(0);\n  };\n\n  const handleActionClick = (action: SwipeAction) => {\n    success();\n    action.action();\n    closeActions();\n  };\n\n  const actionColorClasses = {\n    red: \"bg-red-500 hover:bg-red-600 text-white\",\n    green: \"bg-green-500 hover:bg-green-600 text-white\",\n    blue: \"bg-blue-500 hover:bg-blue-600 text-white\",\n    yellow: \"bg-yellow-500 hover:bg-yellow-600 text-black\",\n    purple: \"bg-purple-500 hover:bg-purple-600 text-white\",\n  };\n\n  const renderActions = (actions: SwipeAction[], side: \"left\" | \"right\") => (\n    <div\n      className={`\n      absolute inset-y-0 flex items-center\n      ${side === \"left\" ? \"left-0\" : \"right-0\"}\n    `}\n    >\n      {actions.map((action, index) => (\n        <button\n          key={action.id}\n          onClick={() => handleActionClick(action)}\n          className={`\n            touch-target\n            flex flex-col items-center justify-center\n            w-16 h-full\n            text-xs font-medium\n            transition-all duration-200\n            ${actionColorClasses[action.color]}\n            ${index === 0 && side === \"left\" ? \"rounded-l-lg\" : \"\"}\n            ${index === actions.length - 1 && side === \"right\" ? \"rounded-r-lg\" : \"\"}\n          `}\n          style={{\n            transform: `translateX(${side === \"left\" ? -100 + index * 16 : 100 - index * 16}px)`,\n          }}\n        >\n          {action.icon && <div className=\"mb-1\">{action.icon}</div>}\n          <span className=\"leading-tight\">{action.label}</span>\n        </button>\n      ))}\n    </div>\n  );\n\n  return (\n    <div className={`relative overflow-hidden ${className}`}>\n      {/* Background Actions */}\n      {leftActions.length > 0 && renderActions(leftActions, \"left\")}\n      {rightActions.length > 0 && renderActions(rightActions, \"right\")}\n\n      {/* Main Card Content */}\n      <div\n        ref={cardRef}\n        className={`\n          relative z-10\n          bg-white dark:bg-gray-800\n          transition-transform duration-300 ease-out\n          ${!disabled ? \"touch-target\" : \"\"}\n        `}\n        style={{\n          transform: `translateX(${translateX}px)`,\n        }}\n        onTouchStart={onTouchStart}\n        onTouchMove={onTouchMove}\n        onTouchEnd={onTouchEnd}\n        onClick={isRevealed ? closeActions : undefined}\n      >\n        {children}\n      </div>\n\n      {/* Overlay when actions are revealed */}\n      {isRevealed && (\n        <div\n          className=\"absolute inset-0 z-20 bg-transparent\"\n          onClick={closeActions}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default SwipeableCard;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/mobile/TouchTarget.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/triple-slash-reference",
        "severity": 2,
        "message": "Do not use a triple slash reference for react, use `import` style instead.",
        "line": 5,
        "column": 1,
        "nodeType": "Line",
        "messageId": "tripleSlashReference",
        "endLine": 5,
        "endColumn": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Touch Target Component\n * Ensures minimum touch target size for mobile accessibility\n */\n/// <reference types=\"react\" />\nimport React from \"react\";\nimport { useHapticFeedback } from \"../../hooks/mobile/useHapticFeedback\";\n\ninterface TouchTargetProps {\n  children: React.ReactNode;\n  onTap?: () => void;\n  onLongPress?: () => void;\n  className?: string;\n  disabled?: boolean;\n  hapticFeedback?: \"light\" | \"medium\" | \"heavy\" | \"none\";\n  as?: keyof React.JSX.IntrinsicElements;\n  [key: string]: unknown; // For additional props\n}\n\nexport const TouchTarget: React.FC<TouchTargetProps> = ({\n  children,\n  onTap,\n  onLongPress,\n  className = \"\",\n  disabled = false,\n  hapticFeedback = \"light\",\n  as: Component = \"button\" as keyof React.JSX.IntrinsicElements,\n  ...props\n}) => {\n  const { light, medium, heavy } = useHapticFeedback();\n\n  const handleClick = () => {\n    if (disabled) return;\n\n    // Trigger haptic feedback\n    if (hapticFeedback !== \"none\") {\n      switch (hapticFeedback) {\n        case \"light\":\n          light();\n          break;\n        case \"medium\":\n          medium();\n          break;\n        case \"heavy\":\n          heavy();\n          break;\n      }\n    }\n\n    onTap?.();\n  };\n\n  const handleContextMenu = (e: React.MouseEvent) => {\n    if (disabled) return;\n    if (onLongPress) {\n      e.preventDefault();\n      onLongPress();\n    }\n  };\n\n  const baseClasses = `\n    touch-target\n    relative\n    inline-flex\n    items-center\n    justify-center\n    min-h-[44px]\n    min-w-[44px]\n    transition-all\n    duration-150\n    ease-in-out\n    focus:outline-none\n    focus-visible:ring-2\n    focus-visible:ring-purple-500\n    focus-visible:ring-offset-2\n    ${disabled ? \"opacity-50 cursor-not-allowed\" : \"cursor-pointer active:scale-98\"}\n    ${className}\n  `;\n\n  return (\n    <Component\n      className={baseClasses}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      disabled={disabled}\n      {...props}\n    >\n      {children}\n    </Component>\n  );\n};\n\nexport default TouchTarget;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/mobile/VirtualList.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Function 'VirtualList' has too many lines (118). Maximum allowed is 75.",
        "line": 21,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 154,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Virtual List Component\n * Optimized for mobile performance with large lists\n */\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useViewport } from \"../../hooks/mobile/useViewport\";\n\ninterface VirtualListProps<T> {\n  items: T[];\n  renderItem: (item: T, index: number) => React.ReactNode;\n  itemHeight?: number;\n  overscan?: number;\n  className?: string;\n  onEndReached?: () => void;\n  endReachedThreshold?: number;\n  loading?: boolean;\n  loadingComponent?: React.ReactNode;\n  emptyComponent?: React.ReactNode;\n}\n\nexport function VirtualList<T>({\n  items,\n  renderItem,\n  itemHeight = 80,\n  overscan = 5,\n  className = \"\",\n  onEndReached,\n  endReachedThreshold = 0.8,\n  loading = false,\n  loadingComponent,\n  emptyComponent,\n}: VirtualListProps<T>) {\n  const { isMobile } = useViewport();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [scrollTop, setScrollTop] = useState(0);\n  const [containerHeight, setContainerHeight] = useState(0);\n\n  // Calculate visible range\n  const startIndex = Math.max(0, Math.floor(scrollTop / itemHeight) - overscan);\n  const endIndex = Math.min(\n    items.length - 1,\n    Math.ceil((scrollTop + containerHeight) / itemHeight) + overscan,\n  );\n\n  const visibleItems = items.slice(startIndex, endIndex + 1);\n\n  // Handle scroll with optimized performance for mobile\n  const handleScroll = useCallback(\n    (e: React.UIEvent<HTMLDivElement>) => {\n      const target = e.currentTarget;\n      const newScrollTop = target.scrollTop;\n\n      setScrollTop(newScrollTop);\n\n      // Check if we need to load more items\n      if (onEndReached && !loading) {\n        const scrollRatio =\n          (newScrollTop + containerHeight) / target.scrollHeight;\n        if (scrollRatio >= endReachedThreshold) {\n          onEndReached();\n        }\n      }\n    },\n    [containerHeight, onEndReached, loading, endReachedThreshold],\n  );\n\n  // Update container height on resize\n  useEffect(() => {\n    const updateHeight = () => {\n      if (containerRef.current) {\n        setContainerHeight(containerRef.current.clientHeight);\n      }\n    };\n\n    updateHeight();\n    window.addEventListener(\"resize\", updateHeight);\n    return () => window.removeEventListener(\"resize\", updateHeight);\n  }, []);\n\n  // Mobile-specific optimizations\n  const scrollerProps = isMobile\n    ? {\n        style: {\n          WebkitOverflowScrolling: \"touch\" as const,\n          transform: \"translateZ(0)\", // Enable hardware acceleration\n        },\n      }\n    : {};\n\n  if (items.length === 0 && !loading) {\n    return (\n      <div className={`flex items-center justify-center h-32 ${className}`}>\n        {emptyComponent || (\n          <p className=\"text-gray-500 dark:text-gray-400 text-center\">\n            No items to display\n          </p>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={`overflow-auto ${className}`}\n      onScroll={handleScroll}\n      {...scrollerProps}\n    >\n      {/* Total height container */}\n      <div\n        style={{\n          height: items.length * itemHeight,\n          position: \"relative\",\n        }}\n      >\n        {/* Visible items container */}\n        <div\n          style={{\n            transform: `translateY(${startIndex * itemHeight}px)`,\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            right: 0,\n          }}\n        >\n          {visibleItems.map((item, index) => (\n            <div\n              key={startIndex + index}\n              style={{\n                height: itemHeight,\n                overflow: \"hidden\",\n              }}\n              className=\"flex-shrink-0\"\n            >\n              {renderItem(item, startIndex + index)}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Loading indicator */}\n      {loading && (\n        <div className=\"flex items-center justify-center py-4\">\n          {loadingComponent || (\n            <div className=\"flex items-center space-x-2 text-gray-500\">\n              <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n              <span>Loading...</span>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default VirtualList;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/mobile/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/modals/PrivacyPolicyModal.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/modals/privacy/PrivacyPolicyContent.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (240). Maximum allowed is 75.",
        "line": 9,
        "column": 47,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 255,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from \"react\";\nimport {\n  FaShieldAlt,\n  FaLock,\n  FaDatabase,\n  FaUsers,\n} from \"../../../utils/iconImport\";\n\nexport const PrivacyPolicyContent: React.FC = () => {\n  return (\n    <>\n      {/* Introduction */}\n      <section className=\"glass-card glass-hover\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <div className=\"p-2 rounded-lg bg-purple-500/20 border border-purple-400/30\">\n            <FaShieldAlt className=\"text-purple-300\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n            Introduction\n          </h3>\n        </div>\n        <p className=\"leading-relaxed\">\n          ChastityOS is committed to protecting your privacy and ensuring the\n          security of your personal information. This privacy policy explains\n          how we collect, use, and protect your data when you use our\n          application.\n        </p>\n        <p className=\"leading-relaxed mt-3\">\n          We understand the sensitive nature of the data you entrust to us and\n          have implemented strict security measures to protect your privacy at\n          all times.\n        </p>\n      </section>\n\n      {/* Data Collection */}\n      <section>\n        <div className=\"flex items-center gap-2 mb-3\">\n          <FaDatabase className=\"text-nightly-spring-green\" />\n          <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n            Data We Collect\n          </h3>\n        </div>\n        <div className=\"space-y-3\">\n          <div>\n            <h4 className=\"font-medium text-nightly-honeydew mb-2\">\n              Account Information\n            </h4>\n            <ul className=\"list-disc list-inside space-y-1 ml-4\">\n              <li>Email address for account authentication</li>\n              <li>Display name and profile information you provide</li>\n              <li>Account preferences and settings</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-medium text-nightly-honeydew mb-2\">\n              Usage Data\n            </h4>\n            <ul className=\"list-disc list-inside space-y-1 ml-4\">\n              <li>Chastity session data (duration, start/end times)</li>\n              <li>Events and logs you create</li>\n              <li>Tasks and goals you set</li>\n              <li>Relationship data (with consent)</li>\n              <li>Analytics data to improve the service</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-medium text-nightly-honeydew mb-2\">\n              Technical Data\n            </h4>\n            <ul className=\"list-disc list-inside space-y-1 ml-4\">\n              <li>Device information and browser type</li>\n              <li>IP address and location data (anonymized)</li>\n              <li>Performance and error logs</li>\n            </ul>\n          </div>\n        </div>\n      </section>\n\n      {/* Data Usage */}\n      <section>\n        <div className=\"flex items-center gap-2 mb-3\">\n          <FaLock className=\"text-nightly-spring-green\" />\n          <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n            How We Use Your Data\n          </h3>\n        </div>\n        <div className=\"space-y-3\">\n          <p className=\"leading-relaxed\">\n            We use your data exclusively to provide and improve ChastityOS\n            services:\n          </p>\n          <ul className=\"list-disc list-inside space-y-1 ml-4\">\n            <li>Maintain your chastity tracking and session data</li>\n            <li>Enable communication with keyholders (when authorized)</li>\n            <li>Provide personalized achievements and goals</li>\n            <li>Send important notifications about your sessions</li>\n            <li>Improve app performance and user experience</li>\n            <li>Provide customer support when requested</li>\n          </ul>\n        </div>\n      </section>\n\n      {/* Data Security */}\n      <section>\n        <div className=\"flex items-center gap-2 mb-3\">\n          <FaLock className=\"text-nightly-coral\" />\n          <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n            Data Security\n          </h3>\n        </div>\n        <div className=\"space-y-3\">\n          <p className=\"leading-relaxed\">\n            We implement industry-standard security measures to protect your\n            data:\n          </p>\n          <ul className=\"list-disc list-inside space-y-1 ml-4\">\n            <li>\n              <strong>Encryption:</strong> All data is encrypted in transit and\n              at rest\n            </li>\n            <li>\n              <strong>Authentication:</strong> Secure login with optional\n              two-factor authentication\n            </li>\n            <li>\n              <strong>Access Control:</strong> Strict access controls limit who\n              can view your data\n            </li>\n            <li>\n              <strong>Regular Audits:</strong> We regularly review and update\n              our security practices\n            </li>\n            <li>\n              <strong>Local Storage:</strong> Some data is stored locally on\n              your device for offline access\n            </li>\n          </ul>\n        </div>\n      </section>\n\n      {/* Data Sharing */}\n      <section>\n        <div className=\"flex items-center gap-2 mb-3\">\n          <FaUsers className=\"text-nightly-spring-green\" />\n          <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n            Data Sharing\n          </h3>\n        </div>\n        <div className=\"space-y-3\">\n          <p className=\"leading-relaxed\">\n            <strong>\n              We do not sell, trade, or rent your personal information to third\n              parties.\n            </strong>\n          </p>\n          <p className=\"leading-relaxed\">\n            We may share limited data only in these circumstances:\n          </p>\n          <ul className=\"list-disc list-inside space-y-1 ml-4\">\n            <li>\n              With your explicit consent (e.g., public profiles you choose to\n              share)\n            </li>\n            <li>With keyholders you authorize in relationship settings</li>\n            <li>To comply with legal obligations or court orders</li>\n            <li>To protect the rights and safety of our users</li>\n            <li>\n              With service providers who help us operate the app (under strict\n              confidentiality agreements)\n            </li>\n          </ul>\n        </div>\n      </section>\n\n      {/* Your Rights */}\n      <section>\n        <div className=\"flex items-center gap-2 mb-3\">\n          <FaShieldAlt className=\"text-nightly-lavender-floral\" />\n          <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n            Your Rights\n          </h3>\n        </div>\n        <div className=\"space-y-3\">\n          <p className=\"leading-relaxed\">\n            You have the following rights regarding your personal data:\n          </p>\n          <ul className=\"list-disc list-inside space-y-1 ml-4\">\n            <li>\n              <strong>Access:</strong> Request a copy of your personal data\n            </li>\n            <li>\n              <strong>Correction:</strong> Update or correct your information\n            </li>\n            <li>\n              <strong>Deletion:</strong> Request deletion of your account and\n              data\n            </li>\n            <li>\n              <strong>Portability:</strong> Export your data in a\n              machine-readable format\n            </li>\n            <li>\n              <strong>Restriction:</strong> Limit how we process your data\n            </li>\n            <li>\n              <strong>Objection:</strong> Object to processing for marketing\n              purposes\n            </li>\n          </ul>\n          <p className=\"leading-relaxed\">\n            To exercise these rights, contact us at privacy@chastityos.com.\n          </p>\n        </div>\n      </section>\n\n      {/* Contact */}\n      <section>\n        <div className=\"flex items-center gap-2 mb-3\">\n          <FaDatabase className=\"text-nightly-lavender-floral\" />\n          <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n            Contact Us\n          </h3>\n        </div>\n        <p className=\"leading-relaxed\">\n          If you have questions about this privacy policy or how we handle your\n          data, please contact our privacy team:\n        </p>\n        <div className=\"mt-3 bg-white/5 rounded-lg p-4\">\n          <p>\n            <strong>Email:</strong> privacy@chastityos.com\n          </p>\n          <p>\n            <strong>Response Time:</strong> Within 48 hours\n          </p>\n          <p>\n            <strong>Data Protection Officer:</strong> Available upon request\n          </p>\n        </div>\n      </section>\n\n      {/* Changes to Policy */}\n      <section className=\"border-t border-white/10 pt-6\">\n        <h3 className=\"text-lg font-semibold text-nightly-honeydew mb-3\">\n          Changes to This Policy\n        </h3>\n        <p className=\"leading-relaxed\">\n          We may update this privacy policy from time to time. We will notify\n          you of any changes by posting the new privacy policy on this page and\n          updating the \"Last updated\" date. We encourage you to review this\n          privacy policy periodically for any changes.\n        </p>\n      </section>\n    </>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/profile/ProfileAchievements.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/profile/ProfileErrorStates.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/profile/ProfileRecentAchievements.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/profile/ProfileStatistics.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/profile/PublicProfileHeader.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/profile/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/relationships/ErrorDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/relationships/MigrationBanner.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/relationships/PendingRequestsList.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/relationships/RelationshipManager.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (78). Maximum allowed is 75.",
        "line": 18,
        "column": 65,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 107,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Relationship Manager Component\n * Main interface for managing keyholder relationships\n */\nimport React, { useState } from \"react\";\nimport { useRelationships } from \"@/hooks/useRelationships\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport { MigrationBanner } from \"./MigrationBanner\";\nimport { PendingRequestsList } from \"./PendingRequestsList\";\nimport { RelationshipRequestForm } from \"./RelationshipRequestForm\";\nimport { RelationshipsList } from \"./RelationshipsList\";\nimport { ErrorDisplay } from \"./ErrorDisplay\";\n\ninterface RelationshipManagerProps {\n  className?: string;\n}\n\nconst RelationshipManager: React.FC<RelationshipManagerProps> = ({\n  className = \"\",\n}) => {\n  const {\n    relationships,\n    pendingRequests,\n    activeRelationship,\n    isLoading,\n    error,\n    needsMigration,\n    sendRelationshipRequest,\n    acceptRelationshipRequest,\n    rejectRelationshipRequest,\n    endRelationship,\n    setActiveRelationship,\n    migrateSingleUserData,\n    clearError,\n  } = useRelationships();\n\n  const [showRequestForm, setShowRequestForm] = useState(false);\n  const [requestForm, setRequestForm] = useState({\n    email: \"\",\n    role: \"submissive\" as \"submissive\" | \"keyholder\",\n    message: \"\",\n  });\n\n  // Handle sending relationship request\n  const handleSendRequest = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      await sendRelationshipRequest(\n        requestForm.email,\n        requestForm.role,\n        requestForm.message,\n      );\n      setShowRequestForm(false);\n      setRequestForm({ email: \"\", role: \"submissive\", message: \"\" });\n    } catch {\n      // Handle error silently or with proper error handling\n    }\n  };\n\n  return (\n    <div className={`max-w-4xl mx-auto p-6 ${className}`}>\n      <ErrorDisplay error={error ?? null} onClear={clearError} />\n\n      <MigrationBanner\n        needsMigration={needsMigration}\n        isLoading={isLoading}\n        onMigrate={migrateSingleUserData}\n      />\n\n      <div className=\"flex items-center justify-between mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">\n          Relationship Manager\n        </h1>\n\n        <button\n          onClick={() => setShowRequestForm(true)}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 inline-flex items-center\"\n        >\n          <FaUserPlus className=\"mr-2\" />\n          New Request\n        </button>\n      </div>\n\n      <PendingRequestsList\n        pendingRequests={pendingRequests}\n        isLoading={isLoading}\n        onAccept={acceptRelationshipRequest}\n        onReject={rejectRelationshipRequest}\n      />\n\n      <RelationshipRequestForm\n        isVisible={showRequestForm}\n        isLoading={isLoading}\n        onSubmit={handleSendRequest}\n        onCancel={() => setShowRequestForm(false)}\n      />\n\n      <RelationshipsList\n        relationships={relationships}\n        activeRelationship={activeRelationship}\n        onSetActive={setActiveRelationship}\n        onEndRelationship={endRelationship}\n      />\n    </div>\n  );\n};\n\nexport default RelationshipManager;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/relationships/RelationshipRequestForm.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (103). Maximum allowed is 75.",
        "line": 17,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 125,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from \"react\";\nimport { FaSpinner } from \"react-icons/fa\";\n\ninterface RelationshipRequestFormProps {\n  isVisible: boolean;\n  isLoading: boolean;\n  onSubmit: (data: {\n    email: string;\n    role: \"submissive\" | \"keyholder\";\n    message: string;\n  }) => void;\n  onCancel: () => void;\n}\n\nexport const RelationshipRequestForm: React.FC<\n  RelationshipRequestFormProps\n> = ({ isVisible, isLoading, onSubmit, onCancel }) => {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    role: \"submissive\" as \"submissive\" | \"keyholder\",\n    message: \"\",\n  });\n\n  if (!isVisible) return null;\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n\n  return (\n    <div className=\"bg-white border border-gray-300 rounded-lg p-4 mb-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n        Send Relationship Request\n      </h3>\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <label\n            htmlFor=\"email\"\n            className=\"block text-sm font-medium text-gray-700 mb-1\"\n          >\n            Email Address\n          </label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={formData.email}\n            onChange={(e) =>\n              setFormData({ ...formData, email: e.target.value })\n            }\n            className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n            placeholder=\"person@example.com\"\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"role\"\n            className=\"block text-sm font-medium text-gray-700 mb-1\"\n          >\n            Your Role in this Relationship\n          </label>\n          <select\n            id=\"role\"\n            value={formData.role}\n            onChange={(e) =>\n              setFormData({\n                ...formData,\n                role: e.target.value as \"submissive\" | \"keyholder\",\n              })\n            }\n            className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n          >\n            <option value=\"submissive\">Submissive</option>\n            <option value=\"keyholder\">Keyholder</option>\n          </select>\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"message\"\n            className=\"block text-sm font-medium text-gray-700 mb-1\"\n          >\n            Message (Optional)\n          </label>\n          <textarea\n            id=\"message\"\n            value={formData.message}\n            onChange={(e) =>\n              setFormData({ ...formData, message: e.target.value })\n            }\n            rows={3}\n            className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n            placeholder=\"Add a personal message...\"\n          />\n        </div>\n\n        <div className=\"flex gap-3\">\n          <button\n            type=\"submit\"\n            disabled={isLoading}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 inline-flex items-center\"\n          >\n            {isLoading ? (\n              <>\n                <FaSpinner className=\"animate-spin mr-2\" />\n                Sending...\n              </>\n            ) : (\n              \"Send Request\"\n            )}\n          </button>\n          <button\n            type=\"button\"\n            onClick={onCancel}\n            className=\"px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/relationships/RelationshipsList.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (107). Maximum allowed is 75.",
        "line": 12,
        "column": 68,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 123,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (77). Maximum allowed is 75.",
        "line": 40,
        "column": 28,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 119,
        "endColumn": 10
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from \"react\";\nimport { FaEye, FaCog, FaTrash } from \"react-icons/fa\";\nimport { RelationshipStatus, type Relationship } from \"@/types/relationships\";\n\ninterface RelationshipsListProps {\n  relationships: Relationship[];\n  activeRelationship: Relationship | null;\n  onSetActive: (relationship: Relationship) => void;\n  onEndRelationship: (relationshipId: string) => void;\n}\n\nexport const RelationshipsList: React.FC<RelationshipsListProps> = ({\n  relationships,\n  activeRelationship,\n  onSetActive,\n  onEndRelationship,\n}) => {\n  if (relationships.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"text-gray-400 text-4xl mb-4\">🤝</div>\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n          No relationships yet\n        </h3>\n        <p className=\"text-gray-600\">\n          Send a relationship request to get started with collaborative chastity\n          management.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-xl font-semibold text-gray-900\">\n        Your Relationships ({relationships.length})\n      </h2>\n\n      <div className=\"grid gap-4\">\n        {relationships.map((relationship) => (\n          <div\n            key={relationship.id}\n            className={`border rounded-lg p-4 ${\n              activeRelationship?.id === relationship.id\n                ? \"border-blue-500 bg-blue-50\"\n                : \"border-gray-200 bg-white\"\n            }`}\n          >\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-3 mb-2\">\n                  <h3 className=\"text-lg font-medium text-gray-900\">\n                    Relationship with{\" \"}\n                    {relationship.submissiveId === relationship.keyholderId\n                      ? \"Yourself (Self-managed)\"\n                      : relationship.keyholderId}\n                  </h3>\n                  <span\n                    className={`px-2 py-1 rounded text-xs font-medium ${\n                      relationship.status === RelationshipStatus.ACTIVE\n                        ? \"bg-green-100 text-green-800\"\n                        : relationship.status === RelationshipStatus.PAUSED\n                          ? \"bg-yellow-100 text-yellow-800\"\n                          : \"bg-gray-100 text-gray-800\"\n                    }`}\n                  >\n                    {relationship.status}\n                  </span>\n                </div>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  Your role:{\" \"}\n                  {relationship.submissiveId === relationship.keyholderId\n                    ? \"Both\"\n                    : relationship.submissiveId === \"current-user-id\"\n                      ? \"Submissive\"\n                      : \"Keyholder\"}\n                </p>\n                {relationship.notes && (\n                  <p className=\"text-sm text-gray-700 mt-1 italic\">\n                    \"{relationship.notes}\"\n                  </p>\n                )}\n                <p className=\"text-xs text-gray-500 mt-2\">\n                  Established:{\" \"}\n                  {relationship.establishedAt.toDate().toLocaleDateString()}\n                </p>\n              </div>\n\n              <div className=\"flex gap-2\">\n                <button\n                  onClick={() => onSetActive(relationship)}\n                  className={`p-2 rounded ${\n                    activeRelationship?.id === relationship.id\n                      ? \"bg-blue-600 text-white\"\n                      : \"bg-gray-100 text-gray-600 hover:bg-gray-200\"\n                  }`}\n                  title=\"Set as active\"\n                >\n                  <FaEye />\n                </button>\n\n                <button\n                  className=\"p-2 rounded bg-gray-100 text-gray-600 hover:bg-gray-200\"\n                  title=\"Relationship settings\"\n                >\n                  <FaCog />\n                </button>\n\n                <button\n                  onClick={() => onEndRelationship(relationship.id)}\n                  className=\"p-2 rounded bg-red-100 text-red-600 hover:bg-red-200\"\n                  title=\"End relationship\"\n                >\n                  <FaTrash />\n                </button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/rewards_punishments/LogItem.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (85). Maximum allowed is 75.",
        "line": 33,
        "column": 48,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 125,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from \"react\";\nimport {\n  FaAward,\n  FaGavel,\n  FaClock,\n  FaStickyNote,\n  FaTrophy,\n  FaExclamationTriangle,\n} from \"../../utils/iconImport\";\n\n// Mock reward/punishment log item interface\nexport interface RewardPunishmentLog {\n  id: string;\n  type: \"reward\" | \"punishment\";\n  title: string;\n  description: string;\n  timeChangeSeconds: number; // Positive for added time, negative for removed time\n  source:\n    | \"task_completion\"\n    | \"keyholder_action\"\n    | \"rule_violation\"\n    | \"milestone\";\n  sourceId?: string; // Reference to task, rule, etc.\n  createdAt: Date;\n  notes?: string;\n}\n\n// Log Item Component\ninterface LogItemProps {\n  item: RewardPunishmentLog;\n}\n\nexport const LogItem: React.FC<LogItemProps> = ({ item }) => {\n  const isReward = item.type === \"reward\";\n  const timeChange = Math.abs(item.timeChangeSeconds);\n\n  const formatDuration = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n\n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    } else {\n      return `${minutes}m`;\n    }\n  };\n\n  const getSourceIcon = () => {\n    switch (item.source) {\n      case \"task_completion\":\n        return <FaTrophy className=\"text-nightly-aquamarine\" />;\n      case \"keyholder_action\":\n        return <FaGavel className=\"text-nightly-lavender-floral\" />;\n      case \"rule_violation\":\n        return <FaExclamationTriangle className=\"text-red-400\" />;\n      case \"milestone\":\n        return <FaAward className=\"text-nightly-spring-green\" />;\n      default:\n        return <FaClock />;\n    }\n  };\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-4\">\n      {/* Header */}\n      <div className=\"flex items-start justify-between mb-3\">\n        <div className=\"flex items-center gap-3\">\n          {isReward ? (\n            <FaAward className=\"text-green-400 text-xl\" />\n          ) : (\n            <FaGavel className=\"text-red-400 text-xl\" />\n          )}\n          <div>\n            <h3 className=\"font-medium text-nightly-honeydew\">{item.title}</h3>\n            <p className=\"text-sm text-nightly-celadon\">{item.description}</p>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          {getSourceIcon()}\n          <span\n            className={`px-2 py-1 text-xs rounded ${\n              isReward\n                ? \"bg-green-500/20 text-green-300\"\n                : \"bg-red-500/20 text-red-300\"\n            }`}\n          >\n            {isReward ? \"REWARD\" : \"PUNISHMENT\"}\n          </span>\n        </div>\n      </div>\n\n      {/* Time Impact */}\n      {item.timeChangeSeconds !== 0 && (\n        <div\n          className={`flex items-center gap-2 mb-3 ${\n            isReward ? \"text-green-400\" : \"text-red-400\"\n          }`}\n        >\n          <FaClock />\n          <span className=\"font-mono\">\n            {formatDuration(timeChange)}{\" \"}\n            {isReward ? \"removed from\" : \"added to\"} chastity time\n          </span>\n        </div>\n      )}\n\n      {/* Notes */}\n      {item.notes && (\n        <div className=\"bg-white/5 rounded p-2 mb-3\">\n          <div className=\"flex items-center gap-2 text-nightly-celadon\">\n            <FaStickyNote />\n            <span className=\"text-sm\">{item.notes}</span>\n          </div>\n        </div>\n      )}\n\n      {/* Timestamp */}\n      <div className=\"text-xs text-nightly-celadon text-right\">\n        {item.createdAt.toLocaleDateString()}{\" \"}\n        {item.createdAt.toLocaleTimeString()}\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/rewards_punishments/ManualEntryForm.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (176). Maximum allowed is 75.",
        "line": 10,
        "column": 64,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 197,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from \"react\";\nimport { RewardPunishmentLog } from \"./LogItem\";\nimport { FaPlus } from \"../../utils/iconImport\";\n\n// Manual Entry Form Component\ninterface ManualEntryFormProps {\n  onSubmit: (entry: Omit<RewardPunishmentLog, \"id\" | \"createdAt\">) => void;\n}\n\nexport const ManualEntryForm: React.FC<ManualEntryFormProps> = ({\n  onSubmit,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [formData, setFormData] = useState({\n    type: \"reward\" as \"reward\" | \"punishment\",\n    title: \"\",\n    description: \"\",\n    timeChangeSeconds: 3600, // Default 1 hour\n    notes: \"\",\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    onSubmit({\n      ...formData,\n      timeChangeSeconds:\n        formData.type === \"reward\"\n          ? -Math.abs(formData.timeChangeSeconds)\n          : Math.abs(formData.timeChangeSeconds),\n      source: \"keyholder_action\",\n    });\n\n    // Reset form\n    setFormData({\n      type: \"reward\",\n      title: \"\",\n      description: \"\",\n      timeChangeSeconds: 3600,\n      notes: \"\",\n    });\n    setIsOpen(false);\n  };\n\n  if (!isOpen) {\n    return (\n      <button\n        onClick={() => setIsOpen(true)}\n        className=\"bg-nightly-aquamarine hover:bg-nightly-aquamarine/80 text-black px-4 py-2 rounded font-medium transition-colors flex items-center gap-2\"\n      >\n        <FaPlus />\n        Add Manual Entry\n      </button>\n    );\n  }\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6 mb-6\">\n      <h3 className=\"text-lg font-semibold text-nightly-honeydew mb-4\">\n        Manual Reward/Punishment\n      </h3>\n\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        {/* Type Selection */}\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Type\n          </label>\n          <div className=\"flex gap-4\">\n            <label className=\"flex items-center\">\n              <input\n                type=\"radio\"\n                value=\"reward\"\n                checked={formData.type === \"reward\"}\n                onChange={(e) =>\n                  setFormData((prev) => ({\n                    ...prev,\n                    type: e.target.value as \"reward\" | \"punishment\",\n                  }))\n                }\n                className=\"mr-2\"\n              />\n              <span className=\"text-green-400\">Reward</span>\n            </label>\n            <label className=\"flex items-center\">\n              <input\n                type=\"radio\"\n                value=\"punishment\"\n                checked={formData.type === \"punishment\"}\n                onChange={(e) =>\n                  setFormData((prev) => ({\n                    ...prev,\n                    type: e.target.value as \"reward\" | \"punishment\",\n                  }))\n                }\n                className=\"mr-2\"\n              />\n              <span className=\"text-red-400\">Punishment</span>\n            </label>\n          </div>\n        </div>\n\n        {/* Title */}\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Title\n          </label>\n          <input\n            type=\"text\"\n            value={formData.title}\n            onChange={(e) =>\n              setFormData((prev) => ({ ...prev, title: e.target.value }))\n            }\n            placeholder=\"Brief title for this entry\"\n            className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew placeholder-nightly-celadon/50\"\n            required\n          />\n        </div>\n\n        {/* Description */}\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Description\n          </label>\n          <textarea\n            value={formData.description}\n            onChange={(e) =>\n              setFormData((prev) => ({ ...prev, description: e.target.value }))\n            }\n            placeholder=\"Detailed description of the reason\"\n            className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew placeholder-nightly-celadon/50 resize-none\"\n            rows={3}\n            required\n          />\n        </div>\n\n        {/* Time Change */}\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Time Impact (hours)\n          </label>\n          <input\n            type=\"number\"\n            min=\"0\"\n            max=\"168\"\n            step=\"0.5\"\n            value={formData.timeChangeSeconds / 3600}\n            onChange={(e) =>\n              setFormData((prev) => ({\n                ...prev,\n                timeChangeSeconds: parseFloat(e.target.value) * 3600,\n              }))\n            }\n            className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew\"\n          />\n          <div className=\"text-xs text-nightly-celadon mt-1\">\n            This will {formData.type === \"reward\" ? \"reduce\" : \"add\"} chastity\n            time\n          </div>\n        </div>\n\n        {/* Notes */}\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Notes (optional)\n          </label>\n          <textarea\n            value={formData.notes}\n            onChange={(e) =>\n              setFormData((prev) => ({ ...prev, notes: e.target.value }))\n            }\n            placeholder=\"Additional notes or comments\"\n            className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew placeholder-nightly-celadon/50 resize-none\"\n            rows={2}\n          />\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex gap-3\">\n          <button\n            type=\"submit\"\n            className=\"bg-nightly-aquamarine hover:bg-nightly-aquamarine/80 text-black px-6 py-2 rounded font-medium transition-colors\"\n          >\n            Add Entry\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => setIsOpen(false)}\n            className=\"bg-white/10 hover:bg-white/20 text-nightly-celadon px-6 py-2 rounded font-medium transition-colors\"\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/rewards_punishments/RewardPunishmentStats.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/rewards_punishments/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/rules/RuleCard.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (92). Maximum allowed is 75.",
        "line": 23,
        "column": 50,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 119,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from \"react\";\nimport { FaEdit, FaLock, FaUnlock } from \"../../utils/iconImport\";\n\n// Mock rules interface\nexport interface ChastityRule {\n  id: string;\n  title: string;\n  content: string;\n  isActive: boolean;\n  createdBy: \"submissive\" | \"keyholder\";\n  createdAt: Date;\n  lastModified: Date;\n}\n\n// Rule Card Component\ninterface RuleCardProps {\n  rule: ChastityRule;\n  isEditable: boolean;\n  onEdit?: (ruleId: string) => void;\n  onToggle?: (ruleId: string) => void;\n}\n\nexport const RuleCard: React.FC<RuleCardProps> = ({\n  rule,\n  isEditable,\n  onEdit,\n  onToggle,\n}) => {\n  const formatMarkdownToReact = (content: string) => {\n    // Simple markdown-to-HTML conversion (in real app, use a proper library)\n    return content.split(\"\\n\").map((line, index) => {\n      if (line.startsWith(\"**\") && line.endsWith(\"**\")) {\n        return (\n          <strong key={index} className=\"text-nightly-honeydew\">\n            {line.slice(2, -2)}\n          </strong>\n        );\n      }\n      if (line.startsWith(\"- \")) {\n        return (\n          <li key={index} className=\"ml-4 text-nightly-celadon\">\n            {line.slice(2)}\n          </li>\n        );\n      }\n      if (line.trim() === \"\") {\n        return <br key={index} />;\n      }\n      return (\n        <p key={index} className=\"text-nightly-celadon mb-2\">\n          {line}\n        </p>\n      );\n    });\n  };\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n      {/* Header */}\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center gap-3 mb-2\">\n            {rule.isActive ? (\n              <FaUnlock className=\"text-green-400\" />\n            ) : (\n              <FaLock className=\"text-gray-400\" />\n            )}\n            <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n              {rule.title}\n            </h3>\n            <span\n              className={`px-2 py-1 text-xs rounded ${\n                rule.isActive\n                  ? \"bg-green-500/20 text-green-300\"\n                  : \"bg-gray-500/20 text-gray-300\"\n              }`}\n            >\n              {rule.isActive ? \"ACTIVE\" : \"INACTIVE\"}\n            </span>\n          </div>\n\n          <div className=\"flex items-center gap-4 text-xs text-nightly-celadon\">\n            <span>Created by: {rule.createdBy}</span>\n            <span>•</span>\n            <span>Modified: {rule.lastModified.toLocaleDateString()}</span>\n          </div>\n        </div>\n\n        {isEditable && (\n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={() => onToggle?.(rule.id)}\n              className={`p-2 rounded transition-colors ${\n                rule.isActive\n                  ? \"bg-gray-500/20 hover:bg-gray-500/30 text-gray-300\"\n                  : \"bg-green-500/20 hover:bg-green-500/30 text-green-300\"\n              }`}\n              title={rule.isActive ? \"Deactivate rule\" : \"Activate rule\"}\n            >\n              {rule.isActive ? <FaLock /> : <FaUnlock />}\n            </button>\n            <button\n              onClick={() => onEdit?.(rule.id)}\n              className=\"p-2 bg-nightly-aquamarine/20 hover:bg-nightly-aquamarine/30 text-nightly-aquamarine rounded transition-colors\"\n              title=\"Edit rule\"\n            >\n              <FaEdit />\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Content */}\n      <div className=\"prose prose-sm max-w-none\">\n        {formatMarkdownToReact(rule.content)}\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/rules/RuleEditor.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (128). Maximum allowed is 75.",
        "line": 14,
        "column": 54,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 151,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from \"react\";\nimport { ChastityRule } from \"./RuleCard\";\nimport { FaEdit, FaSave, FaTimes } from \"../../utils/iconImport\";\n\n// Rule Editor Component\ninterface RuleEditorProps {\n  rule: ChastityRule | null;\n  onSave: (\n    rule: Omit<ChastityRule, \"id\" | \"createdAt\" | \"lastModified\">,\n  ) => void;\n  onCancel: () => void;\n}\n\nexport const RuleEditor: React.FC<RuleEditorProps> = ({\n  rule,\n  onSave,\n  onCancel,\n}) => {\n  const [formData, setFormData] = useState({\n    title: rule?.title || \"\",\n    content: rule?.content || \"\",\n    isActive: rule?.isActive ?? true,\n    createdBy: rule?.createdBy || (\"submissive\" as \"submissive\" | \"keyholder\"),\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSave(formData);\n  };\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n      <div className=\"flex items-center gap-3 mb-6\">\n        <FaEdit className=\"text-nightly-aquamarine\" />\n        <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n          {rule ? \"Edit Rule\" : \"Create New Rule\"}\n        </h3>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        {/* Title */}\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Rule Title\n          </label>\n          <input\n            type=\"text\"\n            value={formData.title}\n            onChange={(e) =>\n              setFormData((prev) => ({ ...prev, title: e.target.value }))\n            }\n            placeholder=\"Enter a clear, descriptive title\"\n            className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew placeholder-nightly-celadon/50\"\n            required\n          />\n        </div>\n\n        {/* Content */}\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Rule Content\n            <span className=\"text-xs text-nightly-celadon/70 ml-2\">\n              (Supports basic markdown: **bold**, bullet points with -)\n            </span>\n          </label>\n          <textarea\n            value={formData.content}\n            onChange={(e) =>\n              setFormData((prev) => ({ ...prev, content: e.target.value }))\n            }\n            placeholder={`Describe the rule in detail, including:\n\n**Requirements:**\n- What needs to be done\n- When it needs to be done\n- How to provide evidence\n\n**Consequences:**\n- For following the rule (rewards)\n- For breaking the rule (punishments)\n\n**Additional notes:**\n- Any special circumstances\n- Exceptions or modifications`}\n            className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew placeholder-nightly-celadon/50 resize-none font-mono text-sm\"\n            rows={12}\n            required\n          />\n        </div>\n\n        {/* Settings */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n              Created By\n            </label>\n            <select\n              value={formData.createdBy}\n              onChange={(e) =>\n                setFormData((prev) => ({\n                  ...prev,\n                  createdBy: e.target.value as \"submissive\" | \"keyholder\",\n                }))\n              }\n              className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew\"\n            >\n              <option value=\"submissive\">Submissive</option>\n              <option value=\"keyholder\">Keyholder</option>\n            </select>\n          </div>\n\n          <div className=\"flex items-center\">\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={formData.isActive}\n                onChange={(e) =>\n                  setFormData((prev) => ({\n                    ...prev,\n                    isActive: e.target.checked,\n                  }))\n                }\n                className=\"mr-2\"\n              />\n              <span className=\"text-nightly-celadon\">Rule is active</span>\n            </label>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex gap-3 pt-4\">\n          <button\n            type=\"submit\"\n            className=\"bg-nightly-aquamarine hover:bg-nightly-aquamarine/80 text-black px-6 py-2 rounded font-medium transition-colors flex items-center gap-2\"\n          >\n            <FaSave />\n            {rule ? \"Update Rule\" : \"Create Rule\"}\n          </button>\n          <button\n            type=\"button\"\n            onClick={onCancel}\n            className=\"bg-white/10 hover:bg-white/20 text-nightly-celadon px-6 py-2 rounded font-medium transition-colors flex items-center gap-2\"\n          >\n            <FaTimes />\n            Cancel\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/rules/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/settings/AccountSection.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/settings/DisplaySettingsSection.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/settings/PersonalGoalSection.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/settings/PublicProfileSection.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/settings/SessionEditSection.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/system/OfflineStatus.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (81). Maximum allowed is 75.",
        "line": 11,
        "column": 40,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 101,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Offline Status Component\n * Shows the status of the offline queue and sync operations\n * Demonstrates the complete Firebase ↔ Dexie ↔ TanStack Query architecture\n */\nimport React, { useState } from \"react\";\nimport { useOfflineQueueStats } from \"../../hooks/api\";\nimport { useNotificationActions } from \"../../stores\";\nimport { FaWifi, FaWifiSlash, FaSync } from \"../../utils/iconImport\";\n\nexport const OfflineStatus: React.FC = () => {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const { data: queueStats } = useOfflineQueueStats();\n  const { showInfo } = useNotificationActions();\n\n  // Listen for online/offline events\n  React.useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      showInfo(\n        \"Back online! Syncing pending changes...\",\n        \"Connection Restored\",\n      );\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n      showInfo(\n        \"You're offline. Changes will sync when connection is restored.\",\n        \"Offline Mode\",\n      );\n    };\n\n    window.addEventListener(\"online\", handleOnline);\n    window.addEventListener(\"offline\", handleOffline);\n\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n    };\n  }, [showInfo]);\n\n  const statusColor = isOnline\n    ? (queueStats?.pending || 0) > 0\n      ? \"bg-yellow-500\"\n      : \"bg-green-500\"\n    : \"bg-red-500\";\n\n  const statusIcon = isOnline ? (\n    queueStats?.pending ? (\n      <FaSync className=\"animate-spin\" />\n    ) : (\n      <FaWifi />\n    )\n  ) : (\n    <FaWifiSlash />\n  );\n\n  return (\n    <div className=\"fixed bottom-4 right-4 bg-white/10 backdrop-blur-sm border border-white/20 rounded-lg shadow-lg p-4 max-w-sm\">\n      {/* Status Header */}\n      <div className=\"flex items-center justify-between mb-3\">\n        <div className=\"flex items-center gap-2\">\n          <div className={`w-3 h-3 rounded-full ${statusColor}`} />\n          <span className=\"text-sm font-medium text-white\">\n            {isOnline ? \"Online\" : \"Offline\"}\n          </span>\n          {statusIcon}\n        </div>\n      </div>\n\n      {/* Architecture Flow Indicator */}\n      <div className=\"mt-3 pt-3 border-t border-white/10\">\n        <div className=\"text-xs font-medium text-white mb-2\">\n          🎯 Migration Complete\n        </div>\n        <div className=\"flex items-center justify-between text-xs\">\n          <span className=\"text-blue-400\">Firebase</span>\n          <span className=\"text-gray-400\">↔</span>\n          <span className=\"text-green-400\">Dexie</span>\n          <span className=\"text-gray-400\">↔</span>\n          <span className=\"text-purple-400\">TanStack</span>\n          <span className=\"text-gray-400\">↔</span>\n          <span className=\"text-yellow-400\">UI</span>\n        </div>\n        <div className=\"text-center mt-1\">\n          <span className=\"text-xs text-gray-400\">↑</span>\n        </div>\n        <div className=\"text-center\">\n          <span className=\"text-xs text-orange-400\">Zustand</span>\n        </div>\n      </div>\n\n      {/* Implementation Status */}\n      <div className=\"mt-3 p-2 bg-green-500/20 rounded text-xs text-green-200\">\n        <strong>✅ Architecture Ready:</strong> Firebase to TanStack Query\n        migration is complete and functional.\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tasks/CountdownTimer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tasks/TaskItem.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tasks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tracker/ActionButtons.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tracker/CooldownTimer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tracker/DenialCooldown.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tracker/EmergencyUnlockButton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tracker/EmergencyUnlockModal.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (250). Maximum allowed is 75.",
        "line": 23,
        "column": 74,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 288,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (92). Maximum allowed is 75.",
        "line": 100,
        "column": 23,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 195,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from \"react\";\nimport {\n  FaTimes,\n  FaExclamationTriangle,\n  FaArrowLeft,\n  FaArrowRight,\n} from \"react-icons/fa\";\nimport type { EmergencyUnlockReason } from \"../../types/events\";\nimport { EMERGENCY_UNLOCK_REASONS } from \"../../types/events\";\nimport { useEmergencyUnlockModal } from \"../../hooks/tracker/useEmergencyUnlockModal\";\n\ninterface EmergencyUnlockModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onEmergencyUnlock: (\n    reason: EmergencyUnlockReason,\n    additionalNotes?: string,\n  ) => Promise<void>;\n  sessionId: string;\n  isProcessing?: boolean;\n}\n\nexport const EmergencyUnlockModal: React.FC<EmergencyUnlockModalProps> = ({\n  isOpen,\n  onClose,\n  onEmergencyUnlock,\n  sessionId,\n  isProcessing: _isProcessing = false,\n}) => {\n  const {\n    stage,\n    reason,\n    customReason,\n    confirmText,\n    isSubmitting,\n    setStage,\n    setReason,\n    setCustomReason,\n    setConfirmText,\n    handleEmergencyUnlock,\n    canProceedFromReason,\n    canConfirm,\n    requiredText,\n    confirmInputRef,\n  } = useEmergencyUnlockModal({\n    sessionId,\n    onEmergencyUnlock: async (finalReason, additionalNotes) => {\n      await onEmergencyUnlock(finalReason, additionalNotes);\n      onClose();\n    },\n    isOpen,\n  });\n\n  if (!isOpen) return null;\n\n  const WarningStage = () => (\n    <div className=\"text-center\">\n      <FaExclamationTriangle className=\"text-6xl text-red-400 mx-auto mb-6\" />\n      <h3 className=\"text-xl font-bold mb-4 text-red-300\">\n        🚨 Emergency Unlock\n      </h3>\n\n      <div className=\"bg-red-900/30 border border-red-600 rounded-lg p-4 mb-6 text-left\">\n        <h4 className=\"font-semibold text-red-300 mb-2\">\n          ⚠️ Warning: Emergency Use Only\n        </h4>\n        <ul className=\"text-sm text-red-200 space-y-1\">\n          <li>• This will immediately end your current session</li>\n          <li>• All session goals and restrictions will be bypassed</li>\n          <li>• This action will be logged for safety and accountability</li>\n          <li>• Frequent use may trigger cooldown periods</li>\n          <li>• Use only in genuine emergency situations</li>\n        </ul>\n      </div>\n\n      <p className=\"text-sm text-gray-300 mb-6\">\n        This feature is designed for medical emergencies, safety concerns,\n        equipment malfunctions, or other urgent situations that genuinely\n        require immediate unlock.\n      </p>\n\n      <div className=\"flex flex-col space-y-3\">\n        <button\n          onClick={() => setStage(\"reason\")}\n          className=\"w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-4 rounded-lg transition flex items-center justify-center\"\n        >\n          I Understand - Continue\n          <FaArrowRight className=\"ml-2\" />\n        </button>\n        <button\n          onClick={onClose}\n          className=\"w-full bg-gray-600 hover:bg-gray-500 text-white font-bold py-3 px-4 rounded-lg transition\"\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  );\n\n  const ReasonStage = () => (\n    <div>\n      <div className=\"flex items-center mb-6\">\n        <button\n          onClick={() => setStage(\"warning\")}\n          className=\"mr-3 p-1 text-gray-400 hover:text-white transition\"\n          aria-label=\"Go back\"\n        >\n          <FaArrowLeft />\n        </button>\n        <h3 className=\"text-xl font-bold text-red-300\">\n          Select Emergency Reason\n        </h3>\n      </div>\n\n      <p className=\"text-sm text-gray-300 mb-4\">\n        Please select the reason for your emergency unlock. This information\n        helps ensure the feature is used appropriately and safely.\n      </p>\n\n      <div className=\"space-y-3 mb-6\">\n        {EMERGENCY_UNLOCK_REASONS.map((emergencyReason) => (\n          <label\n            key={emergencyReason}\n            className={`flex items-start p-3 rounded-lg border cursor-pointer transition ${\n              reason === emergencyReason\n                ? \"border-red-500 bg-red-900/30\"\n                : \"border-gray-600 bg-gray-800/50 hover:bg-gray-700/50\"\n            }`}\n          >\n            <input\n              type=\"radio\"\n              name=\"emergency-reason\"\n              value={emergencyReason}\n              checked={reason === emergencyReason}\n              onChange={(e) =>\n                setReason(e.target.value as EmergencyUnlockReason)\n              }\n              className=\"mt-1 mr-3 text-red-600\"\n            />\n            <div>\n              <div className=\"font-medium text-white\">{emergencyReason}</div>\n              <div className=\"text-xs text-gray-400 mt-1\">\n                {emergencyReason === \"Medical Emergency\" &&\n                  \"Health-related emergencies requiring immediate unlock\"}\n                {emergencyReason === \"Safety Concern\" &&\n                  \"Physical safety or security situations\"}\n                {emergencyReason === \"Equipment Malfunction\" &&\n                  \"Device failure or malfunction\"}\n                {emergencyReason === \"Urgent Situation\" &&\n                  \"Other urgent circumstances requiring unlock\"}\n                {emergencyReason === \"Other\" &&\n                  \"Custom reason with additional details\"}\n              </div>\n            </div>\n          </label>\n        ))}\n      </div>\n\n      {reason === \"Other\" && (\n        <div className=\"mb-6\">\n          <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n            Please specify the emergency reason:\n          </label>\n          <textarea\n            value={customReason}\n            onChange={(e) => setCustomReason(e.target.value)}\n            placeholder=\"Describe your emergency situation...\"\n            rows={3}\n            className=\"w-full p-3 rounded-lg border border-gray-600 bg-gray-800 text-white focus:border-red-500 focus:ring-1 focus:ring-red-500 resize-none\"\n            maxLength={500}\n          />\n          <div className=\"text-xs text-gray-400 mt-1\">\n            {customReason.length}/500 characters\n          </div>\n        </div>\n      )}\n\n      <div className=\"flex flex-col space-y-3\">\n        <button\n          onClick={() => setStage(\"confirm\")}\n          disabled={!canProceedFromReason}\n          className=\"w-full bg-red-600 hover:bg-red-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-bold py-3 px-4 rounded-lg transition flex items-center justify-center\"\n        >\n          Continue to Confirmation\n          <FaArrowRight className=\"ml-2\" />\n        </button>\n        <button\n          onClick={() => setStage(\"warning\")}\n          className=\"w-full bg-gray-600 hover:bg-gray-500 text-white font-bold py-3 px-4 rounded-lg transition\"\n        >\n          Back\n        </button>\n      </div>\n    </div>\n  );\n\n  const ConfirmationStage = () => (\n    <div>\n      <div className=\"flex items-center mb-6\">\n        <button\n          onClick={() => setStage(\"reason\")}\n          className=\"mr-3 p-1 text-gray-400 hover:text-white transition\"\n          aria-label=\"Go back\"\n        >\n          <FaArrowLeft />\n        </button>\n        <h3 className=\"text-xl font-bold text-red-300\">Final Confirmation</h3>\n      </div>\n\n      <div className=\"bg-yellow-900/30 border border-yellow-600 rounded-lg p-4 mb-6\">\n        <h4 className=\"font-semibold text-yellow-300 mb-2\">⚠️ Final Warning</h4>\n        <p className=\"text-sm text-yellow-200 mb-3\">\n          You are about to perform an emergency unlock. This action:\n        </p>\n        <ul className=\"text-sm text-yellow-200 space-y-1 mb-3\">\n          <li>• Will immediately end session #{sessionId.slice(-8)}</li>\n          <li>• Cannot be undone</li>\n          <li>• Will be permanently logged</li>\n          <li>\n            • Reason: <strong>{reason}</strong>\n          </li>\n        </ul>\n      </div>\n\n      <div className=\"mb-6\">\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          Type \"{requiredText}\" to confirm:\n        </label>\n        <input\n          ref={confirmInputRef}\n          type=\"text\"\n          value={confirmText}\n          onChange={(e) => setConfirmText(e.target.value.toUpperCase())}\n          placeholder={requiredText}\n          className={`w-full p-3 rounded-lg border bg-gray-800 text-white text-center font-mono text-lg tracking-widest focus:ring-2 transition ${\n            confirmText === requiredText\n              ? \"border-green-500 focus:ring-green-500\"\n              : \"border-gray-600 focus:ring-red-500\"\n          }`}\n          maxLength={requiredText.length}\n        />\n        <div className=\"text-xs text-gray-400 mt-1 text-center\">\n          {confirmText.length}/{requiredText.length} characters\n        </div>\n      </div>\n\n      <div className=\"flex flex-col space-y-3\">\n        <button\n          onClick={handleEmergencyUnlock}\n          disabled={!canConfirm || isSubmitting}\n          className=\"w-full bg-red-600 hover:bg-red-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-bold py-3 px-4 rounded-lg transition\"\n        >\n          {isSubmitting\n            ? \"Processing Emergency Unlock...\"\n            : \"🚨 EMERGENCY UNLOCK 🚨\"}\n        </button>\n        <button\n          onClick={() => setStage(\"reason\")}\n          disabled={isSubmitting}\n          className=\"w-full bg-gray-600 hover:bg-gray-500 disabled:bg-gray-600 text-white font-bold py-3 px-4 rounded-lg transition\"\n        >\n          Back to Reason Selection\n        </button>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"fixed inset-0 bg-black/75 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n      <div className=\"bg-gradient-to-br from-gray-900 to-gray-800 max-w-md w-full rounded-xl border-2 border-red-500 shadow-2xl\">\n        <div className=\"relative p-6\">\n          <button\n            onClick={onClose}\n            disabled={isSubmitting}\n            className=\"absolute top-4 right-4 text-gray-400 hover:text-white transition-colors disabled:cursor-not-allowed\"\n            aria-label=\"Close modal\"\n          >\n            <FaTimes size={20} />\n          </button>\n\n          {stage === \"warning\" && <WarningStage />}\n          {stage === \"reason\" && <ReasonStage />}\n          {stage === \"confirm\" && <ConfirmationStage />}\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tracker/GoalDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tracker/KeyholderRequirement.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tracker/PauseCooldownMessage.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tracker/PauseResumeButtons.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (79). Maximum allowed is 75.",
        "line": 89,
        "column": 47,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 172,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from \"react\";\nimport { usePauseResumeControls } from \"../../hooks/tracker/usePauseResumeControls\";\n\n// Temporary types until proper hook pattern is implemented\ntype EnhancedPauseReason = \"Bathroom Break\" | \"Emergency\" | \"Medical\" | \"Other\";\n\ntype PauseState = {\n  canPause: boolean;\n  lastPauseTime?: Date;\n  nextPauseAvailable?: Date;\n  cooldownRemaining?: number;\n};\n\n// PauseButton sub-component\ninterface PauseButtonProps {\n  canPause: boolean;\n  isLoading: boolean;\n  onPauseClick: () => void;\n  pauseButtonStyling: string;\n  pauseButtonText: string;\n}\n\nconst PauseButton: React.FC<PauseButtonProps> = ({\n  canPause,\n  isLoading,\n  onPauseClick,\n  pauseButtonStyling,\n  pauseButtonText,\n}) => (\n  <div className=\"flex justify-center mb-8\">\n    <button\n      type=\"button\"\n      onClick={onPauseClick}\n      disabled={!canPause || isLoading}\n      className={`glass-button font-bold py-3 px-6 shadow-lg transition-all duration-300 transform hover:scale-105 disabled:opacity-50 ${pauseButtonStyling}`}\n    >\n      ⏸️ {pauseButtonText}\n    </button>\n  </div>\n);\n\n// ResumeButton sub-component\ninterface ResumeButtonProps {\n  isLoading: boolean;\n  onResumeClick: () => void;\n}\n\nconst ResumeButton: React.FC<ResumeButtonProps> = ({\n  isLoading,\n  onResumeClick,\n}) => (\n  <div className=\"flex justify-center mb-8\">\n    <button\n      type=\"button\"\n      onClick={onResumeClick}\n      disabled={isLoading}\n      className=\"glass-button bg-gradient-to-r from-green-600/80 to-emerald-600/80 hover:from-green-500/90 hover:to-emerald-500/90 text-white font-bold py-3 px-6 shadow-lg hover:shadow-green-500/20 transition-all duration-300 transform hover:scale-105 disabled:opacity-50\"\n    >\n      ▶️ {isLoading ? \"Resuming...\" : \"Resume Session\"}\n    </button>\n  </div>\n);\n\n// CooldownDisplay sub-component\ninterface CooldownDisplayProps {\n  cooldownDisplay: string;\n}\n\nconst CooldownDisplay: React.FC<CooldownDisplayProps> = ({\n  cooldownDisplay,\n}) => (\n  <div className=\"text-sm text-yellow-600 mb-4 text-center\">\n    Next pause available in: {cooldownDisplay}\n  </div>\n);\n\n// PauseModal sub-component\ninterface PauseModalProps {\n  show: boolean;\n  selectedReason: EnhancedPauseReason;\n  customReason: string;\n  isLoading: boolean;\n  onReasonChange: (reason: EnhancedPauseReason) => void;\n  onCustomReasonChange: (reason: string) => void;\n  onConfirm: () => void;\n  onCancel: () => void;\n}\n\nconst PauseModal: React.FC<PauseModalProps> = ({\n  show,\n  selectedReason,\n  customReason,\n  isLoading,\n  onReasonChange,\n  onCustomReasonChange,\n  onConfirm,\n  onCancel,\n}) => {\n  if (!show) return null;\n\n  const reasons: EnhancedPauseReason[] = [\n    \"Bathroom Break\",\n    \"Emergency\",\n    \"Medical\",\n    \"Other\",\n  ];\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4\">\n      <div className=\"glass-morphism p-6 md:p-8 text-center w-full max-w-md text-gray-50 border border-yellow-700/30\">\n        <h3 className=\"text-lg md:text-xl font-bold mb-4 text-yellow-300\">\n          Reason for Pausing Session\n        </h3>\n\n        <div className=\"mb-4\">\n          <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n            Select reason:\n          </label>\n          <select\n            value={selectedReason}\n            onChange={(e) =>\n              onReasonChange(e.target.value as EnhancedPauseReason)\n            }\n            className=\"w-full p-2 rounded-lg border border-yellow-600/50 bg-gray-900/50 backdrop-blur-sm text-gray-50 focus:outline-none focus:ring-2 focus:ring-yellow-500\"\n          >\n            {reasons.map((reason) => (\n              <option key={reason} value={reason}>\n                {reason}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {selectedReason === \"Other\" && (\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Custom reason:\n            </label>\n            <input\n              type=\"text\"\n              value={customReason}\n              onChange={(e) => onCustomReasonChange(e.target.value)}\n              placeholder=\"Enter custom reason\"\n              className=\"w-full p-2 rounded-lg border border-yellow-600/50 bg-gray-900/50 backdrop-blur-sm text-gray-50 focus:outline-none focus:ring-2 focus:ring-yellow-500\"\n            />\n          </div>\n        )}\n\n        <div className=\"flex flex-col sm:flex-row justify-around space-y-3 sm:space-y-0 sm:space-x-4\">\n          <button\n            type=\"button\"\n            onClick={onConfirm}\n            disabled={\n              isLoading || (selectedReason === \"Other\" && !customReason.trim())\n            }\n            className=\"w-full sm:w-auto glass-button bg-gradient-to-r from-yellow-600/80 to-yellow-700/80 hover:from-yellow-500/90 hover:to-yellow-600/90 text-white font-bold py-2 px-4 transition-all duration-300 disabled:opacity-50\"\n          >\n            {isLoading ? \"Pausing...\" : \"Confirm Pause\"}\n          </button>\n          <button\n            type=\"button\"\n            onClick={onCancel}\n            disabled={isLoading}\n            className=\"w-full sm:w-auto glass-button bg-gradient-to-r from-gray-600/80 to-gray-700/80 hover:from-gray-500/90 hover:to-gray-600/90 text-white font-bold py-2 px-4 transition-all duration-300 disabled:opacity-50\"\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\ninterface PauseResumeButtonsProps {\n  sessionId: string;\n  userId: string;\n  isPaused: boolean;\n  pauseState?: PauseState;\n  onPause?: () => void;\n  onResume?: () => void;\n}\n\nexport const PauseResumeButtons: React.FC<PauseResumeButtonsProps> = ({\n  sessionId,\n  userId,\n  isPaused,\n  pauseState,\n  onPause,\n  onResume,\n}) => {\n  const {\n    buttonStates,\n    cooldownDisplay,\n    pauseButtonStyling,\n    pauseButtonText,\n    showPauseModal,\n    selectedReason,\n    customReason,\n    isLoading,\n    handlePauseClick,\n    handleResumeClick,\n    handleConfirmPause,\n    handleModalCancel,\n    setSelectedReason,\n    setCustomReason,\n  } = usePauseResumeControls({\n    sessionId,\n    userId,\n    isPaused,\n    pauseState,\n    onPause,\n    onResume,\n  });\n\n  return (\n    <>\n      {buttonStates.showResume && (\n        <ResumeButton isLoading={isLoading} onResumeClick={handleResumeClick} />\n      )}\n\n      {buttonStates.showPause && (\n        <PauseButton\n          canPause={buttonStates.canPause}\n          isLoading={isLoading}\n          onPauseClick={handlePauseClick}\n          pauseButtonStyling={pauseButtonStyling}\n          pauseButtonText={pauseButtonText}\n        />\n      )}\n\n      {buttonStates.showCooldown && (\n        <CooldownDisplay cooldownDisplay={cooldownDisplay} />\n      )}\n\n      <PauseModal\n        show={showPauseModal}\n        selectedReason={selectedReason}\n        customReason={customReason}\n        isLoading={isLoading}\n        onReasonChange={setSelectedReason}\n        onCustomReasonChange={setCustomReason}\n        onConfirm={handleConfirmPause}\n        onCancel={handleModalCancel}\n      />\n    </>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tracker/ReasonModals.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tracker/RestoreSessionPrompt.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tracker/SessionLoader.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tracker/SessionRecoveryModal.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (104). Maximum allowed is 75.",
        "line": 12,
        "column": 74,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 127,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from \"react\";\nimport { FaExclamationTriangle, FaClock, FaCalendarAlt } from \"react-icons/fa\";\nimport type { DBSession } from \"../../types/database\";\n\ninterface SessionRecoveryModalProps {\n  corruptedSession: DBSession;\n  onRecover: (session: DBSession) => void;\n  onDiscard: () => void;\n  isRecovering?: boolean;\n}\n\nexport const SessionRecoveryModal: React.FC<SessionRecoveryModalProps> = ({\n  corruptedSession,\n  onRecover,\n  onDiscard,\n  isRecovering = false,\n}) => {\n  const formatDuration = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n\n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  const calculateEstimatedDuration = (session: DBSession): number => {\n    const now = new Date();\n    const startTime = new Date(session.startTime);\n    const totalMs = now.getTime() - startTime.getTime();\n    const totalSeconds = Math.floor(totalMs / 1000);\n    return Math.max(0, totalSeconds - session.accumulatedPauseTime);\n  };\n\n  const estimatedDuration = calculateEstimatedDuration(corruptedSession);\n\n  return (\n    <div className=\"fixed inset-0 bg-black/75 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-gray-800 rounded-xl shadow-2xl p-6 max-w-md w-full border border-yellow-500\">\n        <div className=\"text-center mb-6\">\n          <FaExclamationTriangle className=\"text-yellow-400 text-4xl mx-auto mb-3\" />\n          <h3 className=\"text-xl font-bold text-yellow-300 mb-2\">\n            Session Recovery Required\n          </h3>\n          <p className=\"text-sm text-gray-300\">\n            We detected an interrupted session that may have corrupted data.\n            Would you like to attempt recovery?\n          </p>\n        </div>\n\n        <div className=\"bg-gray-700/50 rounded-lg p-4 mb-6 space-y-3\">\n          <div className=\"flex items-center text-sm text-gray-300\">\n            <FaCalendarAlt className=\"text-blue-400 mr-2\" />\n            <span className=\"font-medium\">Session Started:</span>\n            <span className=\"ml-2\">\n              {new Date(corruptedSession.startTime).toLocaleString()}\n            </span>\n          </div>\n\n          <div className=\"flex items-center text-sm text-gray-300\">\n            <FaClock className=\"text-green-400 mr-2\" />\n            <span className=\"font-medium\">Estimated Duration:</span>\n            <span className=\"ml-2\">{formatDuration(estimatedDuration)}</span>\n          </div>\n\n          {corruptedSession.isPaused && (\n            <div className=\"flex items-center text-sm text-yellow-300\">\n              <FaExclamationTriangle className=\"text-yellow-400 mr-2\" />\n              <span className=\"font-medium\">Status:</span>\n              <span className=\"ml-2\">Session was paused</span>\n            </div>\n          )}\n\n          {corruptedSession.accumulatedPauseTime > 0 && (\n            <div className=\"flex items-center text-sm text-gray-300\">\n              <FaClock className=\"text-orange-400 mr-2\" />\n              <span className=\"font-medium\">Total Pause Time:</span>\n              <span className=\"ml-2\">\n                {formatDuration(corruptedSession.accumulatedPauseTime)}\n              </span>\n            </div>\n          )}\n        </div>\n\n        <div className=\"bg-yellow-900/30 border border-yellow-600 rounded-lg p-3 mb-6\">\n          <p className=\"text-xs text-yellow-200\">\n            <strong>Recovery Process:</strong> We'll attempt to fix any data\n            inconsistencies while preserving your session progress. Your session\n            timing and pause history will be validated and corrected if\n            necessary.\n          </p>\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row gap-3\">\n          <button\n            onClick={() => onRecover(corruptedSession)}\n            disabled={isRecovering}\n            className=\"flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-800 disabled:opacity-50 text-white font-semibold py-3 px-4 rounded-lg transition flex items-center justify-center\"\n          >\n            {isRecovering ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                Recovering...\n              </>\n            ) : (\n              \"Recover Session\"\n            )}\n          </button>\n\n          <button\n            onClick={onDiscard}\n            disabled={isRecovering}\n            className=\"flex-1 bg-gray-600 hover:bg-gray-500 disabled:bg-gray-700 disabled:opacity-50 text-white font-semibold py-3 px-4 rounded-lg transition\"\n          >\n            Discard Session\n          </button>\n        </div>\n\n        <p className=\"text-xs text-gray-500 text-center mt-4\">\n          If recovery fails, you can always start a new session. Your session\n          history will be preserved.\n        </p>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tracker/TrackerHeader.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/tracker/TrackerStats.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (99). Maximum allowed is 75.",
        "line": 22,
        "column": 58,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 124,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from \"react\";\nimport { formatElapsedTime } from \"../../utils\";\nimport type { DBSession } from \"../../types/database\";\nimport { useTrackerStats } from \"../../hooks/tracker/useTrackerStats\";\n\ninterface TrackerStatsProps {\n  // New props for real-time timer\n  currentSession?: DBSession | null;\n  // Legacy props for backward compatibility\n  topBoxLabel?: string;\n  topBoxTime?: string;\n  mainChastityDisplayTime?: number;\n  isPaused?: boolean;\n  livePauseDuration?: number;\n  accumulatedPauseTimeThisSession?: number;\n  isCageOn?: boolean;\n  timeCageOff?: number;\n  totalChastityTime?: number;\n  totalTimeCageOff?: number;\n}\n\nexport const TrackerStats: React.FC<TrackerStatsProps> = (props) => {\n  const { displayData, stats } = useTrackerStats(props);\n\n  return (\n    <div className=\"space-y-6 mb-8\">\n      {/* Top stat card with enhanced glass effect */}\n      <div className=\"glass-card-primary text-center glass-float\">\n        <p className=\"text-blue-200 text-sm md:text-lg font-medium mb-2\">\n          {stats.topBoxLabel}\n        </p>\n        <p className=\"text-3xl md:text-5xl font-bold bg-gradient-to-r from-blue-200 to-white bg-clip-text text-transparent\">\n          {stats.totalElapsedFormatted}\n        </p>\n      </div>\n\n      {/* Stats grid with enhanced glass cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\n        <div\n          className={`glass-card transition-all duration-500 ${\n            displayData.isActive\n              ? displayData.isPaused\n                ? \"glass-card-accent border-yellow-400/30 shadow-yellow-400/20\"\n                : \"border-green-400/30 shadow-green-400/20\"\n              : \"glass-card-primary\"\n          }`}\n        >\n          <p className=\"text-sm md:text-lg font-medium mb-3 text-gray-200\">\n            Current Session In Chastity {displayData.isPaused ? \"(Paused)\" : \"\"}\n            :\n          </p>\n          <p\n            className={`text-2xl md:text-4xl font-bold mb-2 ${\n              displayData.isActive\n                ? displayData.isPaused\n                  ? \"text-yellow-300\"\n                  : \"text-green-300\"\n                : \"text-white\"\n            }`}\n          >\n            {stats.currentSessionFormatted}\n          </p>\n          {displayData.isPaused && (\n            <p className=\"text-xs text-yellow-200 bg-yellow-400/10 px-2 py-1 rounded-md\">\n              Currently paused for: {displayData.currentPauseDuration}\n            </p>\n          )}\n          {displayData.isActive &&\n            (props.currentSession\n              ? props.currentSession.accumulatedPauseTime > 0\n              : props.accumulatedPauseTimeThisSession! > 0) && (\n              <p className=\"text-xs text-yellow-200 bg-yellow-400/10 px-2 py-1 rounded-md mt-2\">\n                Total time paused this session:{\" \"}\n                {props.currentSession\n                  ? formatElapsedTime(props.currentSession.accumulatedPauseTime)\n                  : displayData.accumulatedPause}\n              </p>\n            )}\n        </div>\n\n        <div\n          className={`glass-card transition-all duration-500 ${\n            !displayData.isActive && props.timeCageOff! > 0\n              ? \"border-red-400/30 shadow-red-400/20\"\n              : \"glass-card-primary\"\n          }`}\n        >\n          <p className=\"text-sm md:text-lg font-medium mb-3 text-gray-200\">\n            Current Session Cage Off:\n          </p>\n          <p\n            className={`text-2xl md:text-4xl font-bold ${\n              !displayData.isActive && props.timeCageOff! > 0\n                ? \"text-red-300\"\n                : \"text-white\"\n            }`}\n          >\n            {stats.cageOffTimeFormatted}\n          </p>\n        </div>\n      </div>\n\n      {/* Total stats with subtle glass cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\n        <div className=\"glass-card glass-hover\">\n          <p className=\"text-sm md:text-lg font-medium mb-3 text-gray-200\">\n            Total Time In Chastity:\n          </p>\n          <p className=\"text-2xl md:text-4xl font-bold text-white\">\n            {stats.totalChastityTimeFormatted}\n          </p>\n        </div>\n        <div className=\"glass-card glass-hover\">\n          <p className=\"text-sm md:text-lg font-medium mb-3 text-gray-200\">\n            Total Time Cage Off:\n          </p>\n          <p className=\"text-2xl md:text-4xl font-bold text-white\">\n            {stats.totalCageOffTimeFormatted}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/components/ui/NotificationContainer.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (82). Maximum allowed is 75.",
        "line": 10,
        "column": 54,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 91,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (120). Maximum allowed is 75.",
        "line": 93,
        "column": 41,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 221,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * NotificationContainer Component\n * Displays toast notifications using NotificationStore\n */\nimport React from \"react\";\nimport { useNotificationStore } from \"../../stores\";\nimport { Notification } from \"../../stores/notificationStore\";\n\n// Simple icons for notification types\nconst NotificationIcon: React.FC<{ type: string }> = ({ type }) => {\n  switch (type) {\n    case \"success\":\n      return (\n        <svg\n          className=\"w-5 h-5 text-green-400\"\n          fill=\"currentColor\"\n          viewBox=\"0 0 20 20\"\n        >\n          <path\n            fillRule=\"evenodd\"\n            d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\n            clipRule=\"evenodd\"\n          />\n        </svg>\n      );\n    case \"error\":\n      return (\n        <svg\n          className=\"w-5 h-5 text-red-400\"\n          fill=\"currentColor\"\n          viewBox=\"0 0 20 20\"\n        >\n          <path\n            fillRule=\"evenodd\"\n            d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\n            clipRule=\"evenodd\"\n          />\n        </svg>\n      );\n    case \"warning\":\n      return (\n        <svg\n          className=\"w-5 h-5 text-yellow-400\"\n          fill=\"currentColor\"\n          viewBox=\"0 0 20 20\"\n        >\n          <path\n            fillRule=\"evenodd\"\n            d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\"\n            clipRule=\"evenodd\"\n          />\n        </svg>\n      );\n    case \"loading\":\n      return (\n        <svg\n          className=\"animate-spin w-5 h-5 text-blue-400\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n        >\n          <circle\n            className=\"opacity-25\"\n            cx=\"12\"\n            cy=\"12\"\n            r=\"10\"\n            stroke=\"currentColor\"\n            strokeWidth=\"4\"\n          ></circle>\n          <path\n            className=\"opacity-75\"\n            fill=\"currentColor\"\n            d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n          ></path>\n        </svg>\n      );\n    default:\n      return (\n        <svg\n          className=\"w-5 h-5 text-blue-400\"\n          fill=\"currentColor\"\n          viewBox=\"0 0 20 20\"\n        >\n          <path\n            fillRule=\"evenodd\"\n            d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\"\n            clipRule=\"evenodd\"\n          />\n        </svg>\n      );\n  }\n};\n\nconst NotificationContainer: React.FC = () => {\n  // Selective subscriptions for specific notification store values\n  const notifications = useNotificationStore((state) => state.notifications);\n  const removeNotification = useNotificationStore(\n    (state) => state.removeNotification,\n  );\n  const pauseOnHover = useNotificationStore((state) => state.pauseOnHover);\n\n  // Group notifications by position\n  const notificationsByPosition = notifications.reduce(\n    (acc: Record<string, Notification[]>, notification: Notification) => {\n      const position = notification.position || \"top-right\";\n      if (!acc[position]) {\n        acc[position] = [];\n      }\n      acc[position].push(notification);\n      return acc;\n    },\n    {} as Record<string, Notification[]>,\n  );\n\n  const getPositionClasses = (position: string) => {\n    switch (position) {\n      case \"top-left\":\n        return \"top-4 left-4\";\n      case \"top-center\":\n        return \"top-4 left-1/2 transform -translate-x-1/2\";\n      case \"top-right\":\n        return \"top-4 right-4\";\n      case \"bottom-left\":\n        return \"bottom-4 left-4\";\n      case \"bottom-center\":\n        return \"bottom-4 left-1/2 transform -translate-x-1/2\";\n      case \"bottom-right\":\n        return \"bottom-4 right-4\";\n      default:\n        return \"top-4 right-4\";\n    }\n  };\n\n  const getTypeClasses = (type: string) => {\n    switch (type) {\n      case \"success\":\n        return \"bg-green-50 border-green-200 text-green-800\";\n      case \"error\":\n        return \"bg-red-50 border-red-200 text-red-800\";\n      case \"warning\":\n        return \"bg-yellow-50 border-yellow-200 text-yellow-800\";\n      case \"loading\":\n        return \"bg-blue-50 border-blue-200 text-blue-800\";\n      default:\n        return \"bg-blue-50 border-blue-200 text-blue-800\";\n    }\n  };\n\n  return (\n    <>\n      {Object.entries(notificationsByPosition).map(\n        ([position, positionNotifications]) => (\n          <div\n            key={position}\n            className={`fixed z-50 ${getPositionClasses(position)} space-y-2 max-w-sm w-full`}\n          >\n            {positionNotifications.map((notification: Notification) => (\n              <div\n                key={notification.id}\n                className={`\n                flex items-start p-4 border rounded-lg shadow-lg backdrop-blur-sm\n                ${getTypeClasses(notification.type)}\n                ${pauseOnHover ? \"hover:shadow-xl transition-shadow\" : \"\"}\n              `}\n                role=\"alert\"\n              >\n                <div className=\"flex-shrink-0\">\n                  <NotificationIcon type={notification.type} />\n                </div>\n\n                <div className=\"ml-3 flex-1\">\n                  {notification.title && (\n                    <h4 className=\"text-sm font-medium mb-1\">\n                      {notification.title}\n                    </h4>\n                  )}\n                  <p className=\"text-sm\">{notification.message}</p>\n\n                  {notification.action && (\n                    <div className=\"mt-3\">\n                      <button\n                        onClick={() => {\n                          notification.action!.onClick();\n                          if (notification.dismissible !== false) {\n                            removeNotification(notification.id);\n                          }\n                        }}\n                        className=\"text-xs px-2 py-1 rounded border border-purple-300 text-purple-700 hover:bg-purple-100 transition-colors\"\n                      >\n                        {notification.action.label}\n                      </button>\n                    </div>\n                  )}\n                </div>\n\n                {notification.dismissible !== false && (\n                  <button\n                    onClick={() => removeNotification(notification.id)}\n                    className=\"ml-2 flex-shrink-0 text-gray-400 hover:text-gray-600 transition-colors\"\n                    aria-label=\"Dismiss notification\"\n                  >\n                    <svg\n                      className=\"w-4 h-4\"\n                      fill=\"currentColor\"\n                      viewBox=\"0 0 20 20\"\n                    >\n                      <path\n                        fillRule=\"evenodd\"\n                        d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\n                        clipRule=\"evenodd\"\n                      />\n                    </svg>\n                  </button>\n                )}\n              </div>\n            ))}\n          </div>\n        ),\n      )}\n    </>\n  );\n};\n\nexport default NotificationContainer;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/constants/achievements.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/constants/achievements/consistency-achievements.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/constants/achievements/goal-achievements.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/constants/achievements/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/constants/achievements/milestone-achievements.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/constants/achievements/special-achievements.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/constants/achievements/streak-achievements.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/constants/achievements/task-achievements.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/constants/challengeAchievements.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/contexts/AppContext.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (152). Maximum allowed is 75.",
        "line": 59,
        "column": 56,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 256,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Application Context\n * Manages global app-level state (non-auth, non-UI)\n * Context layer - App state like connection status, sync status, etc.\n */\nimport React, {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  ReactNode,\n} from \"react\";\nimport { firebaseSync } from \"../services/sync\";\nimport { preloadCriticalServices } from \"../services/firebase\";\nimport { achievementIntegration } from \"../services/AchievementIntegration\";\nimport { serviceLogger } from \"../utils/logging\";\nimport { db } from \"../services/database\";\nimport type { SyncStatus } from \"../types/database\";\n\n// Extend Navigator interface for connection API\ninterface NavigatorWithConnection extends Navigator {\n  connection?: {\n    effectiveType: string;\n    addEventListener: (event: string, callback: () => void) => void;\n    removeEventListener: (event: string, callback: () => void) => void;\n  };\n}\n\nconst logger = serviceLogger(\"AppContext\");\n\nexport interface AppState {\n  isInitialized: boolean;\n  isOnline: boolean;\n  syncStatus: SyncStatus | null;\n  lastSyncTime: Date | null;\n  hasUnreadNotifications: boolean;\n  connectionType: string | null;\n  sessionPersistenceReady: boolean;\n}\n\nexport interface AppActions {\n  initializeApp: () => Promise<void>;\n  triggerSync: (userId: string) => Promise<void>;\n  markNotificationsRead: () => void;\n  updateConnectionStatus: (isOnline: boolean) => void;\n}\n\nexport interface AppContextType {\n  state: AppState;\n  actions: AppActions;\n}\n\nconst AppContext = createContext<AppContextType | null>(null);\n\ninterface AppProviderProps {\n  children: ReactNode;\n}\n\nexport const AppProvider: React.FC<AppProviderProps> = ({ children }) => {\n  const [state, setState] = useState<AppState>({\n    isInitialized: false,\n    isOnline: navigator.onLine,\n    syncStatus: null,\n    lastSyncTime: null,\n    hasUnreadNotifications: false,\n    connectionType: null,\n    sessionPersistenceReady: false,\n  });\n\n  // Initialize app on mount\n  useEffect(() => {\n    const initializeApp = async () => {\n      try {\n        logger.info(\"Initializing application\");\n\n        // Initialize Dexie database first\n        await db.initialize();\n        logger.info(\"Dexie database initialized\");\n\n        // Preload critical Firebase services\n        await preloadCriticalServices();\n\n        // Initialize achievement system\n        await achievementIntegration.initialize();\n\n        // Initialize session persistence service\n        // The service initializes automatically as a singleton\n        logger.info(\"Session persistence service ready\");\n        setState((prev) => ({ ...prev, sessionPersistenceReady: true }));\n\n        // Initialize sync service\n        // FirebaseSync initializes automatically\n\n        // Set initial sync status\n        const syncStatus = \"synced\" as SyncStatus;\n\n        // Detect connection type\n        const connection = (navigator as NavigatorWithConnection).connection;\n        const connectionType = connection?.effectiveType || \"unknown\";\n\n        setState((prev) => ({\n          ...prev,\n          isInitialized: true,\n          syncStatus,\n          connectionType,\n        }));\n\n        logger.info(\"Application initialized successfully\", { connectionType });\n      } catch (error) {\n        logger.error(\"Failed to initialize application\", {\n          error: error as Error,\n        });\n        setState((prev) => ({\n          ...prev,\n          isInitialized: false,\n        }));\n      }\n    };\n\n    initializeApp();\n\n    // Listen for online/offline events\n    const handleOnline = () => {\n      setState((prev) => ({ ...prev, isOnline: true }));\n      logger.debug(\"App went online\");\n    };\n\n    const handleOffline = () => {\n      setState((prev) => ({ ...prev, isOnline: false }));\n      logger.debug(\"App went offline\");\n    };\n\n    window.addEventListener(\"online\", handleOnline);\n    window.addEventListener(\"offline\", handleOffline);\n\n    // Listen for connection changes\n    const handleConnectionChange = () => {\n      const connection = (navigator as NavigatorWithConnection).connection;\n      if (connection) {\n        setState((prev) => ({\n          ...prev,\n          connectionType: connection.effectiveType || \"unknown\",\n        }));\n        logger.debug(\"Connection type changed\", {\n          type: connection.effectiveType,\n        });\n      }\n    };\n\n    if (\"connection\" in navigator) {\n      (navigator as NavigatorWithConnection).connection?.addEventListener(\n        \"change\",\n        handleConnectionChange,\n      );\n    }\n\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n\n      if (\"connection\" in navigator) {\n        (navigator as NavigatorWithConnection).connection?.removeEventListener(\n          \"change\",\n          handleConnectionChange,\n        );\n      }\n    };\n  }, []);\n\n  const actions: AppActions = {\n    initializeApp: async () => {\n      if (state.isInitialized) {\n        logger.debug(\"App already initialized, skipping\");\n        return;\n      }\n\n      setState((prev) => ({ ...prev, isInitialized: false }));\n\n      try {\n        // Initialize Dexie database first\n        await db.initialize();\n        logger.info(\"Dexie database re-initialized\");\n\n        await preloadCriticalServices();\n        // FirebaseSync initializes automatically\n\n        const syncStatus = \"synced\" as SyncStatus;\n\n        setState((prev) => ({\n          ...prev,\n          isInitialized: true,\n          syncStatus,\n        }));\n\n        logger.info(\"App re-initialized successfully\");\n      } catch (error) {\n        logger.error(\"Failed to re-initialize app\", { error: error as Error });\n      }\n    },\n\n    triggerSync: async (userId: string) => {\n      logger.debug(\"Triggering manual sync\", { userId });\n\n      try {\n        await firebaseSync.sync();\n        const result = {\n          success: true,\n          data: {\n            syncStatus: \"synced\" as SyncStatus,\n            lastSyncTime: new Date(),\n          },\n        };\n\n        if (result.success && result.data) {\n          setState((prev) => ({\n            ...prev,\n            syncStatus: result.data.syncStatus,\n            lastSyncTime: result.data.lastSyncTime,\n          }));\n          logger.info(\"Manual sync completed\", { userId });\n        }\n      } catch (error) {\n        const result = {\n          success: false,\n          error: error instanceof Error ? error.message : \"Sync failed\",\n        };\n        logger.warn(\"Manual sync failed\", { userId, error: result.error });\n      }\n    },\n\n    markNotificationsRead: () => {\n      setState((prev) => ({\n        ...prev,\n        hasUnreadNotifications: false,\n      }));\n      logger.debug(\"Notifications marked as read\");\n    },\n\n    updateConnectionStatus: (isOnline: boolean) => {\n      setState((prev) => ({\n        ...prev,\n        isOnline,\n      }));\n      logger.debug(\"Connection status updated\", { isOnline });\n    },\n  };\n\n  const contextValue: AppContextType = {\n    state,\n    actions,\n  };\n\n  return (\n    <AppContext.Provider value={contextValue}>{children}</AppContext.Provider>\n  );\n};\n\nexport const useApp = (): AppContextType => {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error(\"useApp must be used within an AppProvider\");\n  }\n  return context;\n};\n\n// Convenience hooks for common use cases\nexport const useAppState = () => {\n  const { state } = useApp();\n  return state;\n};\n\nexport const useAppActions = () => {\n  const { actions } = useApp();\n  return actions;\n};\n\nexport const useConnectionStatus = () => {\n  const { state } = useApp();\n  return {\n    isOnline: state.isOnline,\n    connectionType: state.connectionType,\n  };\n};\n\nexport const useSyncStatus = () => {\n  const { state, actions } = useApp();\n  return {\n    syncStatus: state.syncStatus,\n    lastSyncTime: state.lastSyncTime,\n    triggerSync: actions.triggerSync,\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/contexts/AuthContext.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (214). Maximum allowed is 75.",
        "line": 52,
        "column": 58,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 307,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Authentication Context\n * Manages auth state using the AuthService\n * Context layer - React state management for authentication\n */\nimport React, {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  ReactNode,\n} from \"react\";\nimport { AuthService } from \"@/services/auth/auth-service\";\nimport { getFirebaseAuth } from \"@/services/firebase\";\nimport { User, LoginForm, RegisterForm, ApiResponse } from \"@/types\";\nimport { serviceLogger } from \"@/utils/logging\";\n\nconst logger = serviceLogger(\"AuthContext\");\n\nexport interface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport interface AuthActions {\n  signIn: (credentials: LoginForm) => Promise<ApiResponse<User>>;\n  register: (userData: RegisterForm) => Promise<ApiResponse<User>>;\n  signOut: () => Promise<ApiResponse<void>>;\n  resetPassword: (email: string) => Promise<ApiResponse<void>>;\n  updatePassword: (newPassword: string) => Promise<ApiResponse<void>>;\n  updateProfile: (updates: Partial<User>) => Promise<ApiResponse<User>>;\n  clearError: () => void;\n}\n\nexport interface AuthContextType {\n  state: AuthState;\n  actions: AuthActions;\n  // Direct access properties for backwards compatibility\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [state, setState] = useState<AuthState>({\n    user: null,\n    isAuthenticated: false,\n    isLoading: true,\n    error: null,\n  });\n\n  // Initialize auth state on mount\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        logger.debug(\"Initializing auth state\");\n\n        const auth = await getFirebaseAuth();\n\n        // Check if user is already authenticated\n        const currentUser = await AuthService.getCurrentUser();\n\n        if (currentUser) {\n          setState({\n            user: currentUser,\n            isAuthenticated: true,\n            isLoading: false,\n            error: null,\n          });\n          logger.info(\"User already authenticated\", { uid: currentUser.uid });\n        } else {\n          setState((prev) => ({\n            ...prev,\n            isLoading: false,\n          }));\n          logger.debug(\"No authenticated user found\");\n        }\n\n        // Listen for auth state changes\n        const unsubscribe = auth.onAuthStateChanged(async (firebaseUser) => {\n          if (firebaseUser) {\n            logger.debug(\"Firebase auth state changed: user signed in\", {\n              uid: firebaseUser.uid,\n            });\n\n            // Get full user profile from our service\n            const user = await AuthService.getCurrentUser();\n            if (user) {\n              setState({\n                user,\n                isAuthenticated: true,\n                isLoading: false,\n                error: null,\n              });\n            }\n          } else {\n            logger.debug(\"Firebase auth state changed: user signed out\");\n            setState({\n              user: null,\n              isAuthenticated: false,\n              isLoading: false,\n              error: null,\n            });\n          }\n        });\n\n        return unsubscribe;\n      } catch (error) {\n        logger.error(\"Failed to initialize auth\", { error: error as Error });\n        setState({\n          user: null,\n          isAuthenticated: false,\n          isLoading: false,\n          error: \"Failed to initialize authentication\",\n        });\n        return undefined;\n      }\n    };\n\n    const unsubscribePromise = initializeAuth();\n\n    return () => {\n      unsubscribePromise.then((unsubscribe) => {\n        if (unsubscribe) {\n          unsubscribe();\n        }\n      });\n    };\n  }, []);\n\n  const actions: AuthActions = {\n    signIn: async (credentials: LoginForm) => {\n      setState((prev) => ({ ...prev, isLoading: true, error: null }));\n\n      const result = await AuthService.signIn(credentials);\n\n      if (result.success && result.data) {\n        setState({\n          user: result.data,\n          isAuthenticated: true,\n          isLoading: false,\n          error: null,\n        });\n        logger.info(\"User signed in via context\", { uid: result.data.uid });\n      } else {\n        setState((prev) => ({\n          ...prev,\n          isLoading: false,\n          error: result.error || \"Sign in failed\",\n        }));\n        logger.warn(\"Sign in failed via context\", { error: result.error });\n      }\n\n      return result;\n    },\n\n    register: async (userData: RegisterForm) => {\n      setState((prev) => ({ ...prev, isLoading: true, error: null }));\n\n      const result = await AuthService.register(userData);\n\n      if (result.success && result.data) {\n        setState({\n          user: result.data,\n          isAuthenticated: true,\n          isLoading: false,\n          error: null,\n        });\n        logger.info(\"User registered via context\", { uid: result.data.uid });\n      } else {\n        setState((prev) => ({\n          ...prev,\n          isLoading: false,\n          error: result.error || \"Registration failed\",\n        }));\n        logger.warn(\"Registration failed via context\", { error: result.error });\n      }\n\n      return result;\n    },\n\n    signOut: async () => {\n      setState((prev) => ({ ...prev, isLoading: true, error: null }));\n\n      const result = await AuthService.signOut();\n\n      if (result.success) {\n        setState({\n          user: null,\n          isAuthenticated: false,\n          isLoading: false,\n          error: null,\n        });\n        logger.info(\"User signed out via context\");\n      } else {\n        setState((prev) => ({\n          ...prev,\n          isLoading: false,\n          error: result.error || \"Sign out failed\",\n        }));\n        logger.warn(\"Sign out failed via context\", { error: result.error });\n      }\n\n      return result;\n    },\n\n    resetPassword: async (email: string) => {\n      setState((prev) => ({ ...prev, error: null }));\n\n      const result = await AuthService.resetPassword(email);\n\n      if (!result.success) {\n        setState((prev) => ({\n          ...prev,\n          error: result.error || \"Password reset failed\",\n        }));\n        logger.warn(\"Password reset failed via context\", {\n          error: result.error,\n          email,\n        });\n      } else {\n        logger.info(\"Password reset sent via context\", { email });\n      }\n\n      return result;\n    },\n\n    updatePassword: async (newPassword: string) => {\n      setState((prev) => ({ ...prev, error: null }));\n\n      const result = await AuthService.updatePassword(newPassword);\n\n      if (!result.success) {\n        setState((prev) => ({\n          ...prev,\n          error: result.error || \"Password update failed\",\n        }));\n        logger.warn(\"Password update failed via context\", {\n          error: result.error,\n        });\n      } else {\n        logger.info(\"Password updated via context\");\n      }\n\n      return result;\n    },\n\n    updateProfile: async (updates: Partial<User>) => {\n      if (!state.user) {\n        const error = \"No authenticated user found\";\n        setState((prev) => ({ ...prev, error }));\n        return { success: false, error };\n      }\n\n      setState((prev) => ({ ...prev, error: null }));\n\n      const result = await AuthService.updateUserProfile(\n        state.user.uid,\n        updates,\n      );\n\n      if (result.success && result.data) {\n        setState((prev) => ({\n          ...prev,\n          user: result.data!,\n        }));\n        logger.info(\"Profile updated via context\", { uid: state.user.uid });\n      } else {\n        setState((prev) => ({\n          ...prev,\n          error: result.error || \"Profile update failed\",\n        }));\n        logger.warn(\"Profile update failed via context\", {\n          error: result.error,\n          uid: state.user.uid,\n        });\n      }\n\n      return result;\n    },\n\n    clearError: () => {\n      setState((prev) => ({ ...prev, error: null }));\n    },\n  };\n\n  const contextValue: AuthContextType = {\n    state,\n    actions,\n    // Direct access properties for backwards compatibility\n    user: state.user,\n    isAuthenticated: state.isAuthenticated,\n    isLoading: state.isLoading,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\n// Convenience hooks for common use cases\nexport const useAuthState = () => {\n  const { state } = useAuth();\n  return state;\n};\n\nexport const useAuthActions = () => {\n  const { actions } = useAuth();\n  return actions;\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/contexts/SyncContext.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (87). Maximum allowed is 75.",
        "line": 37,
        "column": 58,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 147,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "zustand-safe-patterns/zustand-no-store-actions-in-deps",
        "severity": 2,
        "message": "Dangerous pattern: Store action in useEffect dependency array! This causes React error #185 infinite render loops. Zustand store actions are stable and should not be in dependency arrays. Remove store actions from the dependency array to fix this issue.",
        "line": 81,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "noStoreActionsInDeps",
        "endLine": 81,
        "endColumn": 19,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Sync Context\n * Provides sync state and conflict resolution across the app\n */\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useSync } from \"@/hooks/useSync\";\nimport { useAuth } from \"@/hooks/api/useAuth\";\nimport { ConflictResolutionModal } from \"@/components/common/ConflictResolutionModal\";\nimport type { ConflictInfo } from \"@/types/database\";\nimport { serviceLogger } from \"@/utils/logging\";\n\nconst logger = serviceLogger(\"SyncContext\");\n\ninterface SyncContextType {\n  isSyncing: boolean;\n  lastSyncTime: Date | null;\n  syncStatus: \"synced\" | \"pending\" | \"conflict\" | \"error\";\n  pendingConflicts: ConflictInfo[];\n  triggerSync: () => Promise<void>;\n  hasConflicts: boolean;\n}\n\nconst SyncContext = createContext<SyncContextType | undefined>(undefined);\n\nexport const useSyncContext = (): SyncContextType => {\n  const context = useContext(SyncContext);\n  if (!context) {\n    throw new Error(\"useSyncContext must be used within SyncProvider\");\n  }\n  return context;\n};\n\ninterface SyncProviderProps {\n  children: React.ReactNode;\n}\n\nexport const SyncProvider: React.FC<SyncProviderProps> = ({ children }) => {\n  const { data: user } = useAuth();\n  const userId = user?.uid;\n  const {\n    isSyncing,\n    lastSyncResult: _lastSyncResult,\n    pendingConflicts,\n    sync,\n    resolveConflicts,\n    error,\n  } = useSync();\n\n  const [showConflictModal, setShowConflictModal] = useState(false);\n  const [lastSyncTime, setLastSyncTime] = useState<Date | null>(null);\n\n  // Determine sync status\n  const getSyncStatus = (): SyncContextType[\"syncStatus\"] => {\n    if (error) return \"error\";\n    if (pendingConflicts.length > 0) return \"conflict\";\n    if (isSyncing) return \"pending\";\n    return \"synced\";\n  };\n\n  // Auto-sync on user change and periodically\n  useEffect(() => {\n    if (!userId) return;\n\n    const performSync = async () => {\n      try {\n        await sync(userId, { conflictResolution: \"auto\" });\n        setLastSyncTime(new Date());\n      } catch (error) {\n        logger.error(\"Auto-sync failed\", { error: error as Error });\n      }\n    };\n\n    // Initial sync\n    performSync();\n\n    // Periodic sync every 5 minutes\n    const interval = setInterval(performSync, 5 * 60 * 1000);\n\n    return () => clearInterval(interval);\n    // eslint-disable-next-line zustand-safe-patterns/zustand-no-store-actions-in-deps\n  }, [userId, sync]);\n\n  // Show conflict modal when conflicts are detected\n  useEffect(() => {\n    if (pendingConflicts.length > 0 && !showConflictModal) {\n      setShowConflictModal(true);\n    }\n  }, [pendingConflicts.length, showConflictModal]);\n\n  const triggerSync = async (): Promise<void> => {\n    if (!userId) {\n      throw new Error(\"No user authenticated\");\n    }\n\n    try {\n      await sync(userId, { force: true });\n      setLastSyncTime(new Date());\n    } catch (error) {\n      logger.error(\"Manual sync failed\", { error: error as Error });\n      throw error;\n    }\n  };\n\n  const handleResolveConflicts = async (\n    resolutions: Record<string, \"local\" | \"remote\">,\n  ) => {\n    try {\n      await resolveConflicts(resolutions);\n      setShowConflictModal(false);\n\n      // Trigger a sync after resolving conflicts\n      if (userId) {\n        await sync(userId);\n        setLastSyncTime(new Date());\n      }\n    } catch (error) {\n      logger.error(\"Failed to resolve conflicts\", { error: error as Error });\n    }\n  };\n\n  const handleCancelConflictResolution = () => {\n    setShowConflictModal(false);\n    // Conflicts remain pending - user can resolve them later\n  };\n\n  const contextValue: SyncContextType = {\n    isSyncing,\n    lastSyncTime,\n    syncStatus: getSyncStatus(),\n    pendingConflicts,\n    triggerSync,\n    hasConflicts: pendingConflicts.length > 0,\n  };\n\n  return (\n    <SyncContext.Provider value={contextValue}>\n      {children}\n\n      <ConflictResolutionModal\n        conflicts={pendingConflicts}\n        onResolve={handleResolveConflicts}\n        onCancel={handleCancelConflictResolution}\n        isOpen={showConflictModal}\n      />\n    </SyncContext.Provider>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/contexts/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/account-linking/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/account-linking/useAccountLinking.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (270). Maximum allowed is 75.",
        "line": 30,
        "column": 34,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 349,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Account Linking Hook\n * React hook for managing keyholder-wearer account linking\n */\nimport { useState, useCallback, useEffect, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { AccountLinkingService } from \"../../services/auth/account-linking\";\nimport { useAuthState } from \"../../contexts\";\nimport {\n  LinkCodeResponse,\n  AdminRelationship,\n  AdminSession,\n  GenerateLinkCodeRequest,\n  UseLinkCodeRequest,\n  UpdateRelationshipRequest,\n  AccountLinkingState,\n} from \"../../types/account-linking\";\nimport { ApiResponse } from \"../../types\";\nimport { serviceLogger } from \"../../utils/logging\";\n\nconst logger = serviceLogger(\"useAccountLinking\");\n\n// Query keys\nconst QUERY_KEYS = {\n  relationships: (userId: string) => [\"adminRelationships\", userId],\n  validation: (code: string) => [\"linkCodeValidation\", code],\n  adminSession: (relationshipId: string) => [\"adminSession\", relationshipId],\n} as const;\n\nexport const useAccountLinking = () => {\n  const { user } = useAuthState();\n  const queryClient = useQueryClient();\n\n  // Local state\n  const [state, setState] = useState<AccountLinkingState>({\n    isGeneratingCode: false,\n    currentLinkCode: null,\n    linkCodeError: null,\n    isUsingCode: false,\n    codeUsageError: null,\n    adminRelationships: [],\n    selectedWearerId: null,\n    currentAdminSession: null,\n    isAdminSessionActive: false,\n    showQRCode: false,\n    showDisconnectionDialog: false,\n    showPermissionEditor: false,\n  });\n\n  // ==================== QUERIES ====================\n\n  // Get admin relationships for current user\n  const {\n    data: relationships = [],\n    isLoading: isLoadingRelationships,\n    error: relationshipsError,\n  } = useQuery({\n    queryKey: QUERY_KEYS.relationships(user?.uid || \"\"),\n    queryFn: () => AccountLinkingService.getAdminRelationships(user!.uid),\n    enabled: !!user,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Update local state when relationships change\n  useEffect(() => {\n    setState((prev) => ({ ...prev, adminRelationships: relationships }));\n  }, [relationships]);\n\n  // ==================== MUTATIONS ====================\n\n  // Generate link code\n  const generateLinkCodeMutation = useMutation({\n    mutationFn: (request: GenerateLinkCodeRequest) =>\n      AccountLinkingService.generateLinkCode(request),\n    onMutate: () => {\n      setState((prev) => ({\n        ...prev,\n        isGeneratingCode: true,\n        linkCodeError: null,\n      }));\n    },\n    onSuccess: (response: ApiResponse<LinkCodeResponse>) => {\n      if (response.success && response.data) {\n        setState((prev) => ({\n          ...prev,\n          currentLinkCode: response.data!,\n          isGeneratingCode: false,\n        }));\n        logger.info(\"Link code generated successfully\");\n      } else {\n        setState((prev) => ({\n          ...prev,\n          linkCodeError: response.error || \"Failed to generate link code\",\n          isGeneratingCode: false,\n        }));\n      }\n    },\n    onError: (error: Error) => {\n      setState((prev) => ({\n        ...prev,\n        linkCodeError: error.message,\n        isGeneratingCode: false,\n      }));\n      logger.error(\"Failed to generate link code\", { error });\n    },\n  });\n\n  // Use link code\n  const useLinkCodeMutation = useMutation({\n    mutationFn: (request: UseLinkCodeRequest) =>\n      AccountLinkingService.redeemLinkCode(request),\n    onMutate: () => {\n      setState((prev) => ({\n        ...prev,\n        isUsingCode: true,\n        codeUsageError: null,\n      }));\n    },\n    onSuccess: (response: ApiResponse<AdminRelationship>) => {\n      if (response.success && response.data) {\n        setState((prev) => ({\n          ...prev,\n          isUsingCode: false,\n        }));\n        // Refresh relationships\n        queryClient.invalidateQueries({\n          queryKey: QUERY_KEYS.relationships(user?.uid || \"\"),\n        });\n        logger.info(\"Link code used successfully\");\n      } else {\n        setState((prev) => ({\n          ...prev,\n          codeUsageError: response.error || \"Failed to use link code\",\n          isUsingCode: false,\n        }));\n      }\n    },\n    onError: (error: Error) => {\n      setState((prev) => ({\n        ...prev,\n        codeUsageError: error.message,\n        isUsingCode: false,\n      }));\n      logger.error(\"Failed to use link code\", { error });\n    },\n  });\n\n  // Update relationship\n  const updateRelationshipMutation = useMutation({\n    mutationFn: (request: UpdateRelationshipRequest) =>\n      AccountLinkingService.updateRelationship(request),\n    onSuccess: (response: ApiResponse<AdminRelationship>) => {\n      if (response.success) {\n        // Refresh relationships\n        queryClient.invalidateQueries({\n          queryKey: QUERY_KEYS.relationships(user?.uid || \"\"),\n        });\n        logger.info(\"Relationship updated successfully\");\n      }\n    },\n    onError: (error: Error) => {\n      logger.error(\"Failed to update relationship\", { error });\n    },\n  });\n\n  // Start admin session\n  const startAdminSessionMutation = useMutation({\n    mutationFn: (relationshipId: string) =>\n      AccountLinkingService.startAdminSession(relationshipId),\n    onSuccess: (response: ApiResponse<AdminSession>) => {\n      if (response.success && response.data) {\n        setState((prev) => ({\n          ...prev,\n          currentAdminSession: response.data!,\n          isAdminSessionActive: true,\n        }));\n        logger.info(\"Admin session started successfully\");\n      }\n    },\n    onError: (error: Error) => {\n      logger.error(\"Failed to start admin session\", { error });\n    },\n  });\n\n  // ==================== CALLBACK FUNCTIONS ====================\n\n  const generateLinkCode = useCallback(\n    (request: GenerateLinkCodeRequest = {}) => {\n      if (!user) {\n        setState((prev) => ({\n          ...prev,\n          linkCodeError: \"Authentication required\",\n        }));\n        return;\n      }\n      generateLinkCodeMutation.mutate(request);\n    },\n    [user, generateLinkCodeMutation],\n  );\n\n  const redeemLinkCode = useCallback(\n    (request: UseLinkCodeRequest) => {\n      if (!user) {\n        setState((prev) => ({\n          ...prev,\n          codeUsageError: \"Authentication required\",\n        }));\n        return;\n      }\n      useLinkCodeMutation.mutate(request);\n    },\n    [user, useLinkCodeMutation],\n  );\n\n  const updateRelationship = useCallback(\n    (request: UpdateRelationshipRequest) => {\n      updateRelationshipMutation.mutate(request);\n    },\n    [updateRelationshipMutation],\n  );\n\n  const startAdminSession = useCallback(\n    (relationshipId: string) => {\n      startAdminSessionMutation.mutate(relationshipId);\n    },\n    [startAdminSessionMutation],\n  );\n\n  const disconnectKeyholder = useCallback(\n    (relationshipId: string, reason?: string) => {\n      updateRelationship({\n        relationshipId,\n        status: \"terminated\",\n        terminationReason: reason,\n      });\n    },\n    [updateRelationship],\n  );\n\n  const clearLinkCode = useCallback(() => {\n    setState((prev) => ({\n      ...prev,\n      currentLinkCode: null,\n      linkCodeError: null,\n    }));\n  }, []);\n\n  const clearAllErrors = useCallback(() => {\n    setState((prev) => ({\n      ...prev,\n      currentLinkCode: null,\n      linkCodeError: null,\n      codeUsageError: null,\n    }));\n  }, []);\n\n  const setSelectedWearer = useCallback((wearerId: string | null) => {\n    setState((prev) => ({ ...prev, selectedWearerId: wearerId }));\n  }, []);\n\n  // Combined toggle function for boolean state properties\n  const toggleStateProperty = useCallback(\n    (\n      property: keyof Pick<\n        AccountLinkingState,\n        \"showQRCode\" | \"showDisconnectionDialog\" | \"showPermissionEditor\"\n      >,\n    ) => {\n      setState((prev) => ({ ...prev, [property]: !prev[property] }));\n    },\n    [],\n  );\n\n  const toggleQRCode = useCallback(\n    () => toggleStateProperty(\"showQRCode\"),\n    [toggleStateProperty],\n  );\n  const toggleDisconnectionDialog = useCallback(\n    () => toggleStateProperty(\"showDisconnectionDialog\"),\n    [toggleStateProperty],\n  );\n  const togglePermissionEditor = useCallback(\n    () => toggleStateProperty(\"showPermissionEditor\"),\n    [toggleStateProperty],\n  );\n\n  // ==================== DERIVED STATE ====================\n\n  // User role calculations\n  const userRoles = useMemo(\n    () => ({\n      isKeyholder: relationships.some((r) => r.keyholderId === user?.uid),\n      isWearer: relationships.some((r) => r.wearerId === user?.uid),\n      hasActiveRelationships: relationships.some((r) => r.status === \"active\"),\n    }),\n    [relationships, user?.uid],\n  );\n\n  // Relationship filtering\n  const relationshipsByRole = useMemo(\n    () => ({\n      keyholderRelationships: relationships.filter(\n        (r) => r.keyholderId === user?.uid,\n      ),\n      wearerRelationships: relationships.filter(\n        (r) => r.wearerId === user?.uid,\n      ),\n    }),\n    [relationships, user?.uid],\n  );\n\n  const selectedRelationship = state.selectedWearerId\n    ? relationships.find((r) => r.wearerId === state.selectedWearerId)\n    : null;\n\n  // ==================== RETURN OBJECT ====================\n\n  return {\n    // State\n    ...state,\n    relationships,\n    isLoadingRelationships,\n    relationshipsError,\n\n    // Derived state\n    ...userRoles,\n    selectedRelationship,\n    ...relationshipsByRole,\n\n    // Actions\n    generateLinkCode,\n    redeemLinkCode,\n    updateRelationship,\n    startAdminSession,\n    disconnectKeyholder,\n    clearLinkCode,\n    clearAllErrors,\n    setSelectedWearer,\n    toggleQRCode,\n    toggleDisconnectionDialog,\n    togglePermissionEditor,\n\n    // Loading states\n    isGeneratingCode: generateLinkCodeMutation.isPending,\n    isUsingCode: useLinkCodeMutation.isPending,\n    isUpdatingRelationship: updateRelationshipMutation.isPending,\n    isStartingSession: startAdminSessionMutation.isPending,\n  };\n};\n\n// ==================== ADDITIONAL HOOKS ====================\n\n/**\n * Hook for validating link codes\n */\nexport const useLinkCodeValidation = (code: string) => {\n  return useQuery({\n    queryKey: QUERY_KEYS.validation(code),\n    queryFn: () => AccountLinkingService.validateLinkCode(code),\n    enabled: code.length > 0,\n    staleTime: 30 * 1000, // 30 seconds\n  });\n};\n\n/**\n * Hook for admin access validation\n */\nexport const useAdminAccess = (wearerId: string) => {\n  const { user } = useAuthState();\n  const { relationships } = useAccountLinking();\n\n  const adminRelationship = relationships.find(\n    (r) =>\n      r.keyholderId === user?.uid &&\n      r.wearerId === wearerId &&\n      r.status === \"active\",\n  );\n\n  const hasAccess = !!adminRelationship;\n  const permissions = adminRelationship?.permissions || null;\n  const security = adminRelationship?.security || null;\n\n  const canPerformAction = useCallback(\n    (action: keyof typeof permissions) => {\n      return hasAccess && permissions?.[action] === true;\n    },\n    [hasAccess, permissions],\n  );\n\n  return {\n    hasAccess,\n    adminRelationship,\n    permissions,\n    security,\n    canPerformAction,\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/achievements/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/achievements/useLeaderboardActions.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/achievements/usePrivacySettings.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/api/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/api/queryClient.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/api/useAuth.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/api/useEmergency.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/api/useEvents.ts",
    "messages": [
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'EventFilters' is already defined.",
        "line": 55,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 55,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {\n  useMutation,\n  useQuery,\n  useQueryClient,\n  useInfiniteQuery,\n} from \"@tanstack/react-query\";\nimport { eventDBService } from \"../../services/database/EventDBService\";\nimport { Event, EventType } from \"../../types/events\";\nimport { DBEvent, EventFilters } from \"../../types/database\";\nimport { logger } from \"../../utils/logging\";\n\n/**\n * Event Management Hooks - TanStack Query Integration\n *\n * Integrates with:\n * - eventDBService → Dexie → Firebase sync\n * - LogEventPage.tsx, LogEventForm.tsx (critical fixes needed)\n *\n * Fixes:\n * - LogEventForm.tsx:92-93 (commented eventDBService.create)\n * - LogEventPage.tsx:20 (eventDBService.findByUserId)\n *\n * Strategy: Dexie-first write, Firebase background sync\n */\n\n// Utility function to convert Event to DBEvent format\nconst eventToDBEvent = (\n  event: Event,\n): Omit<DBEvent, \"lastModified\" | \"syncStatus\"> => {\n  return {\n    id: event.id,\n    userId: event.userId,\n    type: event.type,\n    timestamp: event.timestamp,\n    details: event.details,\n    isPrivate: false, // Default value, can be overridden\n    sessionId: undefined, // Can be set if available\n  };\n};\n\n// Query Keys\nexport const eventKeys = {\n  all: [\"events\"] as const,\n  lists: () => [...eventKeys.all, \"list\"] as const,\n  list: (userId: string, filters?: EventFilters) =>\n    [...eventKeys.lists(), userId, filters] as const,\n  infinite: (userId: string, filters?: EventFilters) =>\n    [...eventKeys.all, \"infinite\", userId, filters] as const,\n  detail: (eventId: string) => [...eventKeys.all, \"detail\", eventId] as const,\n  recent: (userId: string, limit?: number) =>\n    [...eventKeys.all, \"recent\", userId, limit] as const,\n} as const;\n\n// Types\ninterface EventFilters {\n  type?: EventType;\n  startDate?: Date;\n  endDate?: Date;\n  limit?: number;\n}\n\ninterface CreateEventData {\n  type: EventType;\n  details: Record<string, unknown>;\n  timestamp?: Date;\n}\n\ninterface UpdateEventData {\n  type?: EventType;\n  details?: Record<string, unknown>;\n  timestamp?: Date;\n}\n\n/**\n * Get event history for a user with filters\n * Fixes: LogEventPage.tsx:20 (eventDBService.findByUserId)\n */\nexport function useEventHistory(userId: string, filters?: EventFilters) {\n  return useQuery({\n    queryKey: eventKeys.list(userId, filters),\n    queryFn: async (): Promise<DBEvent[]> => {\n      logger.info(\"Fetching event history\", { userId, filters });\n\n      try {\n        const events = await eventDBService.findByUserId(userId);\n\n        // Apply filters\n        let filteredEvents = events;\n\n        if (filters?.type) {\n          filteredEvents = filteredEvents.filter(\n            (event) => event.type === filters.type,\n          );\n        }\n\n        if (filters?.startDate) {\n          filteredEvents = filteredEvents.filter(\n            (event) => new Date(event.timestamp) >= filters.startDate!,\n          );\n        }\n\n        if (filters?.endDate) {\n          filteredEvents = filteredEvents.filter(\n            (event) => new Date(event.timestamp) <= filters.endDate!,\n          );\n        }\n\n        // Sort by timestamp (newest first)\n        filteredEvents.sort(\n          (a, b) =>\n            new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime(),\n        );\n\n        if (filters?.limit) {\n          filteredEvents = filteredEvents.slice(0, filters.limit);\n        }\n\n        logger.info(\"Event history retrieved\", {\n          userId,\n          totalEvents: events.length,\n          filteredEvents: filteredEvents.length,\n        });\n\n        return filteredEvents;\n      } catch (error) {\n        logger.error(\"Failed to fetch event history\", {\n          error: error instanceof Error ? error.message : String(error),\n          userId,\n        });\n        throw error;\n      }\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes - warm data\n    gcTime: 30 * 60 * 1000, // 30 minutes garbage collection\n    enabled: !!userId,\n  });\n}\n\n/**\n * Infinite query for event history with pagination\n * Useful for long event lists with infinite scroll\n */\nexport function useInfiniteEventHistory(\n  userId: string,\n  filters?: EventFilters,\n  pageSize = 20,\n) {\n  return useInfiniteQuery({\n    queryKey: eventKeys.infinite(userId, filters),\n    queryFn: async ({\n      pageParam = 0,\n    }): Promise<{ events: DBEvent[]; nextPage?: number }> => {\n      logger.info(\"Fetching infinite event page\", {\n        userId,\n        pageParam,\n        pageSize,\n      });\n\n      const events = await eventDBService.findByUserId(userId);\n\n      // Apply filters and sorting (same as useEventHistory)\n      let filteredEvents = events;\n\n      if (filters?.type) {\n        filteredEvents = filteredEvents.filter(\n          (event) => event.type === filters.type,\n        );\n      }\n\n      if (filters?.startDate) {\n        filteredEvents = filteredEvents.filter(\n          (event) => new Date(event.timestamp) >= filters.startDate!,\n        );\n      }\n\n      if (filters?.endDate) {\n        filteredEvents = filteredEvents.filter(\n          (event) => new Date(event.timestamp) <= filters.endDate!,\n        );\n      }\n\n      filteredEvents.sort(\n        (a, b) =>\n          new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime(),\n      );\n\n      // Pagination\n      const start = pageParam * pageSize;\n      const end = start + pageSize;\n      const pageEvents = filteredEvents.slice(start, end);\n\n      const hasMore = end < filteredEvents.length;\n\n      return {\n        events: pageEvents,\n        nextPage: hasMore ? pageParam + 1 : undefined,\n      };\n    },\n    initialPageParam: 0,\n    getNextPageParam: (lastPage) => lastPage.nextPage,\n    staleTime: 5 * 60 * 1000,\n    enabled: !!userId,\n  });\n}\n\n/**\n * Get recent events for quick overview\n * Useful for dashboard summaries\n */\nexport function useRecentEvents(userId: string, limit = 10) {\n  return useQuery({\n    queryKey: eventKeys.recent(userId, limit),\n    queryFn: async (): Promise<DBEvent[]> => {\n      logger.info(\"Fetching recent events\", { userId, limit });\n\n      const events = await eventDBService.findByUserId(userId);\n\n      // Sort by timestamp and take most recent\n      const recentEvents = events\n        .sort(\n          (a, b) =>\n            new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime(),\n        )\n        .slice(0, limit);\n\n      return recentEvents;\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes - recent data changes frequently\n    enabled: !!userId,\n  });\n}\n\n/**\n * Get single event by ID\n */\nexport function useEvent(eventId: string) {\n  return useQuery({\n    queryKey: eventKeys.detail(eventId),\n    queryFn: async (): Promise<DBEvent | null> => {\n      logger.info(\"Fetching event detail\", { eventId });\n      const event = await eventDBService.findById(eventId);\n      return event ?? null;\n    },\n    staleTime: 10 * 60 * 1000, // 10 minutes - historical data is stable\n    enabled: !!eventId,\n  });\n}\n\n/**\n * Create new event\n * Fixes: LogEventForm.tsx:92-93 (commented eventDBService.create)\n * Strategy: Dexie-first write, Firebase background sync\n */\nexport function useCreateEvent() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      userId,\n      eventData,\n    }: {\n      userId: string;\n      eventData: CreateEventData;\n    }): Promise<Event> => {\n      logger.info(\"Creating new event\", { userId, eventType: eventData.type });\n\n      // Generate event ID\n      const eventId = `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      const newEvent: DBEvent = {\n        id: eventId,\n        userId,\n        syncStatus: \"pending\",\n        lastModified: new Date(),\n        type: eventData.type,\n        timestamp: eventData.timestamp || new Date(),\n        details: eventData.details || {},\n        isPrivate: eventData.isPrivate || false,\n      };\n\n      // Dexie-first write for immediate UI response\n      const dbEvent = eventToDBEvent(newEvent);\n      await eventDBService.create(dbEvent);\n\n      logger.info(\"Event created successfully\", {\n        eventId,\n        userId,\n        type: eventData.type,\n      });\n\n      return newEvent;\n    },\n    onSuccess: (newEvent, { userId }) => {\n      logger.info(\"Event creation successful\", {\n        eventId: newEvent.id,\n        userId,\n      });\n\n      // Invalidate relevant queries to trigger refetch\n      queryClient.invalidateQueries({ queryKey: eventKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: eventKeys.recent(userId) });\n      queryClient.invalidateQueries({ queryKey: eventKeys.infinite(userId) });\n\n      // Optimistically add to cache if we have existing data\n      queryClient.setQueriesData(\n        { queryKey: eventKeys.list(userId) },\n        (oldData: Event[] | undefined) => {\n          if (!oldData) return undefined;\n          return [newEvent, ...oldData];\n        },\n      );\n    },\n    onError: (error, { userId, eventData }) => {\n      logger.error(\"Event creation failed\", {\n        error: error instanceof Error ? error.message : String(error),\n        userId,\n        eventType: eventData.type,\n      });\n    },\n  });\n}\n\n/**\n * Update existing event\n */\nexport function useUpdateEvent() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      eventId,\n      userId,\n      updates,\n    }: {\n      eventId: string;\n      userId: string;\n      updates: UpdateEventData;\n    }): Promise<DBEvent> => {\n      logger.info(\"Updating event\", { eventId, userId });\n\n      const existingEvent = await eventDBService.findById(eventId);\n      if (!existingEvent) {\n        throw new Error(`Event not found: ${eventId}`);\n      }\n\n      const updatedEvent: DBEvent = {\n        ...existingEvent,\n        ...updates,\n        createdAt: existingEvent.createdAt || new Date(),\n        lastModified: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const dbUpdatedEvent = eventToDBEvent(updatedEvent);\n      await eventDBService.update(eventId, dbUpdatedEvent);\n\n      logger.info(\"Event updated successfully\", { eventId, userId });\n\n      return updatedEvent;\n    },\n    onSuccess: (updatedEvent, { userId, eventId }) => {\n      logger.info(\"Event update successful\", { eventId, userId });\n\n      // Update detail cache\n      queryClient.setQueryData(eventKeys.detail(eventId), updatedEvent);\n\n      // Invalidate list queries to reflect changes\n      queryClient.invalidateQueries({ queryKey: eventKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: eventKeys.recent(userId) });\n    },\n    onError: (error, { eventId, userId }) => {\n      logger.error(\"Event update failed\", {\n        error: error instanceof Error ? error.message : String(error),\n        eventId,\n        userId,\n      });\n    },\n  });\n}\n\n/**\n * Delete event\n */\nexport function useDeleteEvent() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      eventId,\n      userId,\n    }: {\n      eventId: string;\n      userId: string;\n    }): Promise<void> => {\n      logger.info(\"Deleting event\", { eventId, userId });\n\n      await eventDBService.delete(eventId);\n\n      logger.info(\"Event deleted successfully\", { eventId, userId });\n    },\n    onSuccess: (_, { eventId, userId }) => {\n      logger.info(\"Event deletion successful\", { eventId, userId });\n\n      // Remove from detail cache\n      queryClient.removeQueries({ queryKey: eventKeys.detail(eventId) });\n\n      // Invalidate list queries\n      queryClient.invalidateQueries({ queryKey: eventKeys.lists() });\n      queryClient.invalidateQueries({ queryKey: eventKeys.recent(userId) });\n      queryClient.invalidateQueries({ queryKey: eventKeys.infinite(userId) });\n\n      // Optimistically remove from cached lists\n      queryClient.setQueriesData(\n        { queryKey: eventKeys.list(userId) },\n        (oldData: Event[] | undefined) => {\n          if (!oldData) return undefined;\n          return oldData.filter((event) => event.id !== eventId);\n        },\n      );\n    },\n    onError: (error, { eventId, userId }) => {\n      logger.error(\"Event deletion failed\", {\n        error: error instanceof Error ? error.message : String(error),\n        eventId,\n        userId,\n      });\n    },\n  });\n}\n\n/**\n * Get event statistics for analytics\n */\nexport function useEventStats(\n  userId: string,\n  timeRange?: { start: Date; end: Date },\n) {\n  return useQuery({\n    queryKey: [...eventKeys.all, \"stats\", userId, timeRange],\n    queryFn: async () => {\n      logger.info(\"Calculating event statistics\", { userId, timeRange });\n\n      const events = await eventDBService.findByUserId(userId);\n\n      let filteredEvents = events;\n      if (timeRange) {\n        filteredEvents = events.filter((event) => {\n          const eventDate = new Date(event.timestamp);\n          return eventDate >= timeRange.start && eventDate <= timeRange.end;\n        });\n      }\n\n      // Calculate statistics\n      const stats = {\n        totalEvents: filteredEvents.length,\n        eventsByType: {} as Record<string, number>,\n        eventsPerDay: {} as Record<string, number>,\n        mostRecentEvent:\n          filteredEvents.length > 0\n            ? filteredEvents.reduce((latest, event) =>\n                new Date(event.timestamp) > new Date(latest.timestamp)\n                  ? event\n                  : latest,\n              )\n            : null,\n      };\n\n      // Count events by type\n      filteredEvents.forEach((event) => {\n        stats.eventsByType[event.type] =\n          (stats.eventsByType[event.type] || 0) + 1;\n\n        const dateKey = new Date(event.timestamp).toDateString();\n        stats.eventsPerDay[dateKey] = (stats.eventsPerDay[dateKey] || 0) + 1;\n      });\n\n      return stats;\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    enabled: !!userId,\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/api/useEventsQuery.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Function 'useEventMutations' has too many lines (184). Maximum allowed is 75.",
        "line": 89,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 307,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Events TanStack Query Hooks\n * Manages event log data with Dexie as backend\n */\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { eventDBService } from \"@/services/database\";\nimport { cacheConfig } from \"@/services/cache-config\";\nimport { firebaseSync } from \"@/services/sync\";\nimport type { DBEvent, EventType } from \"@/types/database\";\nimport { serviceLogger } from \"@/utils/logging\";\n\nconst logger = serviceLogger(\"useEventsQuery\");\n\n/**\n * Query for getting all events for a user\n */\nexport function useEventsQuery(userId: string | undefined) {\n  return useQuery({\n    queryKey: [\"events\", \"user\", userId],\n    queryFn: async () => {\n      if (!userId) return [];\n\n      // Always read from local Dexie first for instant response\n      const events = await eventDBService.findByUserId(userId);\n\n      // Trigger background sync if online to ensure data freshness\n      if (navigator.onLine) {\n        firebaseSync.syncUserEvents(userId).catch((error) => {\n          logger.warn(\"Background events sync failed\", { error });\n        });\n      }\n\n      return events;\n    },\n    ...cacheConfig.events, // Apply specific cache settings\n    enabled: !!userId, // Only run when userId is available\n  });\n}\n\n/**\n * Query for getting recent events (last 30 days)\n */\nexport function useRecentEventsQuery(\n  userId: string | undefined,\n  enabled = true,\n) {\n  return useQuery({\n    queryKey: [\"events\", \"recent\", userId],\n    queryFn: async () => {\n      if (!userId) return [];\n\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n      const allEvents = await eventDBService.findByUserId(userId);\n      return allEvents\n        .filter((event) => event.timestamp >= thirtyDaysAgo)\n        .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n    },\n    ...cacheConfig.events,\n    enabled: !!userId && enabled,\n  });\n}\n\n/**\n * Query for getting events by type\n */\nexport function useEventsByTypeQuery(\n  userId: string | undefined,\n  eventType: EventType,\n  enabled = true,\n) {\n  return useQuery({\n    queryKey: [\"events\", \"type\", userId, eventType],\n    queryFn: async () => {\n      if (!userId) return [];\n\n      const allEvents = await eventDBService.findByUserId(userId);\n      return allEvents.filter((event) => event.type === eventType);\n    },\n    ...cacheConfig.events,\n    enabled: !!userId && enabled,\n  });\n}\n\n/**\n * Mutations for event operations\n */\nexport function useEventMutations() {\n  const queryClient = useQueryClient();\n\n  const createEvent = useMutation({\n    mutationFn: async (params: {\n      userId: string;\n      type: EventType;\n      timestamp: Date;\n      notes?: string;\n      duration?: number;\n      isPrivate?: boolean;\n      sessionId?: string;\n      metadata?: Record<string, unknown>;\n    }) => {\n      // 1. Write to local Dexie immediately for optimistic update\n      const { notes, duration, ...restParams } = params;\n      const eventData = {\n        ...restParams,\n        isPrivate: restParams.isPrivate ?? false, // Ensure isPrivate is always defined\n        details: {\n          notes,\n          duration,\n        },\n      };\n      const event = await eventDBService.createEvent(eventData);\n\n      // 2. Trigger Firebase sync in background\n      if (navigator.onLine) {\n        firebaseSync.syncUserEvents(params.userId).catch((error) => {\n          logger.warn(\"Event creation sync failed\", { error });\n        });\n      }\n\n      return event;\n    },\n    onSuccess: (data, variables) => {\n      // Add event to the cache\n      queryClient.setQueryData(\n        [\"events\", \"user\", variables.userId],\n        (oldEvents: DBEvent[] | undefined) => {\n          if (!oldEvents) return [data];\n          return [data, ...oldEvents].sort((a, b) => {\n            // Type guard to ensure we have DBEvent objects with timestamp\n            if (typeof a === \"string\" || typeof b === \"string\") return 0;\n            return b.timestamp.getTime() - a.timestamp.getTime();\n          });\n        },\n      );\n\n      // Invalidate related queries\n      queryClient.invalidateQueries({\n        queryKey: [\"events\", \"recent\", variables.userId],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"events\", \"type\", variables.userId],\n      });\n    },\n    onError: (error) => {\n      logger.error(\"Failed to create event\", { error });\n    },\n  });\n\n  const updateEvent = useMutation({\n    mutationFn: async (params: {\n      eventId: string;\n      userId: string;\n      updates: Partial<DBEvent>;\n    }) => {\n      // 1. Update local Dexie immediately\n      const updatedEvent = await eventDBService.updateEvent(\n        params.eventId,\n        params.updates,\n      );\n\n      // 2. Trigger Firebase sync in background\n      if (navigator.onLine) {\n        firebaseSync.syncUserEvents(params.userId).catch((error) => {\n          logger.warn(\"Event update sync failed\", { error });\n        });\n      }\n\n      return updatedEvent;\n    },\n    onSuccess: (data, variables) => {\n      // Update event in cache\n      queryClient.setQueryData(\n        [\"events\", \"user\", variables.userId],\n        (oldEvents: DBEvent[] | undefined) => {\n          if (!oldEvents) return oldEvents;\n          return oldEvents.map((event) =>\n            event.id === variables.eventId\n              ? { ...event, ...(data as Partial<DBEvent>) }\n              : event,\n          );\n        },\n      );\n\n      // Invalidate related queries\n      queryClient.invalidateQueries({\n        queryKey: [\"events\", \"recent\", variables.userId],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"events\", \"type\", variables.userId],\n      });\n    },\n    onError: (error) => {\n      logger.error(\"Failed to update event\", { error });\n    },\n  });\n\n  const deleteEvent = useMutation({\n    mutationFn: async (params: { eventId: string; userId: string }) => {\n      // 1. Delete from local Dexie immediately\n      await eventDBService.deleteEvent(params.eventId);\n\n      // 2. Trigger Firebase sync in background\n      if (navigator.onLine) {\n        firebaseSync.syncUserEvents(params.userId).catch((error) => {\n          logger.warn(\"Event deletion sync failed\", { error });\n        });\n      }\n\n      return params.eventId;\n    },\n    onSuccess: (eventId, variables) => {\n      // Remove event from cache\n      queryClient.setQueryData(\n        [\"events\", \"user\", variables.userId],\n        (oldEvents: DBEvent[] | undefined) => {\n          if (!oldEvents) return oldEvents;\n          return oldEvents.filter((event) => event.id !== eventId);\n        },\n      );\n\n      // Invalidate related queries\n      queryClient.invalidateQueries({\n        queryKey: [\"events\", \"recent\", variables.userId],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"events\", \"type\", variables.userId],\n      });\n    },\n    onError: (error) => {\n      logger.error(\"Failed to delete event\", { error });\n    },\n  });\n\n  const bulkCreateEvents = useMutation({\n    mutationFn: async (params: {\n      userId: string;\n      events: Array<{\n        type: EventType;\n        timestamp: Date;\n        notes?: string;\n        duration?: number;\n        isPrivate?: boolean;\n        sessionId?: string;\n        metadata?: Record<string, unknown>;\n      }>;\n    }) => {\n      // 1. Create all events in local Dexie\n      const createdEvents = await Promise.all(\n        params.events.map((eventData) => {\n          const { notes, duration, ...restEventData } = eventData;\n          return eventDBService.createEvent({\n            ...restEventData,\n            userId: params.userId,\n            isPrivate: restEventData.isPrivate ?? false, // Ensure isPrivate is always defined\n            details: {\n              notes,\n              duration,\n            },\n          });\n        }),\n      );\n\n      // 2. Trigger Firebase sync in background\n      if (navigator.onLine) {\n        firebaseSync.syncUserEvents(params.userId).catch((error) => {\n          logger.warn(\"Bulk event creation sync failed\", { error });\n        });\n      }\n\n      return createdEvents;\n    },\n    onSuccess: (data, variables) => {\n      // Add all events to cache\n      queryClient.setQueryData(\n        [\"events\", \"user\", variables.userId],\n        (oldEvents: DBEvent[] | undefined) => {\n          if (!oldEvents) return data;\n          return [...data, ...oldEvents].sort((a, b) => {\n            // Type guard to ensure we have DBEvent objects with timestamp\n            if (typeof a === \"string\" || typeof b === \"string\") return 0;\n            return b.timestamp.getTime() - a.timestamp.getTime();\n          });\n        },\n      );\n\n      // Invalidate related queries\n      queryClient.invalidateQueries({\n        queryKey: [\"events\", \"recent\", variables.userId],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"events\", \"type\", variables.userId],\n      });\n    },\n    onError: (error) => {\n      logger.error(\"Failed to bulk create events\", { error });\n    },\n  });\n\n  return {\n    createEvent,\n    updateEvent,\n    deleteEvent,\n    bulkCreateEvents,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/api/useOfflineQueue.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/api/useSessionQuery.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Function 'useSessionMutations' has too many lines (113). Maximum allowed is 75.",
        "line": 69,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 215,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Session TanStack Query Hooks\n * Manages chastity session data with Dexie as backend\n */\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { sessionDBService } from \"@/services/database\";\nimport { cacheConfig } from \"@/services/cache-config\";\nimport { firebaseSync } from \"@/services/sync\";\nimport { serviceLogger } from \"@/utils/logging\";\n\nconst logger = serviceLogger(\"useSessionQuery\");\n\n/**\n * Query for getting current active session\n */\nexport function useCurrentSession(userId: string | undefined) {\n  return useQuery({\n    queryKey: [\"session\", \"current\", userId],\n    queryFn: async () => {\n      if (!userId) return null;\n\n      // Always read from local Dexie first for instant response\n      const session = await sessionDBService.getCurrentSession(userId);\n\n      // Trigger background sync if online to ensure data freshness\n      if (navigator.onLine) {\n        firebaseSync.syncUserSessions(userId).catch((error) => {\n          logger.warn(\"Background session sync failed:\", { error });\n        });\n      }\n\n      return session;\n    },\n    ...cacheConfig.currentSession, // Apply specific cache settings\n    enabled: !!userId, // The query will not run until the userId is available\n  });\n}\n\n/**\n * Query for getting session history\n */\nexport function useSessionHistory(userId: string | undefined, enabled = true) {\n  return useQuery({\n    queryKey: [\"sessions\", \"history\", userId],\n    queryFn: async () => {\n      if (!userId) return [];\n\n      const sessions = await sessionDBService.findByUserId(userId);\n\n      // Trigger background sync if online\n      if (navigator.onLine) {\n        firebaseSync.syncUserSessions(userId).catch((error) => {\n          logger.warn(\"Background session history sync failed:\", { error });\n        });\n      }\n\n      return sessions.sort(\n        (a, b) => b.startTime.getTime() - a.startTime.getTime(),\n      );\n    },\n    ...cacheConfig.sessionHistory,\n    enabled: !!userId && enabled,\n  });\n}\n\n/**\n * Mutations for session operations\n */\nexport function useSessionMutations() {\n  const queryClient = useQueryClient();\n\n  const startSession = useMutation({\n    mutationFn: async (params: {\n      userId: string;\n      startTime?: Date;\n      requiredDuration?: number;\n    }) => {\n      // 1. Write to local Dexie immediately for optimistic update\n      const sessionId = await sessionDBService.startSession(params.userId, {\n        goalDuration: params.requiredDuration,\n        notes: `Session started at ${params.startTime || new Date()}`,\n      });\n\n      // Get the created session\n      const session = await sessionDBService.findById(sessionId);\n      if (!session) {\n        throw new Error(\"Failed to create session\");\n      }\n\n      // 2. Trigger Firebase sync in background\n      if (navigator.onLine) {\n        firebaseSync.syncUserSessions(params.userId).catch((error) => {\n          logger.warn(\"Session start sync failed:\", { error });\n        });\n      }\n\n      return session;\n    },\n    onSuccess: (data, variables) => {\n      // Update the current session cache\n      queryClient.setQueryData([\"session\", \"current\", variables.userId], data);\n\n      // Invalidate session history to include new session\n      queryClient.invalidateQueries({\n        queryKey: [\"sessions\", \"history\", variables.userId],\n      });\n    },\n    onError: (error) => {\n      logger.error(\"Failed to start session:\", { error });\n    },\n  });\n\n  const endSession = useMutation({\n    mutationFn: async (params: {\n      userId: string;\n      endTime?: Date;\n      reason?: string;\n    }) => {\n      // 1. Update local Dexie immediately\n      const updatedSession = await sessionDBService.endSession(\n        params.userId,\n        params.endTime || new Date(),\n        params.reason,\n      );\n\n      // 2. Trigger Firebase sync in background\n      if (navigator.onLine) {\n        firebaseSync.syncUserSessions(params.userId).catch((error) => {\n          logger.warn(\"Session end sync failed:\", { error });\n        });\n      }\n\n      return updatedSession;\n    },\n    onSuccess: (data, variables) => {\n      // Clear current session since it's ended\n      queryClient.setQueryData([\"session\", \"current\", variables.userId], null);\n\n      // Invalidate session history to reflect ended session\n      queryClient.invalidateQueries({\n        queryKey: [\"sessions\", \"history\", variables.userId],\n      });\n    },\n    onError: (error) => {\n      logger.error(\"Failed to end session:\", { error });\n    },\n  });\n\n  const pauseSession = useMutation({\n    mutationFn: async (params: { userId: string; reason?: string }) => {\n      // 1. Get current session first\n      const currentSession = await sessionDBService.getCurrentSession(\n        params.userId,\n      );\n      if (!currentSession) {\n        throw new Error(\"No active session to pause\");\n      }\n\n      // 2. Update local Dexie immediately\n      await sessionDBService.pauseSession(currentSession.id, new Date());\n\n      // 2. Trigger Firebase sync in background\n      if (navigator.onLine) {\n        firebaseSync.syncUserSessions(params.userId).catch((error) => {\n          logger.warn(\"Session pause sync failed:\", { error });\n        });\n      }\n\n      // Return the updated session\n      const updatedSession = await sessionDBService.getCurrentSession(\n        params.userId,\n      );\n      return updatedSession;\n    },\n    onSuccess: (data, variables) => {\n      // Update current session cache\n      queryClient.setQueryData([\"session\", \"current\", variables.userId], data);\n    },\n    onError: (error) => {\n      logger.error(\"Failed to pause session:\", { error });\n    },\n  });\n\n  const resumeSession = useMutation({\n    mutationFn: async (params: { userId: string }) => {\n      // 1. Update local Dexie immediately\n      const updatedSession = await sessionDBService.resumeSession(\n        params.userId,\n      );\n\n      // 2. Trigger Firebase sync in background\n      if (navigator.onLine) {\n        firebaseSync.syncUserSessions(params.userId).catch((error) => {\n          logger.warn(\"Session resume sync failed:\", { error });\n        });\n      }\n\n      return updatedSession;\n    },\n    onSuccess: (data, variables) => {\n      // Update current session cache\n      queryClient.setQueryData([\"session\", \"current\", variables.userId], data);\n    },\n    onError: (error) => {\n      logger.error(\"Failed to resume session:\", { error });\n    },\n  });\n\n  return {\n    startSession,\n    endSession,\n    pauseSession,\n    resumeSession,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/api/useSettings.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/api/useSettingsQuery.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Function 'useSettingsMutations' has too many lines (91). Maximum allowed is 75.",
        "line": 48,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 163,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Settings TanStack Query Hooks\n * Manages user settings with Dexie as backend\n */\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { settingsDBService } from \"@/services/database\";\nimport { cacheConfig } from \"@/services/cache-config\";\nimport { firebaseSync } from \"@/services/sync\";\nimport type { DBSettings } from \"@/types/database\";\nimport { serviceLogger } from \"@/utils/logging\";\n\nconst logger = serviceLogger(\"useSettingsQuery\");\n\n/**\n * Query for getting user settings\n */\nexport function useSettingsQuery(userId: string | undefined) {\n  return useQuery({\n    queryKey: [\"settings\", \"user\", userId],\n    queryFn: async () => {\n      if (!userId) return null;\n\n      // Always read from local Dexie first for instant response\n      let settings = await settingsDBService.getUserSettings(userId);\n\n      // If no settings exist, create default settings\n      if (!settings) {\n        settings = await settingsDBService.createDefaultSettings(userId);\n      }\n\n      // Trigger background sync if online to ensure data freshness\n      if (navigator.onLine) {\n        firebaseSync.syncUserSettings(userId).catch((error) => {\n          logger.warn(\"Background settings sync failed:\", { error });\n        });\n      }\n\n      return settings;\n    },\n    ...cacheConfig.userSettings, // Apply specific cache settings\n    enabled: !!userId, // Only run when userId is available\n  });\n}\n\n/**\n * Mutations for settings operations\n */\nexport function useSettingsMutations() {\n  const queryClient = useQueryClient();\n\n  const updateSettings = useMutation({\n    mutationFn: async (params: {\n      userId: string;\n      settings: Partial<DBSettings>;\n    }) => {\n      // 1. Update local Dexie immediately for optimistic update\n      const updatedSettings = await settingsDBService.updateSettings(\n        params.userId,\n        params.settings,\n      );\n\n      // 2. Trigger Firebase sync in background\n      if (navigator.onLine) {\n        firebaseSync.syncUserSettings(params.userId).catch((error) => {\n          logger.warn(\"Settings update sync failed:\", { error });\n        });\n      }\n\n      return updatedSettings;\n    },\n    onSuccess: (data, variables) => {\n      // Update the settings cache immediately\n      queryClient.setQueryData([\"settings\", \"user\", variables.userId], data);\n    },\n    onError: (error) => {\n      logger.error(\"Failed to update settings:\", { error });\n\n      // Invalidate cache to refetch from server in case of error\n      queryClient.invalidateQueries({\n        queryKey: [\"settings\", \"user\"],\n      });\n    },\n  });\n\n  const resetSettings = useMutation({\n    mutationFn: async (params: { userId: string }) => {\n      // 1. Reset to defaults in local Dexie\n      const defaultSettings = await settingsDBService.createDefaultSettings(\n        params.userId,\n      );\n\n      // 2. Trigger Firebase sync in background\n      if (navigator.onLine) {\n        firebaseSync.syncUserSettings(params.userId).catch((error) => {\n          logger.warn(\"Settings reset sync failed:\", { error });\n        });\n      }\n\n      return defaultSettings;\n    },\n    onSuccess: (data, variables) => {\n      // Update the settings cache with default values\n      queryClient.setQueryData([\"settings\", \"user\", variables.userId], data);\n    },\n    onError: (error) => {\n      logger.error(\"Failed to reset settings:\", { error });\n    },\n  });\n\n  const updateTheme = useMutation({\n    mutationFn: async (params: { userId: string; theme: \"light\" | \"dark\" }) => {\n      // Quick theme update\n      const updatedSettings = await settingsDBService.updateSettings(\n        params.userId,\n        { theme: params.theme },\n      );\n\n      // Background sync\n      if (navigator.onLine) {\n        firebaseSync.syncUserSettings(params.userId).catch((error) => {\n          logger.warn(\"Theme update sync failed:\", { error });\n        });\n      }\n\n      return updatedSettings;\n    },\n    onSuccess: (data, variables) => {\n      // Update settings cache\n      queryClient.setQueryData([\"settings\", \"user\", variables.userId], data);\n    },\n  });\n\n  const updateEventDisplayMode = useMutation({\n    mutationFn: async (params: {\n      userId: string;\n      eventDisplayMode: \"kinky\" | \"vanilla\";\n    }) => {\n      const updatedSettings = await settingsDBService.updateSettings(\n        params.userId,\n        { eventDisplayMode: params.eventDisplayMode },\n      );\n\n      // Background sync\n      if (navigator.onLine) {\n        firebaseSync.syncUserSettings(params.userId).catch((error) => {\n          logger.warn(\"Event display mode sync failed:\", { error });\n        });\n      }\n\n      return updatedSettings;\n    },\n    onSuccess: (data, variables) => {\n      queryClient.setQueryData([\"settings\", \"user\", variables.userId], data);\n    },\n  });\n\n  return {\n    updateSettings,\n    resetSettings,\n    updateTheme,\n    updateEventDisplayMode,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/api/useTaskQuery.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Function 'useTaskMutations' has too many lines (149). Maximum allowed is 75.",
        "line": 65,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 244,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Task TanStack Query Hooks\n * Manages server state for tasks with Dexie as backend\n */\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { taskDBService } from \"@/services/database\";\nimport { cacheConfig } from \"@/services/cache-config\";\nimport { firebaseSync } from \"@/services/sync\";\nimport type { DBTask, TaskStatus } from \"@/types/database\";\nimport { serviceLogger } from \"@/utils/logging\";\n\nconst logger = serviceLogger(\"useTaskQuery\");\n\n/**\n * Query for getting all tasks for a user\n */\nexport function useTasksQuery(userId: string | undefined) {\n  return useQuery({\n    queryKey: [\"tasks\", \"user\", userId],\n    queryFn: async () => {\n      if (!userId) return [];\n\n      // Always read from local Dexie first for instant response\n      const tasks = await taskDBService.findByUserId(userId);\n\n      // Trigger background sync if online to ensure data freshness\n      if (navigator.onLine) {\n        firebaseSync.syncUserTasks(userId).catch((error) => {\n          logger.warn(\"Background task sync failed\", { error });\n        });\n      }\n\n      return tasks;\n    },\n    ...cacheConfig.tasks, // Apply specific cache settings\n    enabled: !!userId, // Only run when userId is available\n  });\n}\n\n/**\n * Query for getting pending tasks that need keyholder attention\n */\nexport function usePendingTasksQuery(\n  userId: string | undefined,\n  enabled = true,\n) {\n  return useQuery({\n    queryKey: [\"tasks\", \"pending\", userId],\n    queryFn: async () => {\n      if (!userId) return [];\n\n      const allTasks = await taskDBService.findByUserId(userId);\n      return allTasks.filter((task) =>\n        [\"pending\", \"submitted\"].includes(task.status),\n      );\n    },\n    ...cacheConfig.tasks,\n    enabled: !!userId && enabled,\n  });\n}\n\n/**\n * Mutations for task operations\n */\nexport function useTaskMutations() {\n  const queryClient = useQueryClient();\n\n  const createTask = useMutation({\n    mutationFn: async (params: {\n      userId: string;\n      title: string;\n      description?: string;\n      deadline?: Date;\n    }) => {\n      // 1. Write to local Dexie immediately for optimistic update\n      const task = await taskDBService.createTask({\n        ...params,\n        status: \"pending\" as TaskStatus,\n        text: params.description || params.title, // Use description or title as text\n        priority: \"medium\" as const, // Default priority\n        assignedBy: \"submissive\" as const, // Default assignment source\n      });\n\n      // 2. Trigger Firebase sync in background\n      if (navigator.onLine) {\n        firebaseSync.syncUserTasks(params.userId).catch((error) => {\n          logger.warn(\"Task creation sync failed\", { error });\n        });\n      }\n\n      return task;\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate and refetch tasks queries\n      queryClient.invalidateQueries({\n        queryKey: [\"tasks\", \"user\", variables.userId],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"tasks\", \"pending\", variables.userId],\n      });\n    },\n    onError: (error) => {\n      logger.error(\"Failed to create task\", { error });\n    },\n  });\n\n  const updateTaskStatus = useMutation({\n    mutationFn: async (params: {\n      taskId: string;\n      userId: string;\n      status: TaskStatus;\n      feedback?: string;\n    }) => {\n      // 1. Update local Dexie immediately\n      const updatedTask = await taskDBService.updateTaskStatus(\n        params.taskId,\n        params.status,\n        {\n          keyholderFeedback: params.feedback,\n        },\n      );\n\n      // 2. Trigger Firebase sync in background\n      if (navigator.onLine) {\n        firebaseSync.syncUserTasks(params.userId).catch((error) => {\n          logger.warn(\"Task status update sync failed\", { error });\n        });\n      }\n\n      return updatedTask;\n    },\n    onSuccess: (data, variables) => {\n      // Update specific task in cache\n      queryClient.setQueryData(\n        [\"tasks\", \"user\", variables.userId],\n        (oldTasks: DBTask[] | undefined) => {\n          if (!oldTasks) return oldTasks;\n          return oldTasks.map((task) =>\n            task.id === variables.taskId\n              ? { ...task, ...(data as Partial<DBTask>) }\n              : task,\n          );\n        },\n      );\n\n      // Invalidate related queries\n      queryClient.invalidateQueries({\n        queryKey: [\"tasks\", \"pending\", variables.userId],\n      });\n    },\n    onError: (error) => {\n      logger.error(\"Failed to update task status\", { error });\n    },\n  });\n\n  const deleteTask = useMutation({\n    mutationFn: async (params: { taskId: string; userId: string }) => {\n      // 1. Delete from local Dexie immediately\n      await taskDBService.deleteTask(params.taskId);\n\n      // 2. Trigger Firebase sync in background\n      if (navigator.onLine) {\n        firebaseSync.syncUserTasks(params.userId).catch((error) => {\n          logger.warn(\"Task deletion sync failed\", { error });\n        });\n      }\n\n      return params.taskId;\n    },\n    onSuccess: (taskId, variables) => {\n      // Remove task from cache\n      queryClient.setQueryData(\n        [\"tasks\", \"user\", variables.userId],\n        (oldTasks: DBTask[] | undefined) => {\n          if (!oldTasks) return oldTasks;\n          return oldTasks.filter((task) => task.id !== taskId);\n        },\n      );\n\n      // Invalidate related queries\n      queryClient.invalidateQueries({\n        queryKey: [\"tasks\", \"pending\", variables.userId],\n      });\n    },\n    onError: (error) => {\n      logger.error(\"Failed to delete task\", { error });\n    },\n  });\n\n  const submitTaskForReview = useMutation({\n    mutationFn: async (params: {\n      taskId: string;\n      userId: string;\n      note?: string;\n    }) => {\n      // 1. Update local Dexie immediately\n      const updatedTask = await taskDBService.updateTaskStatus(\n        params.taskId,\n        \"submitted\",\n        {\n          submissiveNote: params.note,\n        },\n      );\n\n      // 2. Trigger Firebase sync in background\n      if (navigator.onLine) {\n        firebaseSync.syncUserTasks(params.userId).catch((error) => {\n          logger.warn(\"Task submission sync failed\", { error });\n        });\n      }\n\n      return updatedTask;\n    },\n    onSuccess: (data, variables) => {\n      // Update task in cache\n      queryClient.setQueryData(\n        [\"tasks\", \"user\", variables.userId],\n        (oldTasks: DBTask[] | undefined) => {\n          if (!oldTasks) return oldTasks;\n          return oldTasks.map((task) =>\n            task.id === variables.taskId\n              ? { ...task, ...(data as Partial<DBTask>) }\n              : task,\n          );\n        },\n      );\n\n      // Invalidate pending tasks since this affects that query\n      queryClient.invalidateQueries({\n        queryKey: [\"tasks\", \"pending\", variables.userId],\n      });\n    },\n    onError: (error) => {\n      logger.error(\"Failed to submit task for review\", { error });\n    },\n  });\n\n  return {\n    createTask,\n    updateTaskStatus,\n    deleteTask,\n    submitTaskForReview,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/api/useTasks.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Function 'useTasks' has too many lines (77). Maximum allowed is 75.",
        "line": 69,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 166,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Function 'useUpdateTaskStatus' has too many lines (95). Maximum allowed is 75.",
        "line": 299,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 413,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { taskDBService } from \"../../services/database/TaskDBService\";\nimport { Task, TaskStatus } from \"../../types/database\";\nimport { logger } from \"../../utils/logging\";\n\n/**\n * Task Management Hooks - TanStack Query Integration\n *\n * Integrates with:\n * - taskDBService → Dexie → Firebase sync\n * - TasksPage.tsx, TaskManagement.tsx (critical fixes needed)\n *\n * Fixes:\n * - TasksPage.tsx:20 (taskDBService.findByUserId)\n * - TasksPage.tsx:34 (taskDBService.updateTaskStatus)\n *\n * Strategy: Optimistic update + background sync\n */\n\n// Query Keys\nexport const taskKeys = {\n  all: [\"tasks\"] as const,\n  lists: () => [...taskKeys.all, \"list\"] as const,\n  list: (userId: string, filters?: TaskFilters) =>\n    [...taskKeys.lists(), userId, filters] as const,\n  detail: (taskId: string) => [...taskKeys.all, \"detail\", taskId] as const,\n  byStatus: (userId: string, status: TaskStatus) =>\n    [...taskKeys.all, \"status\", userId, status] as const,\n  assigned: (userId: string) => [...taskKeys.all, \"assigned\", userId] as const,\n  assignedBy: (keyholderUid: string) =>\n    [...taskKeys.all, \"assignedBy\", keyholderUid] as const,\n} as const;\n\n// Types\ninterface TaskFilters {\n  status?: TaskStatus;\n  priority?: \"low\" | \"medium\" | \"high\";\n  category?: string;\n  assignedBy?: string;\n  dueDate?: {\n    start?: Date;\n    end?: Date;\n  };\n}\n\ninterface CreateTaskData {\n  title: string;\n  description?: string;\n  priority?: \"low\" | \"medium\" | \"high\";\n  category?: string;\n  dueDate?: Date;\n  assignedBy?: string; // keyholder UID\n  metadata?: Record<string, unknown>;\n}\n\ninterface UpdateTaskData {\n  title?: string;\n  description?: string;\n  priority?: \"low\" | \"medium\" | \"high\";\n  category?: string;\n  dueDate?: Date;\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Get tasks for a user with optional filtering\n * Fixes: TasksPage.tsx:20 (taskDBService.findByUserId)\n */\nexport function useTasks(userId: string, filters?: TaskFilters) {\n  return useQuery({\n    queryKey: taskKeys.list(userId, filters),\n    queryFn: async (): Promise<Task[]> => {\n      logger.info(\"Fetching tasks\", { userId, filters });\n\n      try {\n        const tasks = await taskDBService.findByUserId(userId);\n\n        // Apply filters\n        let filteredTasks = tasks;\n\n        if (filters?.status) {\n          filteredTasks = filteredTasks.filter(\n            (task) => task.status === filters.status,\n          );\n        }\n\n        if (filters?.priority) {\n          filteredTasks = filteredTasks.filter(\n            (task) => task.priority === filters.priority,\n          );\n        }\n\n        if (filters?.category) {\n          filteredTasks = filteredTasks.filter(\n            (task) => task.category === filters.category,\n          );\n        }\n\n        if (filters?.assignedBy) {\n          filteredTasks = filteredTasks.filter(\n            (task) => task.assignedBy === filters.assignedBy,\n          );\n        }\n\n        if (filters?.dueDate) {\n          filteredTasks = filteredTasks.filter((task) => {\n            if (!task.dueDate) return false;\n            const taskDue = new Date(task.dueDate);\n\n            if (filters.dueDate?.start && taskDue < filters.dueDate.start)\n              return false;\n            if (filters.dueDate?.end && taskDue > filters.dueDate.end)\n              return false;\n\n            return true;\n          });\n        }\n\n        // Sort by priority and due date\n        filteredTasks.sort((a, b) => {\n          // Priority sorting (high > medium > low)\n          const priorityOrder = { high: 3, medium: 2, low: 1 };\n          const aPriority = priorityOrder[a.priority || \"medium\"];\n          const bPriority = priorityOrder[b.priority || \"medium\"];\n\n          if (aPriority !== bPriority) {\n            return bPriority - aPriority;\n          }\n\n          // Due date sorting (sooner first)\n          if (a.dueDate && b.dueDate) {\n            return (\n              new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime()\n            );\n          }\n\n          if (a.dueDate && !b.dueDate) return -1;\n          if (!a.dueDate && b.dueDate) return 1;\n\n          // Created date sorting (newest first)\n          return (\n            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n          );\n        });\n\n        logger.info(\"Tasks retrieved successfully\", {\n          userId,\n          totalTasks: tasks.length,\n          filteredTasks: filteredTasks.length,\n        });\n\n        return filteredTasks;\n      } catch (error) {\n        logger.error(\"Failed to fetch tasks\", {\n          error: error instanceof Error ? error.message : String(error),\n          userId,\n          filters,\n        });\n        throw error;\n      }\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes - active data\n    gcTime: 30 * 60 * 1000, // 30 minutes garbage collection\n    enabled: !!userId,\n  });\n}\n\n/**\n * Get tasks by status (useful for kanban boards)\n */\nexport function useTasksByStatus(userId: string, status: TaskStatus) {\n  return useQuery({\n    queryKey: taskKeys.byStatus(userId, status),\n    queryFn: async (): Promise<Task[]> => {\n      const tasks = await taskDBService.findByUserId(userId);\n      return tasks.filter((task) => task.status === status);\n    },\n    staleTime: 2 * 60 * 1000,\n    enabled: !!userId,\n  });\n}\n\n/**\n * Get single task by ID\n */\nexport function useTask(taskId: string) {\n  return useQuery({\n    queryKey: taskKeys.detail(taskId),\n    queryFn: async (): Promise<Task | null> => {\n      logger.info(\"Fetching task detail\", { taskId });\n      const task = await taskDBService.findById(taskId);\n      return task ?? null;\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes - task details are stable\n    enabled: !!taskId,\n  });\n}\n\n/**\n * Get tasks assigned by a specific keyholder\n */\nexport function useTasksAssignedBy(keyholderUid: string) {\n  return useQuery({\n    queryKey: taskKeys.assignedBy(keyholderUid),\n    queryFn: async (): Promise<Task[]> => {\n      logger.info(\"Fetching tasks assigned by keyholder\", { keyholderUid });\n\n      // Note: This would require a different query method in the future\n      // For now, we'll need to scan all tasks (inefficient but works)\n      const allTasks = await taskDBService.getAll();\n      return allTasks.filter((task: Task) => task.assignedBy === keyholderUid);\n    },\n    staleTime: 5 * 60 * 1000,\n    enabled: !!keyholderUid,\n  });\n}\n\n/**\n * Create new task\n */\nexport function useCreateTask() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      userId,\n      taskData,\n    }: {\n      userId: string;\n      taskData: CreateTaskData;\n    }): Promise<Task> => {\n      logger.info(\"Creating new task\", { userId, title: taskData.title });\n\n      // Generate task ID\n      const taskId = `task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      const newTask: Task = {\n        id: taskId,\n        userId,\n        title: taskData.title,\n        description: taskData.description || \"\",\n        status: \"pending\",\n        priority: taskData.priority || \"medium\",\n        category: taskData.category,\n        dueDate: taskData.dueDate,\n        assignedBy:\n          (taskData.assignedBy as \"submissive\" | \"keyholder\") || \"submissive\",\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      // Dexie-first write for immediate UI response\n      await taskDBService.create(newTask);\n\n      logger.info(\"Task created successfully\", {\n        taskId,\n        userId,\n        title: taskData.title,\n      });\n\n      return newTask;\n    },\n    onSuccess: (\n      newTask: Task,\n      { userId }: { userId: string; taskData: CreateTaskData },\n    ) => {\n      logger.info(\"Task creation successful\", { taskId: newTask.id, userId });\n\n      // Invalidate task lists to trigger refetch\n      queryClient.invalidateQueries({ queryKey: taskKeys.lists() });\n      queryClient.invalidateQueries({\n        queryKey: taskKeys.byStatus(userId, \"pending\"),\n      });\n\n      // Optimistically add to cache if we have existing data\n      queryClient.setQueriesData(\n        { queryKey: taskKeys.list(userId) },\n        (oldData: Task[] | undefined) => {\n          if (!oldData) return undefined;\n          return [newTask, ...oldData];\n        },\n      );\n    },\n    onError: (error, { userId, taskData }) => {\n      logger.error(\"Task creation failed\", {\n        error: error instanceof Error ? error.message : String(error),\n        userId,\n        title: taskData.title,\n      });\n    },\n  });\n}\n\n/**\n * Update task status (most common operation)\n * Fixes: TasksPage.tsx:34 (taskDBService.updateTaskStatus)\n * Strategy: Optimistic update + background sync\n */\nexport function useUpdateTaskStatus() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      taskId,\n      userId,\n      status,\n      completedAt,\n    }: {\n      taskId: string;\n      userId: string;\n      status: TaskStatus;\n      completedAt?: Date;\n    }): Promise<Task> => {\n      logger.info(\"Updating task status\", { taskId, userId, status });\n\n      const existingTask = await taskDBService.findById(taskId);\n      if (!existingTask) {\n        throw new Error(`Task not found: ${taskId}`);\n      }\n\n      const updatedTask: Task = {\n        ...existingTask,\n        status,\n        completedAt:\n          status === \"completed\" ? completedAt || new Date() : undefined,\n        updatedAt: new Date(),\n      };\n\n      await taskDBService.updateTaskStatus(taskId, status);\n\n      logger.info(\"Task status updated successfully\", {\n        taskId,\n        userId,\n        status,\n      });\n\n      return updatedTask;\n    },\n    onMutate: async ({ taskId, userId, status }) => {\n      // Cancel outgoing refetches\n      await queryClient.cancelQueries({ queryKey: taskKeys.detail(taskId) });\n      await queryClient.cancelQueries({ queryKey: taskKeys.list(userId) });\n\n      // Snapshot previous values\n      const previousTask = queryClient.getQueryData(taskKeys.detail(taskId));\n      const previousTasks = queryClient.getQueryData(taskKeys.list(userId));\n\n      // Optimistically update task detail\n      queryClient.setQueryData(\n        taskKeys.detail(taskId),\n        (old: Task | undefined) => {\n          if (!old) return old;\n          return { ...old, status, updatedAt: new Date() };\n        },\n      );\n\n      // Optimistically update task lists\n      queryClient.setQueriesData(\n        { queryKey: taskKeys.list(userId) },\n        (oldData: Task[] | undefined) => {\n          if (!oldData) return oldData;\n          return oldData.map((task) =>\n            task.id === taskId\n              ? { ...task, status, updatedAt: new Date() }\n              : task,\n          );\n        },\n      );\n\n      return { previousTask, previousTasks };\n    },\n    onSuccess: (\n      updatedTask: Task,\n      {\n        userId,\n        taskId,\n      }: { userId: string; taskId: string; status: TaskStatus },\n    ) => {\n      logger.info(\"Task status update successful\", {\n        taskId,\n        userId,\n        status: updatedTask.status,\n      });\n\n      // Invalidate relevant queries\n      queryClient.invalidateQueries({\n        queryKey: taskKeys.byStatus(userId, updatedTask.status),\n      });\n\n      // If task was completed, invalidate pending tasks\n      if (updatedTask.status === \"completed\") {\n        queryClient.invalidateQueries({\n          queryKey: taskKeys.byStatus(userId, \"pending\"),\n        });\n      }\n    },\n    onError: (error, { taskId, userId }, context) => {\n      logger.error(\"Task status update failed\", {\n        error: error instanceof Error ? error.message : String(error),\n        taskId,\n        userId,\n      });\n\n      // Rollback optimistic updates\n      if (context?.previousTask) {\n        queryClient.setQueryData(taskKeys.detail(taskId), context.previousTask);\n      }\n      if (context?.previousTasks) {\n        queryClient.setQueryData(taskKeys.list(userId), context.previousTasks);\n      }\n    },\n  });\n}\n\n/**\n * Update full task details\n */\nexport function useUpdateTask() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      taskId,\n      userId,\n      updates,\n    }: {\n      taskId: string;\n      userId: string;\n      updates: UpdateTaskData;\n    }): Promise<Task> => {\n      logger.info(\"Updating task\", { taskId, userId });\n\n      const existingTask = await taskDBService.findById(taskId);\n      if (!existingTask) {\n        throw new Error(`Task not found: ${taskId}`);\n      }\n\n      const updatedTask: Task = {\n        ...existingTask,\n        ...updates,\n        updatedAt: new Date(),\n      };\n\n      await taskDBService.update(taskId, updatedTask);\n\n      logger.info(\"Task updated successfully\", { taskId, userId });\n\n      return updatedTask;\n    },\n    onSuccess: (\n      updatedTask: Task,\n      {\n        userId,\n        taskId,\n      }: { userId: string; taskId: string; updates: UpdateTaskData },\n    ) => {\n      logger.info(\"Task update successful\", { taskId, userId });\n\n      // Update detail cache\n      queryClient.setQueryData(taskKeys.detail(taskId), updatedTask);\n\n      // Invalidate list queries to reflect changes\n      queryClient.invalidateQueries({ queryKey: taskKeys.lists() });\n      queryClient.invalidateQueries({\n        queryKey: taskKeys.byStatus(userId, updatedTask.status),\n      });\n    },\n    onError: (error, { taskId, userId }) => {\n      logger.error(\"Task update failed\", {\n        error: error instanceof Error ? error.message : String(error),\n        taskId,\n        userId,\n      });\n    },\n  });\n}\n\n/**\n * Delete task\n */\nexport function useDeleteTask() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      taskId,\n      userId,\n    }: {\n      taskId: string;\n      userId: string;\n    }): Promise<void> => {\n      logger.info(\"Deleting task\", { taskId, userId });\n\n      await taskDBService.delete(taskId);\n\n      logger.info(\"Task deleted successfully\", { taskId, userId });\n    },\n    onSuccess: (\n      _: void,\n      { taskId, userId }: { taskId: string; userId: string },\n    ) => {\n      logger.info(\"Task deletion successful\", { taskId, userId });\n\n      // Remove from detail cache\n      queryClient.removeQueries({ queryKey: taskKeys.detail(taskId) });\n\n      // Invalidate list queries\n      queryClient.invalidateQueries({ queryKey: taskKeys.lists() });\n      queryClient.invalidateQueries({\n        queryKey: taskKeys.byStatus(userId, \"pending\"),\n      });\n      queryClient.invalidateQueries({\n        queryKey: taskKeys.byStatus(userId, \"completed\"),\n      });\n\n      // Optimistically remove from cached lists\n      queryClient.setQueriesData(\n        { queryKey: taskKeys.list(userId) },\n        (oldData: Task[] | undefined) => {\n          if (!oldData) return undefined;\n          return oldData.filter((task) => task.id !== taskId);\n        },\n      );\n    },\n    onError: (error, { taskId, userId }) => {\n      logger.error(\"Task deletion failed\", {\n        error: error instanceof Error ? error.message : String(error),\n        taskId,\n        userId,\n      });\n    },\n  });\n}\n\n/**\n * Get task statistics for dashboard\n */\nexport function useTaskStats(userId: string) {\n  return useQuery({\n    queryKey: [...taskKeys.all, \"stats\", userId],\n    queryFn: async () => {\n      logger.info(\"Calculating task statistics\", { userId });\n\n      const tasks = await taskDBService.findByUserId(userId);\n\n      const stats = {\n        total: tasks.length,\n        pending: tasks.filter((t) => t.status === \"pending\").length,\n        inProgress: tasks.filter((t) => t.status === \"in_progress\").length,\n        completed: tasks.filter((t) => t.status === \"completed\").length,\n        overdue: tasks.filter((t) => {\n          if (!t.dueDate || t.status === \"completed\") return false;\n          return new Date(t.dueDate) < new Date();\n        }).length,\n        byPriority: {\n          high: tasks.filter((t) => t.priority === \"high\").length,\n          medium: tasks.filter((t) => t.priority === \"medium\").length,\n          low: tasks.filter((t) => t.priority === \"low\").length,\n        },\n        completionRate:\n          tasks.length > 0\n            ? Math.round(\n                (tasks.filter((t) => t.status === \"completed\").length /\n                  tasks.length) *\n                  100,\n              )\n            : 0,\n      };\n\n      return stats;\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    enabled: !!userId,\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/mobile/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/mobile/useHapticFeedback.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/mobile/usePullToRefresh.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (107). Maximum allowed is 75.",
        "line": 28,
        "column": 33,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 159,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Pull to Refresh Hook\n * Provides pull-to-refresh functionality for mobile devices\n */\nimport { useCallback, useRef, useState, useEffect } from \"react\";\nimport type { React } from \"react\";\nimport { useHapticFeedback } from \"./useHapticFeedback\";\nimport { logger } from \"../../utils/logging\";\n\ninterface PullToRefreshOptions {\n  threshold?: number;\n  maxPullDistance?: number;\n  onRefresh: () => Promise<void> | void;\n  disabled?: boolean;\n}\n\ninterface PullToRefreshReturn {\n  isRefreshing: boolean;\n  isPulling: boolean;\n  pullDistance: number;\n  pullPercentage: number;\n  onTouchStart: (e: React.TouchEvent) => void;\n  onTouchMove: (e: React.TouchEvent) => void;\n  onTouchEnd: (e: React.TouchEvent) => void;\n  onScroll: (e: React.UIEvent) => void;\n}\n\nexport const usePullToRefresh = ({\n  threshold = 80,\n  maxPullDistance = 120,\n  onRefresh,\n  disabled = false,\n}: PullToRefreshOptions): PullToRefreshReturn => {\n  const { light: hapticLight, success: hapticSuccess } = useHapticFeedback();\n\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [isPulling, setIsPulling] = useState(false);\n  const [pullDistance, setPullDistance] = useState(0);\n  const [_scrollTop, setScrollTop] = useState(0);\n\n  const startY = useRef<number>(0);\n  const currentY = useRef<number>(0);\n  const isAtTop = useRef<boolean>(true);\n  const hasTriggeredHaptic = useRef<boolean>(false);\n\n  const pullPercentage = Math.min((pullDistance / threshold) * 100, 100);\n\n  const handleTouchStart = useCallback(\n    (e: React.TouchEvent) => {\n      if (disabled || isRefreshing) return;\n\n      const touch = e.touches[0];\n      if (!touch) return;\n\n      startY.current = touch.clientY;\n      currentY.current = touch.clientY;\n      hasTriggeredHaptic.current = false;\n    },\n    [disabled, isRefreshing],\n  );\n\n  const handleTouchMove = useCallback(\n    (e: React.TouchEvent) => {\n      if (disabled || isRefreshing || !isAtTop.current) return;\n\n      const touch = e.touches[0];\n      if (!touch) return;\n\n      currentY.current = touch.clientY;\n      const deltaY = currentY.current - startY.current;\n\n      if (deltaY > 0) {\n        // Pulling down\n        const distance = Math.min(deltaY * 0.5, maxPullDistance); // Apply resistance\n        setPullDistance(distance);\n        setIsPulling(distance > 10);\n\n        // Haptic feedback when threshold is reached\n        if (distance >= threshold && !hasTriggeredHaptic.current) {\n          hapticLight();\n          hasTriggeredHaptic.current = true;\n        }\n\n        // Prevent default scrolling when pulling\n        if (deltaY > 10) {\n          e.preventDefault();\n        }\n      } else {\n        setPullDistance(0);\n        setIsPulling(false);\n      }\n    },\n    [disabled, isRefreshing, threshold, maxPullDistance, hapticLight],\n  );\n\n  const handleTouchEnd = useCallback(async () => {\n    if (disabled || isRefreshing) return;\n\n    if (pullDistance >= threshold) {\n      setIsRefreshing(true);\n      hapticSuccess();\n\n      try {\n        await onRefresh();\n      } catch (error) {\n        logger.error(\"Pull to refresh failed\", { error }, \"usePullToRefresh\");\n      } finally {\n        setIsRefreshing(false);\n      }\n    }\n\n    setPullDistance(0);\n    setIsPulling(false);\n    hasTriggeredHaptic.current = false;\n  }, [\n    disabled,\n    isRefreshing,\n    pullDistance,\n    threshold,\n    onRefresh,\n    hapticSuccess,\n  ]);\n\n  const handleScroll = useCallback(\n    (e: React.UIEvent) => {\n      const target = e.currentTarget as HTMLElement;\n      const scrollTop = target.scrollTop;\n      setScrollTop(scrollTop);\n      isAtTop.current = scrollTop <= 0;\n\n      // Reset pull state when scrolling away from top\n      if (scrollTop > 0 && isPulling) {\n        setPullDistance(0);\n        setIsPulling(false);\n      }\n    },\n    [isPulling],\n  );\n\n  // Reset states when disabled changes\n  useEffect(() => {\n    if (disabled) {\n      setPullDistance(0);\n      setIsPulling(false);\n      setIsRefreshing(false);\n    }\n  }, [disabled]);\n\n  return {\n    isRefreshing,\n    isPulling,\n    pullDistance,\n    pullPercentage,\n    onTouchStart: handleTouchStart,\n    onTouchMove: handleTouchMove,\n    onTouchEnd: handleTouchEnd,\n    onScroll: handleScroll,\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/mobile/useTouchGestures.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (94). Maximum allowed is 75.",
        "line": 83,
        "column": 33,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 205,
        "endColumn": 2
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "Hook files should only export hooks (functions starting with 'use')",
        "line": 224,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "restrictedSyntax",
        "endLine": 224,
        "endColumn": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Touch Gestures Hook\n * Provides swipe, tap, and other touch interactions for mobile devices\n */\nimport { useCallback, useRef, useState } from \"react\";\nimport type { React } from \"react\";\n\ninterface TouchPoint {\n  x: number;\n  y: number;\n  timestamp: number;\n}\n\ninterface SwipeOptions {\n  minDistance?: number;\n  maxTime?: number;\n  threshold?: number;\n}\n\ninterface UseTouchGesturesReturn {\n  onTouchStart: (e: React.TouchEvent) => void;\n  onTouchMove: (e: React.TouchEvent) => void;\n  onTouchEnd: (e: React.TouchEvent) => void;\n  isSwipeActive: boolean;\n}\n\ninterface TouchGestureHandlers {\n  onSwipeLeft?: () => void;\n  onSwipeRight?: () => void;\n  onSwipeUp?: () => void;\n  onSwipeDown?: () => void;\n  onTap?: () => void;\n  onLongPress?: () => void;\n}\n\n// Helper function to determine if a gesture is a tap\nconst isTapGesture = (\n  deltaX: number,\n  deltaY: number,\n  threshold: number,\n): boolean => {\n  return Math.abs(deltaX) < threshold && Math.abs(deltaY) < threshold;\n};\n\n// Helper function to determine swipe direction and trigger handler\nconst handleSwipeGesture = (\n  deltaX: number,\n  deltaY: number,\n  minDistance: number,\n  handlers: TouchGestureHandlers,\n): void => {\n  const absDeltaX = Math.abs(deltaX);\n  const absDeltaY = Math.abs(deltaY);\n\n  if (absDeltaX > absDeltaY && absDeltaX >= minDistance) {\n    // Horizontal swipe\n    if (deltaX > 0) {\n      handlers.onSwipeRight?.();\n    } else {\n      handlers.onSwipeLeft?.();\n    }\n  } else if (absDeltaY >= minDistance) {\n    // Vertical swipe\n    if (deltaY > 0) {\n      handlers.onSwipeDown?.();\n    } else {\n      handlers.onSwipeUp?.();\n    }\n  }\n};\n\n// Helper function to reset touch state\nconst resetTouchState = (\n  touchStart: React.MutableRefObject<TouchPoint | null>,\n  touchCurrent: React.MutableRefObject<TouchPoint | null>,\n  setIsSwipeActive: (active: boolean) => void,\n): void => {\n  touchStart.current = null;\n  touchCurrent.current = null;\n  setIsSwipeActive(false);\n};\n\nexport const useTouchGestures = (\n  handlers: TouchGestureHandlers,\n  options: SwipeOptions = {},\n): UseTouchGesturesReturn => {\n  const { minDistance = 50, maxTime = 1000, threshold = 30 } = options;\n\n  const touchStart = useRef<TouchPoint | null>(null);\n  const touchCurrent = useRef<TouchPoint | null>(null);\n  const longPressTimer = useRef<ReturnType<typeof setTimeout> | null>(null);\n  const [isSwipeActive, setIsSwipeActive] = useState(false);\n\n  const clearLongPressTimer = useCallback(() => {\n    if (longPressTimer.current) {\n      clearTimeout(longPressTimer.current);\n      longPressTimer.current = null;\n    }\n  }, []);\n\n  const handleTouchStart = useCallback(\n    (e: React.TouchEvent) => {\n      const touch = e.touches[0];\n      if (!touch) return;\n\n      const touchPoint: TouchPoint = {\n        x: touch.clientX,\n        y: touch.clientY,\n        timestamp: Date.now(),\n      };\n\n      touchStart.current = touchPoint;\n      touchCurrent.current = touchPoint;\n      setIsSwipeActive(false);\n\n      // Start long press timer\n      if (handlers.onLongPress) {\n        longPressTimer.current = setTimeout(() => {\n          handlers.onLongPress?.();\n        }, 500);\n      }\n\n      // Prevent default to avoid iOS bounce\n      if (e.cancelable) {\n        e.preventDefault();\n      }\n    },\n    [handlers],\n  );\n\n  const handleTouchMove = useCallback(\n    (e: React.TouchEvent) => {\n      const touch = e.touches[0];\n      if (!touch || !touchStart.current) return;\n\n      touchCurrent.current = {\n        x: touch.clientX,\n        y: touch.clientY,\n        timestamp: Date.now(),\n      };\n\n      const deltaX = Math.abs(touch.clientX - touchStart.current.x);\n      const deltaY = Math.abs(touch.clientY - touchStart.current.y);\n\n      // Clear long press if we've moved significantly\n      if (deltaX > threshold || deltaY > threshold) {\n        clearLongPressTimer();\n\n        // Set swipe active if we've moved enough\n        if (deltaX > minDistance || deltaY > minDistance) {\n          setIsSwipeActive(true);\n        }\n      }\n\n      // Prevent scrolling during horizontal swipes\n      if (deltaX > deltaY && deltaX > threshold) {\n        e.preventDefault();\n      }\n    },\n    [minDistance, threshold, clearLongPressTimer],\n  );\n\n  const handleTouchEnd = useCallback(\n    (_e: React.TouchEvent) => {\n      clearLongPressTimer();\n\n      if (!touchStart.current || !touchCurrent.current) {\n        resetTouchState(touchStart, touchCurrent, setIsSwipeActive);\n        return;\n      }\n\n      const startPoint = touchStart.current;\n      const endPoint = touchCurrent.current;\n      const deltaTime = endPoint.timestamp - startPoint.timestamp;\n\n      // Check if gesture was too slow\n      if (deltaTime > maxTime) {\n        resetTouchState(touchStart, touchCurrent, setIsSwipeActive);\n        return;\n      }\n\n      const deltaX = endPoint.x - startPoint.x;\n      const deltaY = endPoint.y - startPoint.y;\n\n      // Determine if it's a tap (small movement)\n      if (isTapGesture(deltaX, deltaY, threshold)) {\n        handlers.onTap?.();\n        resetTouchState(touchStart, touchCurrent, setIsSwipeActive);\n        return;\n      }\n\n      // Handle swipe gestures\n      handleSwipeGesture(deltaX, deltaY, minDistance, handlers);\n      resetTouchState(touchStart, touchCurrent, setIsSwipeActive);\n    },\n    [handlers, maxTime, minDistance, threshold, clearLongPressTimer],\n  );\n\n  return {\n    onTouchStart: handleTouchStart,\n    onTouchMove: handleTouchMove,\n    onTouchEnd: handleTouchEnd,\n    isSwipeActive,\n  };\n};\n\n/**\n * Simplified swipe hook for common use cases\n */\nexport const useSwipeGestures = (\n  onSwipeLeft?: () => void,\n  onSwipeRight?: () => void,\n  options?: SwipeOptions,\n) => {\n  return useTouchGestures(\n    {\n      onSwipeLeft,\n      onSwipeRight,\n    },\n    options,\n  );\n};\n\nexport default useTouchGestures;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/mobile/useViewport.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (94). Maximum allowed is 75.",
        "line": 32,
        "column": 28,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 146,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'updateSafeAreaInsets' and 'updateViewport'. Either include them or remove the dependency array.",
        "line": 124,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 124,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [updateSafeAreaInsets, updateViewport]",
            "fix": {
              "range": [3158, 3160],
              "text": "[updateSafeAreaInsets, updateViewport]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Viewport Hook\n * Provides viewport dimensions and mobile-specific viewport utilities\n */\nimport { useState, useEffect, useCallback } from \"react\";\n\ninterface ViewportSize {\n  width: number;\n  height: number;\n  innerWidth: number;\n  innerHeight: number;\n}\n\ninterface ViewportInfo extends ViewportSize {\n  isMobile: boolean;\n  isTablet: boolean;\n  isDesktop: boolean;\n  isLandscape: boolean;\n  isPortrait: boolean;\n  safeAreaInsets: {\n    top: number;\n    bottom: number;\n    left: number;\n    right: number;\n  };\n}\n\n// Breakpoints\nconst MOBILE_BREAKPOINT = 768;\nconst TABLET_BREAKPOINT = 1024;\n\nexport const useViewport = (): ViewportInfo => {\n  const [viewport, setViewport] = useState<ViewportSize>(() => {\n    if (typeof window === \"undefined\") {\n      return {\n        width: 0,\n        height: 0,\n        innerWidth: 0,\n        innerHeight: 0,\n      };\n    }\n\n    return {\n      width: window.screen.width,\n      height: window.screen.height,\n      innerWidth: window.innerWidth,\n      innerHeight: window.innerHeight,\n    };\n  });\n\n  const [safeAreaInsets, setSafeAreaInsets] = useState({\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n  });\n\n  const updateViewport = useCallback(() => {\n    setViewport({\n      width: window.screen.width,\n      height: window.screen.height,\n      innerWidth: window.innerWidth,\n      innerHeight: window.innerHeight,\n    });\n  }, []);\n\n  const updateSafeAreaInsets = useCallback(() => {\n    if (typeof window === \"undefined\" || !window.getComputedStyle) return;\n\n    const computedStyle = window.getComputedStyle(document.documentElement);\n\n    setSafeAreaInsets({\n      top: parseInt(\n        computedStyle.getPropertyValue(\"env(safe-area-inset-top)\") || \"0\",\n      ),\n      bottom: parseInt(\n        computedStyle.getPropertyValue(\"env(safe-area-inset-bottom)\") || \"0\",\n      ),\n      left: parseInt(\n        computedStyle.getPropertyValue(\"env(safe-area-inset-left)\") || \"0\",\n      ),\n      right: parseInt(\n        computedStyle.getPropertyValue(\"env(safe-area-inset-right)\") || \"0\",\n      ),\n    });\n  }, []);\n\n  useEffect(() => {\n    if (typeof window === \"undefined\") return;\n\n    updateViewport();\n    updateSafeAreaInsets();\n\n    // Handle resize events with throttling\n    let timeoutId: ReturnType<typeof setTimeout>;\n    const handleResize = () => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => {\n        updateViewport();\n        updateSafeAreaInsets();\n      }, 150);\n    };\n\n    // Handle orientation change\n    const handleOrientationChange = () => {\n      // Delay to account for viewport changes after orientation change\n      setTimeout(() => {\n        updateViewport();\n        updateSafeAreaInsets();\n      }, 500);\n    };\n\n    window.addEventListener(\"resize\", handleResize, { passive: true });\n    window.addEventListener(\"orientationchange\", handleOrientationChange, {\n      passive: true,\n    });\n\n    return () => {\n      clearTimeout(timeoutId);\n      window.removeEventListener(\"resize\", handleResize);\n      window.removeEventListener(\"orientationchange\", handleOrientationChange);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Determine device type based on viewport width\n  const isMobile = viewport.innerWidth < MOBILE_BREAKPOINT;\n  const isTablet =\n    viewport.innerWidth >= MOBILE_BREAKPOINT &&\n    viewport.innerWidth < TABLET_BREAKPOINT;\n  const isDesktop = viewport.innerWidth >= TABLET_BREAKPOINT;\n\n  // Determine orientation\n  const isLandscape = viewport.innerWidth > viewport.innerHeight;\n  const isPortrait = viewport.innerHeight >= viewport.innerWidth;\n\n  return {\n    ...viewport,\n    isMobile,\n    isTablet,\n    isDesktop,\n    isLandscape,\n    isPortrait,\n    safeAreaInsets,\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/profile/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/profile/useProfileAchievements.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/profile/useProfilePrivacy.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/profile/useProfileSharing.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/profile/useProfileStats.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/profile/usePublicProfile.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/relationships/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/relationships/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/relationships/useRelationshipActions.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/relationships/useRelationshipInvites.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "zustand-safe-patterns/zustand-no-store-actions-in-deps",
        "severity": 2,
        "message": "Dangerous pattern: Store action in useEffect dependency array! This causes React error #185 infinite render loops. Zustand store actions are stable and should not be in dependency arrays. Remove store actions from the dependency array to fix this issue.",
        "line": 91,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "noStoreActionsInDeps",
        "endLine": 91,
        "endColumn": 34,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/relationships/useRelationshipList.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadRelationships'. Either include it or remove the dependency array.",
        "line": 82,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 82,
        "endColumn": 14,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadRelationships, userId]",
            "fix": {
              "range": [2493, 2501],
              "text": "[loadRelationships, userId]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/relationships/useRelationshipPermissions.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/relationships/useRelationshipStatus.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Function 'useRelationshipStatus' has too many lines (138). Maximum allowed is 75.",
        "line": 43,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 199,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * React Hook for Relationship Status Management\n * Handles session management and status updates\n */\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useAuthState } from \"@/contexts/AuthContext\";\nimport { relationshipChastityService } from \"@/services/database/RelationshipChastityService\";\nimport {\n  RelationshipChastityData,\n  RelationshipSession,\n} from \"@/types/relationships\";\nimport { BaseHookState, BaseHookActions } from \"./types\";\nimport { withErrorHandling, createBaseActions } from \"./utils\";\n\ninterface RelationshipStatusState extends BaseHookState {\n  chastityData: RelationshipChastityData | null;\n  sessions: RelationshipSession[];\n}\n\ninterface RelationshipStatusActions extends BaseHookActions {\n  startSession: (\n    relationshipId: string,\n    options?: {\n      goalDuration?: number;\n      isHardcoreMode?: boolean;\n      notes?: string;\n    },\n  ) => Promise<void>;\n  endSession: (\n    relationshipId: string,\n    sessionId: string,\n    reason?: string,\n  ) => Promise<void>;\n  pauseSession: (\n    relationshipId: string,\n    sessionId: string,\n    reason?: string,\n  ) => Promise<void>;\n  resumeSession: (relationshipId: string, sessionId: string) => Promise<void>;\n  loadRelationshipData: (relationshipId: string) => Promise<void>;\n}\n\nexport function useRelationshipStatus(): RelationshipStatusState &\n  RelationshipStatusActions {\n  const { user } = useAuthState();\n  const userId = user?.uid;\n\n  const [state, setState] = useState<RelationshipStatusState>({\n    chastityData: null,\n    sessions: [],\n    isLoading: false,\n    error: null,\n  });\n\n  const { clearError: clearErrorFn } = createBaseActions();\n\n  const loadChastityData = useCallback(async (relationshipId: string) => {\n    return withErrorHandling(\n      async () => {\n        const chastityData =\n          await relationshipChastityService.getChastityData(relationshipId);\n        setState((prev) => ({ ...prev, chastityData }));\n      },\n      \"load chastity data\",\n      setState,\n    );\n  }, []);\n\n  const loadSessions = useCallback(async (relationshipId: string) => {\n    return withErrorHandling(\n      async () => {\n        const sessions =\n          await relationshipChastityService.getSessionHistory(relationshipId);\n        setState((prev) => ({ ...prev, sessions }));\n      },\n      \"load sessions\",\n      setState,\n    );\n  }, []);\n\n  const loadRelationshipData = useCallback(\n    async (relationshipId: string) => {\n      await Promise.all([\n        loadChastityData(relationshipId),\n        loadSessions(relationshipId),\n      ]);\n    },\n    [loadChastityData, loadSessions],\n  );\n\n  const startSession = useCallback(\n    async (\n      relationshipId: string,\n      options?: {\n        goalDuration?: number;\n        isHardcoreMode?: boolean;\n        notes?: string;\n      },\n    ) => {\n      if (!userId) throw new Error(\"User not authenticated\");\n\n      return withErrorHandling(\n        async () => {\n          await relationshipChastityService.startSession(\n            relationshipId,\n            userId,\n            options || {},\n          );\n          await loadRelationshipData(relationshipId);\n        },\n        \"start session\",\n        setState,\n      );\n    },\n    [userId, loadRelationshipData],\n  );\n\n  const endSession = useCallback(\n    async (relationshipId: string, sessionId: string, reason?: string) => {\n      if (!userId) throw new Error(\"User not authenticated\");\n\n      return withErrorHandling(\n        async () => {\n          await relationshipChastityService.endSession(\n            relationshipId,\n            sessionId,\n            userId,\n            reason,\n          );\n          await loadRelationshipData(relationshipId);\n        },\n        \"end session\",\n        setState,\n      );\n    },\n    [userId, loadRelationshipData],\n  );\n\n  const pauseSession = useCallback(\n    async (relationshipId: string, sessionId: string, reason?: string) => {\n      if (!userId) throw new Error(\"User not authenticated\");\n\n      return withErrorHandling(\n        async () => {\n          await relationshipChastityService.pauseSession(\n            relationshipId,\n            sessionId,\n            userId,\n            reason,\n          );\n          await loadRelationshipData(relationshipId);\n        },\n        \"pause session\",\n        setState,\n      );\n    },\n    [userId, loadRelationshipData],\n  );\n\n  const resumeSession = useCallback(\n    async (relationshipId: string, sessionId: string) => {\n      if (!userId) throw new Error(\"User not authenticated\");\n\n      return withErrorHandling(\n        async () => {\n          await relationshipChastityService.resumeSession(\n            relationshipId,\n            sessionId,\n            userId,\n          );\n          await loadRelationshipData(relationshipId);\n        },\n        \"resume session\",\n        setState,\n      );\n    },\n    [userId, loadRelationshipData],\n  );\n\n  const clearError = useCallback(() => {\n    clearErrorFn(setState);\n  }, [clearErrorFn]);\n\n  // Set up real-time listeners for active relationship data\n  useEffect(() => {\n    // This would be called externally when activeRelationship changes\n    // The parent hook will need to manage this subscription\n  }, []);\n\n  return {\n    ...state,\n    startSession,\n    endSession,\n    pauseSession,\n    resumeSession,\n    loadRelationshipData,\n    clearError,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/relationships/useRelationshipTasks.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Function 'useRelationshipTasks' has too many lines (132). Maximum allowed is 75.",
        "line": 44,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 192,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * React Hook for Relationship Task and Event Management\n * Handles creating, updating tasks and logging events\n */\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useAuthState } from \"@/contexts/AuthContext\";\nimport { relationshipChastityService } from \"@/services/database/RelationshipChastityService\";\nimport { RelationshipTask, RelationshipEvent } from \"@/types/relationships\";\nimport { BaseHookState, BaseHookActions } from \"./types\";\nimport { withErrorHandling, createBaseActions } from \"./utils\";\n\ninterface RelationshipTasksState extends BaseHookState {\n  tasks: RelationshipTask[];\n  events: RelationshipEvent[];\n}\n\ninterface RelationshipTasksActions extends BaseHookActions {\n  createTask: (\n    relationshipId: string,\n    taskData: {\n      text: string;\n      dueDate?: Date;\n      consequence?: RelationshipTask[\"consequence\"];\n    },\n  ) => Promise<void>;\n  updateTaskStatus: (\n    relationshipId: string,\n    taskId: string,\n    status: RelationshipTask[\"status\"],\n    note?: string,\n  ) => Promise<void>;\n  logEvent: (\n    relationshipId: string,\n    eventData: {\n      type: RelationshipEvent[\"type\"];\n      details: RelationshipEvent[\"details\"];\n      isPrivate?: boolean;\n      tags?: string[];\n    },\n  ) => Promise<void>;\n  loadRelationshipData: (relationshipId: string) => Promise<void>;\n}\n\nexport function useRelationshipTasks(): RelationshipTasksState &\n  RelationshipTasksActions {\n  const { user } = useAuthState();\n  const userId = user?.uid;\n\n  const [state, setState] = useState<RelationshipTasksState>({\n    tasks: [],\n    events: [],\n    isLoading: false,\n    error: null,\n  });\n\n  const { clearError: clearErrorFn } = createBaseActions();\n\n  const loadTasks = useCallback(async (relationshipId: string) => {\n    return withErrorHandling(\n      async () => {\n        const tasks =\n          await relationshipChastityService.getTasks(relationshipId);\n        setState((prev) => ({ ...prev, tasks }));\n      },\n      \"load tasks\",\n      setState,\n    );\n  }, []);\n\n  const loadEvents = useCallback(async (relationshipId: string) => {\n    return withErrorHandling(\n      async () => {\n        const events =\n          await relationshipChastityService.getEvents(relationshipId);\n        setState((prev) => ({ ...prev, events }));\n      },\n      \"load events\",\n      setState,\n    );\n  }, []);\n\n  const loadRelationshipData = useCallback(\n    async (relationshipId: string) => {\n      await Promise.all([\n        loadTasks(relationshipId),\n        loadEvents(relationshipId),\n      ]);\n    },\n    [loadTasks, loadEvents],\n  );\n\n  const createTask = useCallback(\n    async (\n      relationshipId: string,\n      taskData: {\n        text: string;\n        dueDate?: Date;\n        consequence?: RelationshipTask[\"consequence\"];\n      },\n    ) => {\n      if (!userId) throw new Error(\"User not authenticated\");\n\n      return withErrorHandling(\n        async () => {\n          await relationshipChastityService.createTask(\n            relationshipId,\n            taskData,\n            userId,\n          );\n          await loadTasks(relationshipId);\n        },\n        \"create task\",\n        setState,\n      );\n    },\n    [userId, loadTasks],\n  );\n\n  const updateTaskStatus = useCallback(\n    async (\n      relationshipId: string,\n      taskId: string,\n      status: RelationshipTask[\"status\"],\n      note?: string,\n    ) => {\n      if (!userId) throw new Error(\"User not authenticated\");\n\n      return withErrorHandling(\n        async () => {\n          await relationshipChastityService.updateTaskStatus(\n            relationshipId,\n            taskId,\n            status,\n            userId,\n            note,\n          );\n          await loadTasks(relationshipId);\n        },\n        \"update task status\",\n        setState,\n      );\n    },\n    [userId, loadTasks],\n  );\n\n  const logEvent = useCallback(\n    async (\n      relationshipId: string,\n      eventData: {\n        type: RelationshipEvent[\"type\"];\n        details: RelationshipEvent[\"details\"];\n        isPrivate?: boolean;\n        tags?: string[];\n      },\n    ) => {\n      if (!userId) throw new Error(\"User not authenticated\");\n\n      return withErrorHandling(\n        async () => {\n          await relationshipChastityService.logEvent(\n            relationshipId,\n            eventData,\n            userId,\n          );\n          await loadEvents(relationshipId);\n        },\n        \"log event\",\n        setState,\n      );\n    },\n    [userId, loadEvents],\n  );\n\n  const clearError = useCallback(() => {\n    clearErrorFn(setState);\n  }, [clearErrorFn]);\n\n  // Set up real-time listeners for tasks\n  useEffect(() => {\n    // This would be called externally when activeRelationship changes\n    // The parent hook will need to manage this subscription\n  }, []);\n\n  return {\n    ...state,\n    createTask,\n    updateTaskStatus,\n    logEvent,\n    loadRelationshipData,\n    clearError,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/relationships/useRelationshipValidation.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Function 'useRelationshipValidation' has too many lines (82). Maximum allowed is 75.",
        "line": 30,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 132,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * React Hook for Relationship Form Validation\n * Handles validation logic for relationship forms and rules\n */\nimport { useState, useCallback } from \"react\";\nimport { useAuthState } from \"@/contexts/AuthContext\";\nimport { dataMigrationService } from \"@/services/migration/DataMigrationService\";\nimport { BaseHookState, BaseHookActions } from \"./types\";\nimport { withErrorHandling, createBaseActions } from \"./utils\";\nimport type { KeyholderPermissions } from \"@/types/core\";\n\ninterface RelationshipValidationState extends BaseHookState {\n  needsMigration: boolean;\n}\n\ninterface RelationshipValidationActions extends BaseHookActions {\n  migrateSingleUserData: () => Promise<void>;\n  checkMigrationStatus: () => Promise<void>;\n  validateRequestForm: (formData: {\n    email: string;\n    role: \"submissive\" | \"keyholder\";\n    message?: string;\n  }) => { isValid: boolean; errors: string[] };\n  validatePermissionsForm: (permissions: KeyholderPermissions) => {\n    isValid: boolean;\n    errors: string[];\n  };\n}\n\nexport function useRelationshipValidation(): RelationshipValidationState &\n  RelationshipValidationActions {\n  const { user } = useAuthState();\n  const userId = user?.uid;\n\n  const [state, setState] = useState<RelationshipValidationState>({\n    needsMigration: false,\n    isLoading: false,\n    error: null,\n  });\n\n  const { clearError: clearErrorFn } = createBaseActions();\n\n  const checkMigrationStatus = useCallback(async () => {\n    if (!userId) return;\n\n    try {\n      const needsMigration = await dataMigrationService.needsMigration(userId);\n      setState((prev) => ({ ...prev, needsMigration }));\n    } catch {\n      // Silent fail for migration check - using logger instead of console\n      // logger.warn(\"Failed to check migration status\", error);\n    }\n  }, [userId]);\n\n  const migrateSingleUserData = useCallback(async () => {\n    if (!userId) throw new Error(\"User not authenticated\");\n\n    return withErrorHandling(\n      async () => {\n        const result = await dataMigrationService.migrateSingleUserData(userId);\n        if (!result.success) {\n          throw new Error(result.errors.join(\", \"));\n        }\n        setState((prev) => ({ ...prev, needsMigration: false }));\n      },\n      \"migrate single user data\",\n      setState,\n    );\n  }, [userId]);\n\n  const validateRequestForm = useCallback(\n    (formData: {\n      email: string;\n      role: \"submissive\" | \"keyholder\";\n      message?: string;\n    }) => {\n      const errors: string[] = [];\n\n      if (!formData.email.trim()) {\n        errors.push(\"Email is required\");\n      } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n        errors.push(\"Email format is invalid\");\n      }\n\n      if (!formData.role) {\n        errors.push(\"Role is required\");\n      }\n\n      if (formData.message && formData.message.length > 500) {\n        errors.push(\"Message cannot exceed 500 characters\");\n      }\n\n      return {\n        isValid: errors.length === 0,\n        errors,\n      };\n    },\n    [],\n  );\n\n  const validatePermissionsForm = useCallback(\n    (permissions: KeyholderPermissions) => {\n      const errors: string[] = [];\n\n      // Add specific validation rules for permissions\n      if (typeof permissions !== \"object\" || permissions === null) {\n        errors.push(\"Permissions must be an object\");\n      }\n\n      // Add more specific validation as needed based on RelationshipPermissions type\n\n      return {\n        isValid: errors.length === 0,\n        errors,\n      };\n    },\n    [],\n  );\n\n  const clearError = useCallback(() => {\n    clearErrorFn(setState);\n  }, [clearErrorFn]);\n\n  return {\n    ...state,\n    migrateSingleUserData,\n    checkMigrationStatus,\n    validateRequestForm,\n    validatePermissionsForm,\n    clearError,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/relationships/utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/tasks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/tasks/useCountdownTimer.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/tasks/useTaskItem.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (96). Maximum allowed is 75.",
        "line": 24,
        "column": 28,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 135,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from \"react\";\nimport type { DBTask, TaskStatus } from \"../../types/database\";\nimport {\n  FaCheckCircle,\n  FaTimesCircle,\n  FaTrophy,\n  FaClock,\n} from \"../../utils/iconImport\";\n\n// Task status configuration type\ninterface TaskStatusConfig {\n  icon: React.ReactNode;\n  text: string;\n  borderColor: string;\n}\n\n// Task priority styles type\ninterface TaskPriorityStyles {\n  bgColor: string;\n  textColor: string;\n}\n\n// Custom hook for task item logic\nexport const useTaskItem = (\n  task: DBTask,\n  onSubmit: (taskId: string, note: string) => void,\n) => {\n  const [note, setNote] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Task status configuration logic\n  const getStatusConfig = (status: TaskStatus): TaskStatusConfig => {\n    switch (status) {\n      case \"pending\":\n        return {\n          icon: <FaClock className=\"text-nightly-aquamarine\" />,\n          text: \"Pending\",\n          borderColor: \"border-nightly-aquamarine\",\n        };\n      case \"submitted\":\n        return {\n          icon: <FaClock className=\"text-yellow-400\" />,\n          text: \"Submitted\",\n          borderColor: \"border-yellow-400\",\n        };\n      case \"approved\":\n        return {\n          icon: <FaCheckCircle className=\"text-green-400\" />,\n          text: \"Approved\",\n          borderColor: \"border-green-400\",\n        };\n      case \"rejected\":\n        return {\n          icon: <FaTimesCircle className=\"text-red-400\" />,\n          text: \"Rejected\",\n          borderColor: \"border-red-400\",\n        };\n      case \"completed\":\n        return {\n          icon: <FaTrophy className=\"text-nightly-lavender-floral\" />,\n          text: \"Completed\",\n          borderColor: \"border-nightly-lavender-floral\",\n        };\n      default:\n        return {\n          icon: <FaClock className=\"text-gray-400\" />,\n          text: \"Unknown\",\n          borderColor: \"border-gray-400\",\n        };\n    }\n  };\n\n  // Priority styling logic\n  const getPriorityStyles = (priority: string): TaskPriorityStyles => {\n    switch (priority) {\n      case \"critical\":\n        return {\n          bgColor: \"bg-red-500/20\",\n          textColor: \"text-red-300\",\n        };\n      case \"high\":\n        return {\n          bgColor: \"bg-orange-500/20\",\n          textColor: \"text-orange-300\",\n        };\n      case \"medium\":\n        return {\n          bgColor: \"bg-yellow-500/20\",\n          textColor: \"text-yellow-300\",\n        };\n      default:\n        return {\n          bgColor: \"bg-gray-500/20\",\n          textColor: \"text-gray-300\",\n        };\n    }\n  };\n\n  // Submit handler logic\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n    try {\n      await onSubmit(task.id, note);\n      setNote(\"\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Derived values\n  const statusConfig = getStatusConfig(task.status);\n  const priorityStyles = task.priority\n    ? getPriorityStyles(task.priority)\n    : null;\n  const isOverdue = task.dueDate && new Date() > task.dueDate;\n\n  return {\n    // State\n    note,\n    isSubmitting,\n\n    // Actions\n    setNote,\n    handleSubmit,\n\n    // Computed values\n    statusConfig,\n    priorityStyles,\n    isOverdue: Boolean(isOverdue),\n\n    // Helper functions (exposed for flexibility)\n    getStatusConfig,\n    getPriorityStyles,\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/tracker/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/tracker/useEmergencyUnlockModal.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/tracker/usePauseResumeControls.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/tracker/useTrackerStats.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/useAccountLinkingDemo.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (110). Maximum allowed is 75.",
        "line": 51,
        "column": 38,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 183,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Custom hook for Account Linking Demo state and logic\n */\n\nimport { useState } from \"react\";\n\n// Mock data for demonstration\nconst mockInviteCodes = [\n  {\n    id: \"invite-1\",\n    code: \"ABC123\",\n    submissiveUserId: \"demo-user-123\",\n    submissiveName: \"Demo User\",\n    createdAt: new Date(Date.now() - 1000 * 60 * 30), // 30 minutes ago\n    expiresAt: new Date(Date.now() + 1000 * 60 * 60 * 23.5), // 23.5 hours from now\n    isUsed: false,\n  },\n  {\n    id: \"invite-2\",\n    code: \"XYZ789\",\n    submissiveUserId: \"demo-user-123\",\n    submissiveName: \"Demo User\",\n    createdAt: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 hours ago\n    expiresAt: new Date(Date.now() + 1000 * 60 * 60 * 22), // 22 hours from now\n    isUsed: false,\n  },\n];\n\nconst mockActiveKeyholder = {\n  id: \"rel-1\",\n  submissiveUserId: \"demo-user-123\",\n  keyholderUserId: \"keyholder-456\",\n  status: \"active\" as const,\n  permissions: {\n    canLockSessions: true,\n    canUnlockSessions: false,\n    canCreateTasks: true,\n    canApproveTasks: true,\n    canViewFullHistory: true,\n    canEditGoals: false,\n  },\n  createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7), // 1 week ago\n  acceptedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7),\n};\n\ntype DemoScenario =\n  | \"submissive-no-keyholder\"\n  | \"submissive-with-keyholder\"\n  | \"keyholder-mode\";\n\nexport const useAccountLinkingDemo = (scenario: DemoScenario) => {\n  // UI State\n  const [showCreateInvite, setShowCreateInvite] = useState(false);\n  const [showAcceptInvite, setShowAcceptInvite] = useState(false);\n  const [showPermissions, setShowPermissions] = useState<string | null>(null);\n  const [inviteCodeInput, setInviteCodeInput] = useState(\"\");\n  const [keyholderNameInput, setKeyholderNameInput] = useState(\"\");\n\n  // Message state\n  const [message, setMessage] = useState(\"\");\n  const [messageType, setMessageType] = useState<\"success\" | \"error\" | \"info\">(\n    \"info\",\n  );\n\n  // Generate mock data based on scenario\n  const getMockData = () => {\n    const activeKeyholder =\n      scenario === \"submissive-with-keyholder\" ? mockActiveKeyholder : null;\n\n    const activeInviteCodes =\n      scenario === \"submissive-no-keyholder\" ||\n      scenario === \"submissive-with-keyholder\"\n        ? mockInviteCodes\n        : [];\n\n    const relationshipSummary = {\n      totalAsSubmissive: scenario === \"submissive-with-keyholder\" ? 1 : 0,\n      totalAsKeyholder: scenario === \"keyholder-mode\" ? 2 : 0,\n    };\n\n    const relationships =\n      scenario === \"keyholder-mode\"\n        ? {\n            asSubmissive: [],\n            asKeyholder: [\n              {\n                id: \"rel-2\",\n                submissiveUserId: \"sub-1\",\n                keyholderUserId: \"demo-user-123\",\n                status: \"active\" as const,\n                permissions: mockActiveKeyholder.permissions,\n                createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 3),\n                acceptedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 3),\n              },\n              {\n                id: \"rel-3\",\n                submissiveUserId: \"sub-2\",\n                keyholderUserId: \"demo-user-123\",\n                status: \"active\" as const,\n                permissions: mockActiveKeyholder.permissions,\n                createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5),\n                acceptedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5),\n              },\n            ],\n          }\n        : { asSubmissive: [], asKeyholder: [] };\n\n    return {\n      activeKeyholder,\n      activeInviteCodes,\n      relationshipSummary,\n      relationships,\n    };\n  };\n\n  const mockData = getMockData();\n\n  // Message handlers\n  const showMessage = (\n    text: string,\n    type: \"success\" | \"error\" | \"info\" = \"info\",\n  ) => {\n    setMessage(text);\n    setMessageType(type);\n  };\n\n  const clearMessage = () => {\n    setMessage(\"\");\n    setMessageType(\"info\");\n  };\n\n  // Action handlers\n  const handleCreateInvite = () => {\n    showMessage(\"Demo: Invite code ABC123 created successfully!\", \"success\");\n    setShowCreateInvite(false);\n  };\n\n  const handleAcceptInvite = () => {\n    if (inviteCodeInput === \"ABC123\") {\n      showMessage(\"Demo: Successfully accepted invite code!\", \"success\");\n    } else {\n      showMessage(\"Demo: Invalid invite code. Try 'ABC123'\", \"error\");\n    }\n    setInviteCodeInput(\"\");\n    setKeyholderNameInput(\"\");\n    setShowAcceptInvite(false);\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showMessage(`Copied \"${text}\" to clipboard`, \"success\");\n    } catch {\n      showMessage(\"Failed to copy to clipboard\", \"error\");\n    }\n  };\n\n  return {\n    // State\n    showCreateInvite,\n    setShowCreateInvite,\n    showAcceptInvite,\n    setShowAcceptInvite,\n    showPermissions,\n    setShowPermissions,\n    inviteCodeInput,\n    setInviteCodeInput,\n    keyholderNameInput,\n    setKeyholderNameInput,\n    message,\n    messageType,\n\n    // Actions\n    showMessage,\n    clearMessage,\n    handleCreateInvite,\n    handleAcceptInvite,\n    copyToClipboard,\n\n    // Mock data\n    ...mockData,\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/useAchievementGallery.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (95). Maximum allowed is 75.",
        "line": 26,
        "column": 38,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 146,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Custom hook for Achievement Gallery state and logic\n */\n\nimport { useState, useMemo } from \"react\";\nimport {\n  DBAchievement,\n  DBUserAchievement,\n  AchievementDifficulty,\n} from \"../types\";\nimport { AchievementCategory } from \"../types/achievements\";\n\ninterface AchievementWithProgress {\n  achievement: DBAchievement;\n  userAchievement?: DBUserAchievement;\n  progress: {\n    currentValue: number;\n    targetValue: number;\n    percentage: number;\n    isCompleted: boolean;\n  } | null;\n  isEarned: boolean;\n  isVisible: boolean;\n}\n\nexport const useAchievementGallery = (\n  achievementsWithProgress: AchievementWithProgress[],\n) => {\n  const [selectedCategory, setSelectedCategory] = useState<\n    AchievementCategory | \"all\"\n  >(\"all\");\n  const [selectedDifficulty, setSelectedDifficulty] = useState<\n    AchievementDifficulty | \"all\"\n  >(\"all\");\n  const [showOnlyEarned, setShowOnlyEarned] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // Calculate stats\n  const stats = useMemo(() => {\n    const totalEarned = achievementsWithProgress.filter(\n      (a) => a.isEarned,\n    ).length;\n    const totalVisible = achievementsWithProgress.filter(\n      (a) => !a.achievement.isHidden,\n    ).length;\n    const totalPoints = achievementsWithProgress\n      .filter((a) => a.isEarned)\n      .reduce((sum, a) => sum + a.achievement.points, 0);\n\n    return {\n      totalEarned,\n      totalVisible,\n      totalPoints,\n      completionPercentage:\n        totalVisible > 0 ? (totalEarned / totalVisible) * 100 : 0,\n    };\n  }, [achievementsWithProgress]);\n\n  // Filter achievements\n  const filteredAchievements = useMemo(() => {\n    return achievementsWithProgress.filter((item) => {\n      const { achievement, isEarned } = item;\n\n      // Category filter\n      if (\n        selectedCategory !== \"all\" &&\n        achievement.category !== selectedCategory\n      ) {\n        return false;\n      }\n\n      // Difficulty filter\n      if (\n        selectedDifficulty !== \"all\" &&\n        achievement.difficulty !== selectedDifficulty\n      ) {\n        return false;\n      }\n\n      // Earned filter\n      if (showOnlyEarned && !isEarned) {\n        return false;\n      }\n\n      // Search filter\n      if (\n        searchTerm &&\n        !achievement.name.toLowerCase().includes(searchTerm.toLowerCase()) &&\n        !achievement.description\n          .toLowerCase()\n          .includes(searchTerm.toLowerCase())\n      ) {\n        return false;\n      }\n\n      // Hide hidden achievements if not earned\n      if (achievement.isHidden && !isEarned) {\n        return false;\n      }\n\n      return true;\n    });\n  }, [\n    achievementsWithProgress,\n    selectedCategory,\n    selectedDifficulty,\n    showOnlyEarned,\n    searchTerm,\n  ]);\n\n  // Group by category\n  const groupedAchievements = useMemo(() => {\n    const groups: Record<string, AchievementWithProgress[]> = {};\n\n    filteredAchievements.forEach((item) => {\n      const categoryName = getCategoryName(\n        item.achievement.category as AchievementCategory,\n      );\n      if (!groups[categoryName]) {\n        groups[categoryName] = [];\n      }\n      groups[categoryName].push(item);\n    });\n\n    return groups;\n  }, [filteredAchievements]);\n\n  return {\n    // State\n    selectedCategory,\n    selectedDifficulty,\n    showOnlyEarned,\n    searchTerm,\n\n    // Setters\n    setSelectedCategory,\n    setSelectedDifficulty,\n    setShowOnlyEarned,\n    setSearchTerm,\n\n    // Computed values\n    stats,\n    filteredAchievements,\n    groupedAchievements,\n  };\n};\n\n// Helper function to get category display name\nexport const getCategoryName = (category: AchievementCategory): string => {\n  switch (category) {\n    case AchievementCategory.SESSION_MILESTONES:\n      return \"Session Milestones\";\n    case AchievementCategory.CONSISTENCY_BADGES:\n      return \"Consistency\";\n    case AchievementCategory.STREAK_ACHIEVEMENTS:\n      return \"Streaks\";\n    case AchievementCategory.GOAL_BASED:\n      return \"Goals\";\n    case AchievementCategory.TASK_COMPLETION:\n      return \"Tasks\";\n    case AchievementCategory.SPECIAL_ACHIEVEMENTS:\n      return \"Special\";\n    default:\n      return \"Unknown\";\n  }\n};\n\n// Helper function to get difficulty color styling\nexport const getDifficultyColor = (\n  difficulty: AchievementDifficulty,\n): string => {\n  switch (difficulty) {\n    case AchievementDifficulty.COMMON:\n      return \"border-gray-400 bg-gray-50\";\n    case AchievementDifficulty.UNCOMMON:\n      return \"border-green-400 bg-green-50\";\n    case AchievementDifficulty.RARE:\n      return \"border-blue-400 bg-blue-50\";\n    case AchievementDifficulty.EPIC:\n      return \"border-purple-400 bg-purple-50\";\n    case AchievementDifficulty.LEGENDARY:\n      return \"border-yellow-400 bg-yellow-50\";\n    default:\n      return \"border-gray-400 bg-gray-50\";\n  }\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/useAchievements.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (225). Maximum allowed is 75.",
        "line": 25,
        "column": 32,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 345,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * useAchievements Hook\n * React hook for managing achievements and progress\n */\n\nimport { useEffect, useCallback } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { achievementDBService, achievementEngine } from \"../services\";\nimport {\n  DBAchievement,\n  DBUserAchievement,\n  DBAchievementProgress,\n  AchievementCategory,\n} from \"../types\";\nimport { logger } from \"../utils/logging\";\n\nexport interface AchievementStats {\n  totalEarned: number;\n  totalPoints: number;\n  completionPercentage: number;\n  categoryCounts: Record<AchievementCategory, number>;\n  recentAchievements: DBUserAchievement[];\n}\n\nexport const useAchievements = (userId?: string) => {\n  const queryClient = useQueryClient();\n\n  // ==================== QUERIES ====================\n\n  /**\n   * Get all available achievements\n   */\n  const { data: allAchievements = [], isLoading: isLoadingAchievements } =\n    useQuery({\n      queryKey: [\"achievements\"],\n      queryFn: () => achievementDBService.getAllAchievements(),\n      enabled: true,\n      staleTime: 5 * 60 * 1000, // 5 minutes\n    });\n\n  /**\n   * Get user's earned achievements\n   */\n  const { data: userAchievements = [], isLoading: isLoadingUserAchievements } =\n    useQuery({\n      queryKey: [\"achievements\", \"user\", userId],\n      queryFn: () => achievementDBService.getUserAchievements(userId!),\n      enabled: Boolean(userId),\n      staleTime: 30 * 1000, // 30 seconds\n    });\n\n  /**\n   * Get user's visible achievements (for public profile)\n   */\n  const { data: visibleAchievements = [] } = useQuery({\n    queryKey: [\"achievements\", \"visible\", userId],\n    queryFn: () => achievementDBService.getUserVisibleAchievements(userId!),\n    enabled: Boolean(userId),\n    staleTime: 60 * 1000, // 1 minute\n  });\n\n  /**\n   * Get user's achievement progress\n   */\n  const { data: achievementProgress = [], isLoading: isLoadingProgress } =\n    useQuery({\n      queryKey: [\"achievements\", \"progress\", userId],\n      queryFn: () => achievementDBService.getUserAchievementProgress(userId!),\n      enabled: Boolean(userId),\n      staleTime: 30 * 1000, // 30 seconds\n    });\n\n  /**\n   * Get unread notifications\n   */\n  const { data: unreadNotifications = [], isLoading: isLoadingNotifications } =\n    useQuery({\n      queryKey: [\"achievements\", \"notifications\", userId],\n      queryFn: () => achievementDBService.getUserUnreadNotifications(userId!),\n      enabled: Boolean(userId),\n      refetchInterval: 30 * 1000, // Check every 30 seconds\n    });\n\n  /**\n   * Get achievement statistics\n   */\n  const { data: achievementStats, isLoading: isLoadingStats } = useQuery({\n    queryKey: [\"achievements\", \"stats\", userId],\n    queryFn: async (): Promise<AchievementStats> => {\n      if (!userId) throw new Error(\"User ID required\");\n\n      const [stats, achievements] = await Promise.all([\n        achievementDBService.getUserAchievementStats(userId),\n        achievementDBService.getUserAchievements(userId),\n      ]);\n\n      // Get recent achievements (last 5)\n      const recentAchievements = achievements\n        .sort(\n          (a: DBUserAchievement, b: DBUserAchievement) =>\n            b.earnedAt.getTime() - a.earnedAt.getTime(),\n        )\n        .slice(0, 5);\n\n      return {\n        ...stats,\n        recentAchievements,\n      };\n    },\n    enabled: Boolean(userId),\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n\n  // ==================== MUTATIONS ====================\n\n  /**\n   * Toggle achievement visibility\n   */\n  const toggleVisibilityMutation = useMutation({\n    mutationFn: ({ achievementId }: { achievementId: string }) =>\n      achievementDBService.toggleAchievementVisibility(userId!, achievementId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"achievements\", \"visible\", userId],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"achievements\", \"user\", userId],\n      });\n    },\n    onError: (error: Error) => {\n      logger.error(\n        \"Failed to toggle achievement visibility\",\n        error,\n        \"useAchievements\",\n      );\n    },\n  });\n\n  /**\n   * Mark notification as read\n   */\n  const markNotificationReadMutation = useMutation({\n    mutationFn: (notificationId: string) =>\n      achievementDBService.markNotificationRead(notificationId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"achievements\", \"notifications\", userId],\n      });\n    },\n    onError: (error: Error) => {\n      logger.error(\n        \"Failed to mark notification as read\",\n        error,\n        \"useAchievements\",\n      );\n    },\n  });\n\n  /**\n   * Perform full achievement check\n   */\n  const performFullCheckMutation = useMutation({\n    mutationFn: () => achievementEngine.performFullCheck(userId!),\n    onSuccess: () => {\n      // Invalidate all achievement-related queries\n      queryClient.invalidateQueries({ queryKey: [\"achievements\"] });\n    },\n    onError: (error) => {\n      logger.error(\n        \"Failed to perform full achievement check\",\n        error,\n        \"useAchievements\",\n      );\n    },\n  });\n\n  // ==================== HELPER FUNCTIONS ====================\n\n  /**\n   * Get achievement by ID\n   */\n  const getAchievementById = useCallback(\n    (achievementId: string): DBAchievement | undefined => {\n      return allAchievements.find((a: DBAchievement) => a.id === achievementId);\n    },\n    [allAchievements],\n  );\n\n  /**\n   * Check if user has specific achievement\n   */\n  const hasAchievement = useCallback(\n    (achievementId: string): boolean => {\n      return userAchievements.some(\n        (ua: DBUserAchievement) => ua.achievementId === achievementId,\n      );\n    },\n    [userAchievements],\n  );\n\n  /**\n   * Get progress for specific achievement\n   */\n  const getProgressForAchievement = useCallback(\n    (achievementId: string): DBAchievementProgress | undefined => {\n      return achievementProgress.find(\n        (ap: DBAchievementProgress) => ap.achievementId === achievementId,\n      );\n    },\n    [achievementProgress],\n  );\n\n  /**\n   * Get achievements by category\n   */\n  const getAchievementsByCategory = useCallback(\n    (category: AchievementCategory): DBAchievement[] => {\n      return allAchievements.filter(\n        (a: DBAchievement) => a.category === category,\n      );\n    },\n    [allAchievements],\n  );\n\n  /**\n   * Get user's achievements by category\n   */\n  const getUserAchievementsByCategory = useCallback(\n    (category: AchievementCategory): DBUserAchievement[] => {\n      const categoryAchievementIds = allAchievements\n        .filter((a: DBAchievement) => a.category === category)\n        .map((a: DBAchievement) => a.id);\n\n      return userAchievements.filter((ua: DBUserAchievement) =>\n        categoryAchievementIds.includes(ua.achievementId),\n      );\n    },\n    [allAchievements, userAchievements],\n  );\n\n  /**\n   * Get achievements with progress information\n   */\n  const getAchievementsWithProgress = useCallback(() => {\n    return allAchievements.map((achievement: DBAchievement) => {\n      const userAchievement = userAchievements.find(\n        (ua: DBUserAchievement) => ua.achievementId === achievement.id,\n      );\n      const progress = achievementProgress.find(\n        (ap: DBAchievementProgress) => ap.achievementId === achievement.id,\n      );\n\n      return {\n        achievement,\n        userAchievement,\n        progress: progress\n          ? {\n              currentValue: progress.currentValue,\n              targetValue: progress.targetValue,\n              percentage: Math.min(\n                (progress.currentValue / progress.targetValue) * 100,\n                100,\n              ),\n              isCompleted: progress.isCompleted,\n            }\n          : null,\n        isEarned: Boolean(userAchievement),\n        isVisible: userAchievement?.isVisible ?? true,\n      };\n    });\n  }, [allAchievements, userAchievements, achievementProgress]);\n\n  // ==================== ACTIONS ====================\n\n  const toggleAchievementVisibility = useCallback(\n    (achievementId: string) => {\n      if (!userId) return;\n      toggleVisibilityMutation.mutate({ achievementId });\n    },\n    [userId, toggleVisibilityMutation],\n  );\n\n  const markNotificationRead = useCallback(\n    (notificationId: string) => {\n      markNotificationReadMutation.mutate(notificationId);\n    },\n    [markNotificationReadMutation],\n  );\n\n  const performFullCheck = useCallback(() => {\n    if (!userId) return;\n    performFullCheckMutation.mutate();\n  }, [userId, performFullCheckMutation]);\n\n  // ==================== EFFECTS ====================\n\n  /**\n   * Initialize achievement engine on mount\n   */\n  useEffect(() => {\n    achievementEngine.initialize().catch((error) => {\n      logger.error(\n        \"Failed to initialize achievement engine\",\n        error,\n        \"useAchievements\",\n      );\n    });\n  }, []);\n\n  // ==================== RETURN ====================\n\n  return {\n    // Data\n    allAchievements,\n    userAchievements,\n    visibleAchievements,\n    achievementProgress,\n    unreadNotifications,\n    achievementStats,\n\n    // Loading states\n    isLoading: isLoadingAchievements || isLoadingUserAchievements,\n    isLoadingProgress,\n    isLoadingNotifications,\n    isLoadingStats,\n\n    // Helper functions\n    getAchievementById,\n    hasAchievement,\n    getProgressForAchievement,\n    getAchievementsByCategory,\n    getUserAchievementsByCategory,\n    getAchievementsWithProgress,\n\n    // Actions\n    toggleAchievementVisibility,\n    markNotificationRead,\n    performFullCheck,\n\n    // Mutation states\n    isTogglingVisibility: toggleVisibilityMutation.isPending,\n    isMarkingRead: markNotificationReadMutation.isPending,\n    isPerformingCheck: performFullCheckMutation.isPending,\n  };\n};\n\n/**\n * Hook for achievement notifications (can be used globally)\n */\nexport const useAchievementNotifications = (userId?: string) => {\n  const { unreadNotifications, markNotificationRead, isLoadingNotifications } =\n    useAchievements(userId);\n\n  return {\n    notifications: unreadNotifications,\n    isLoading: isLoadingNotifications,\n    markAsRead: markNotificationRead,\n    hasUnread: unreadNotifications.length > 0,\n    unreadCount: unreadNotifications.length,\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/useDexieSync.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (115). Maximum allowed is 75.",
        "line": 20,
        "column": 29,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 178,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Dexie Sync Hook\n * Provides easy access to Dexie services with automatic sync management\n */\nimport { useCallback, useMemo } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useApp } from \"@/contexts/AppContext\";\nimport {\n  sessionDBService,\n  eventDBService,\n  taskDBService,\n  goalDBService,\n  settingsDBService,\n} from \"@/services/database\";\nimport { firebaseSync } from \"@/services/sync\";\nimport { serviceLogger } from \"@/utils/logging\";\n\nconst logger = serviceLogger(\"useDexieSync\");\n\nexport const useDexieSync = () => {\n  const { state: appState, actions: appActions } = useApp();\n  const { user } = useAuth();\n\n  /**\n   * Get all Dexie services\n   */\n  const services = useMemo(\n    () => ({\n      sessions: sessionDBService,\n      events: eventDBService,\n      tasks: taskDBService,\n      goals: goalDBService,\n      settings: settingsDBService,\n    }),\n    [],\n  );\n\n  /**\n   * Trigger manual sync\n   */\n  const triggerSync = useCallback(async () => {\n    if (!user?.uid) {\n      logger.warn(\"Cannot sync: no authenticated user\");\n      return;\n    }\n\n    try {\n      await appActions.triggerSync(user.uid);\n    } catch (error) {\n      logger.error(\"Sync failed\", { error: error as Error });\n      throw error;\n    }\n  }, [user?.uid, appActions]);\n\n  /**\n   * Create a record with automatic sync queuing\n   */\n  const createWithSync = useCallback(\n    async <T extends Record<string, unknown>>(\n      service: keyof typeof services,\n      data: T,\n    ): Promise<string> => {\n      if (!user?.uid) {\n        throw new Error(\"No authenticated user\");\n      }\n\n      const id = await services[service].create(data);\n\n      // Trigger background sync if online\n      if (appState.isOnline) {\n        try {\n          await firebaseSync.sync();\n        } catch (error) {\n          logger.warn(\"Background sync failed\", { error: error as Error });\n          // Don't throw - local data is saved\n        }\n      }\n\n      return id;\n    },\n    [user?.uid, appState.isOnline, services],\n  );\n\n  /**\n   * Update a record with automatic sync queuing\n   */\n  const updateWithSync = useCallback(\n    async <T extends Record<string, unknown>>(\n      service: keyof typeof services,\n      id: string,\n      updates: T,\n    ): Promise<void> => {\n      if (!user?.uid) {\n        throw new Error(\"No authenticated user\");\n      }\n\n      await services[service].update(id, updates);\n\n      // Trigger background sync if online\n      if (appState.isOnline) {\n        try {\n          await firebaseSync.sync();\n        } catch (error) {\n          logger.warn(\"Background sync failed\", { error: error as Error });\n          // Don't throw - local data is saved\n        }\n      }\n    },\n    [user?.uid, appState.isOnline, services],\n  );\n\n  /**\n   * Delete a record with automatic sync queuing\n   */\n  const deleteWithSync = useCallback(\n    async (service: keyof typeof services, id: string): Promise<void> => {\n      if (!user?.uid) {\n        throw new Error(\"No authenticated user\");\n      }\n\n      await services[service].delete(id);\n\n      // Trigger background sync if online\n      if (appState.isOnline) {\n        try {\n          await firebaseSync.sync();\n        } catch (error) {\n          logger.warn(\"Background sync failed\", { error: error as Error });\n          // Don't throw - local data is saved\n        }\n      }\n    },\n    [user?.uid, appState.isOnline, services],\n  );\n\n  return {\n    // Services\n    services,\n\n    // Sync control\n    triggerSync,\n    syncStatus: appState.syncStatus,\n    lastSyncTime: appState.lastSyncTime,\n    isOnline: appState.isOnline,\n\n    // CRUD operations with sync\n    createWithSync,\n    updateWithSync,\n    deleteWithSync,\n\n    // Direct service access for read operations\n    findById: useCallback(\n      async (service: keyof typeof services, id: string) => {\n        return services[service].findById(id);\n      },\n      [services],\n    ),\n\n    findByUserId: useCallback(\n      async (service: keyof typeof services, userId: string) => {\n        return services[service].findByUserId(userId);\n      },\n      [services],\n    ),\n\n    paginate: useCallback(\n      async (\n        service: keyof typeof services,\n        userId: string,\n        offset: number = 0,\n        limit: number = 50,\n      ) => {\n        return services[service].paginate(userId, offset, limit);\n      },\n      [services],\n    ),\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/useKeyholderRelationships.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Function 'useKeyholderRelationships' has too many lines (272). Maximum allowed is 75.",
        "line": 99,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 424,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "zustand-safe-patterns/zustand-no-store-actions-in-deps",
        "severity": 2,
        "message": "Dangerous pattern: Store action in useEffect dependency array! This causes React error #185 infinite render loops. Zustand store actions are stable and should not be in dependency arrays. Remove store actions from the dependency array to fix this issue.",
        "line": 404,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "noStoreActionsInDeps",
        "endLine": 404,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "zustand-safe-patterns/zustand-no-store-actions-in-deps",
        "severity": 2,
        "message": "Dangerous pattern: Store action in useEffect dependency array! This causes React error #185 infinite render loops. Zustand store actions are stable and should not be in dependency arrays. Remove store actions from the dependency array to fix this issue.",
        "line": 404,
        "column": 37,
        "nodeType": "Identifier",
        "messageId": "noStoreActionsInDeps",
        "endLine": 404,
        "endColumn": 52,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "zustand-safe-patterns/zustand-no-store-actions-in-deps",
        "severity": 2,
        "message": "Dangerous pattern: Store action in useEffect dependency array! This causes React error #185 infinite render loops. Zustand store actions are stable and should not be in dependency arrays. Remove store actions from the dependency array to fix this issue.",
        "line": 404,
        "column": 54,
        "nodeType": "Identifier",
        "messageId": "noStoreActionsInDeps",
        "endLine": 404,
        "endColumn": 77,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Hook for managing keyholder relationships\n * Provides UI state and actions for account linking\n */\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useAuthState } from \"../contexts\";\nimport { KeyholderRelationshipService } from \"../services/KeyholderRelationshipService\";\nimport { KeyholderRelationship, KeyholderPermissions } from \"../types/core\";\nimport { InviteCode } from \"../services/database/KeyholderRelationshipDBService\";\nimport { serviceLogger } from \"../utils/logging\";\n\nconst logger = serviceLogger(\"useKeyholderRelationships\");\n\nexport interface KeyholderRelationshipState {\n  // Relationships\n  relationships: {\n    asSubmissive: KeyholderRelationship[];\n    asKeyholder: KeyholderRelationship[];\n  };\n  activeKeyholder: KeyholderRelationship | null;\n\n  // Invite codes\n  activeInviteCodes: InviteCode[];\n\n  // Loading states\n  isLoading: boolean;\n  isCreatingInvite: boolean;\n  isAcceptingInvite: boolean;\n  isUpdatingPermissions: boolean;\n\n  // Form states\n  inviteCodeInput: string;\n  keyholderNameInput: string;\n\n  // Messages\n  message: string;\n  messageType: \"success\" | \"error\" | \"info\";\n\n  // Summary\n  relationshipSummary: {\n    hasActiveKeyholder: boolean;\n    hasSubmissives: boolean;\n    activeKeyholderCount: number;\n    submissiveCount: number;\n  } | null;\n}\n\nexport interface KeyholderRelationshipActions {\n  // Data loading\n  loadRelationships: () => Promise<void>;\n  loadInviteCodes: () => Promise<void>;\n  loadRelationshipSummary: () => Promise<void>;\n\n  // Invite code management\n  createInviteCode: (expirationHours?: number) => Promise<InviteCode | null>;\n  acceptInviteCode: (code: string, keyholderName?: string) => Promise<boolean>;\n  revokeInviteCode: (codeId: string) => Promise<void>;\n\n  // Relationship management\n  updatePermissions: (\n    relationshipId: string,\n    permissions: KeyholderPermissions,\n  ) => Promise<void>;\n  endRelationship: (relationshipId: string) => Promise<void>;\n\n  // Form actions\n  setInviteCodeInput: (code: string) => void;\n  setKeyholderNameInput: (name: string) => void;\n  clearMessage: () => void;\n  clearForm: () => void;\n\n  // Utilities\n  validateInviteCode: (code: string) => boolean;\n  canCreateInviteCode: () => Promise<boolean>;\n  hasPermission: (\n    submissiveUserId: string,\n    permission: keyof KeyholderPermissions,\n  ) => Promise<boolean>;\n}\n\nconst initialState: KeyholderRelationshipState = {\n  relationships: {\n    asSubmissive: [],\n    asKeyholder: [],\n  },\n  activeKeyholder: null,\n  activeInviteCodes: [],\n  isLoading: false,\n  isCreatingInvite: false,\n  isAcceptingInvite: false,\n  isUpdatingPermissions: false,\n  inviteCodeInput: \"\",\n  keyholderNameInput: \"\",\n  message: \"\",\n  messageType: \"info\",\n  relationshipSummary: null,\n};\n\nexport function useKeyholderRelationships(): KeyholderRelationshipState &\n  KeyholderRelationshipActions {\n  const [state, setState] = useState<KeyholderRelationshipState>(initialState);\n  const { user } = useAuthState();\n\n  // Load relationships\n  const loadRelationships = useCallback(async () => {\n    if (!user?.uid) return;\n\n    setState((prev) => ({ ...prev, isLoading: true }));\n\n    try {\n      const relationships =\n        await KeyholderRelationshipService.getUserRelationships(user.uid);\n      const activeKeyholder =\n        await KeyholderRelationshipService.getActiveKeyholder(user.uid);\n\n      setState((prev) => ({\n        ...prev,\n        relationships,\n        activeKeyholder,\n        isLoading: false,\n      }));\n\n      logger.debug(\"Relationships loaded\", {\n        submissiveCount: relationships.asSubmissive.length,\n        keyholderCount: relationships.asKeyholder.length,\n      });\n    } catch (error) {\n      setState((prev) => ({\n        ...prev,\n        isLoading: false,\n        message: \"Failed to load relationships\",\n        messageType: \"error\",\n      }));\n      logger.error(\"Failed to load relationships\", { error: error as Error });\n    }\n  }, [user?.uid]);\n\n  // Load invite codes\n  const loadInviteCodes = useCallback(async () => {\n    if (!user?.uid) return;\n\n    try {\n      const activeInviteCodes =\n        await KeyholderRelationshipService.getActiveInviteCodes(user.uid);\n      setState((prev) => ({ ...prev, activeInviteCodes }));\n    } catch (error) {\n      logger.error(\"Failed to load invite codes\", { error: error as Error });\n    }\n  }, [user?.uid]);\n\n  // Load relationship summary\n  const loadRelationshipSummary = useCallback(async () => {\n    if (!user?.uid) return;\n\n    try {\n      const relationshipSummary =\n        await KeyholderRelationshipService.getRelationshipSummary(user.uid);\n      setState((prev) => ({ ...prev, relationshipSummary }));\n    } catch (error) {\n      logger.error(\"Failed to load relationship summary\", {\n        error: error as Error,\n      });\n    }\n  }, [user?.uid]);\n\n  // Create invite code\n  const createInviteCode = useCallback(\n    async (expirationHours = 24): Promise<InviteCode | null> => {\n      if (!user?.uid || !user.displayName) return null;\n\n      setState((prev) => ({ ...prev, isCreatingInvite: true, message: \"\" }));\n\n      try {\n        const canCreate =\n          await KeyholderRelationshipService.canCreateInviteCode(user.uid);\n        if (!canCreate) {\n          setState((prev) => ({\n            ...prev,\n            isCreatingInvite: false,\n            message: \"You already have an active keyholder relationship\",\n            messageType: \"error\",\n          }));\n          return null;\n        }\n\n        const inviteCode = await KeyholderRelationshipService.createInviteCode(\n          user.uid,\n          user.displayName,\n          expirationHours,\n        );\n\n        setState((prev) => ({\n          ...prev,\n          isCreatingInvite: false,\n          message: `Invite code created: ${inviteCode.code}`,\n          messageType: \"success\",\n        }));\n\n        logger.info(\"Invite code created successfully\", {\n          code: inviteCode.code,\n        });\n\n        // Reload invite codes\n        await loadInviteCodes();\n\n        return inviteCode;\n      } catch (error) {\n        const errorMessage =\n          (error as Error).message || \"Failed to create invite code\";\n        setState((prev) => ({\n          ...prev,\n          isCreatingInvite: false,\n          message: errorMessage,\n          messageType: \"error\",\n        }));\n        logger.error(\"Failed to create invite code\", { error: error as Error });\n        return null;\n      }\n    },\n    [user?.uid, user?.displayName, loadInviteCodes],\n  );\n\n  // Accept invite code\n  const acceptInviteCode = useCallback(\n    async (code: string, keyholderName?: string): Promise<boolean> => {\n      if (!user?.uid) return false;\n\n      setState((prev) => ({ ...prev, isAcceptingInvite: true, message: \"\" }));\n\n      try {\n        const _relationship =\n          await KeyholderRelationshipService.acceptInviteCode(\n            code,\n            user.uid,\n            keyholderName || user.displayName,\n          );\n\n        setState((prev) => ({\n          ...prev,\n          isAcceptingInvite: false,\n          message: \"Successfully linked with submissive!\",\n          messageType: \"success\",\n          inviteCodeInput: \"\",\n          keyholderNameInput: \"\",\n        }));\n\n        logger.info(\"Invite code accepted successfully\");\n\n        // Reload relationships\n        await loadRelationships();\n        await loadRelationshipSummary();\n\n        return true;\n      } catch (error) {\n        const errorMessage =\n          (error as Error).message || \"Failed to accept invite code\";\n        setState((prev) => ({\n          ...prev,\n          isAcceptingInvite: false,\n          message: errorMessage,\n          messageType: \"error\",\n        }));\n        logger.error(\"Failed to accept invite code\", { error: error as Error });\n        return false;\n      }\n    },\n    [user?.uid, user?.displayName, loadRelationships, loadRelationshipSummary],\n  );\n\n  // Revoke invite code\n  const revokeInviteCode = useCallback(\n    async (codeId: string) => {\n      if (!user?.uid) return;\n\n      try {\n        await KeyholderRelationshipService.revokeInviteCode(codeId, user.uid);\n        logger.info(\"Invite code revoked successfully\", { codeId });\n        await loadInviteCodes();\n      } catch (error) {\n        const _errorMessage =\n          (error as Error).message || \"Failed to revoke invite code\";\n        logger.error(\"Failed to revoke invite code\", { error: error as Error });\n      }\n    },\n    [user?.uid, loadInviteCodes],\n  );\n\n  // Update permissions\n  const updatePermissions = useCallback(\n    async (relationshipId: string, permissions: KeyholderPermissions) => {\n      if (!user?.uid) return;\n\n      setState((prev) => ({ ...prev, isUpdatingPermissions: true }));\n\n      try {\n        await KeyholderRelationshipService.updatePermissions(\n          relationshipId,\n          permissions,\n          user.uid,\n        );\n        setState((prev) => ({\n          ...prev,\n          isUpdatingPermissions: false,\n          message: \"Permissions updated successfully\",\n          messageType: \"success\",\n        }));\n        logger.info(\"Permissions updated successfully\");\n        await loadRelationships();\n      } catch (error) {\n        const errorMessage =\n          (error as Error).message || \"Failed to update permissions\";\n        setState((prev) => ({\n          ...prev,\n          isUpdatingPermissions: false,\n          message: errorMessage,\n          messageType: \"error\",\n        }));\n        logger.error(\"Failed to update permissions\", { error: error as Error });\n      }\n    },\n    [user?.uid, loadRelationships],\n  );\n\n  // End relationship\n  const endRelationship = useCallback(\n    async (relationshipId: string) => {\n      if (!user?.uid) return;\n\n      try {\n        await KeyholderRelationshipService.endRelationship(\n          relationshipId,\n          user.uid,\n        );\n        logger.info(\"Relationship ended successfully\");\n        await loadRelationships();\n        await loadRelationshipSummary();\n      } catch (error) {\n        const _errorMessage =\n          (error as Error).message || \"Failed to end relationship\";\n        logger.error(\"Failed to end relationship\", { error: error as Error });\n      }\n    },\n    [user?.uid, loadRelationships, loadRelationshipSummary],\n  );\n\n  // Form actions\n  const setInviteCodeInput = useCallback((code: string) => {\n    setState((prev) => ({ ...prev, inviteCodeInput: code.toUpperCase() }));\n  }, []);\n\n  const setKeyholderNameInput = useCallback((name: string) => {\n    setState((prev) => ({ ...prev, keyholderNameInput: name }));\n  }, []);\n\n  const clearMessage = useCallback(() => {\n    setState((prev) => ({ ...prev, message: \"\", messageType: \"info\" }));\n  }, []);\n\n  const clearForm = useCallback(() => {\n    setState((prev) => ({\n      ...prev,\n      inviteCodeInput: \"\",\n      keyholderNameInput: \"\",\n      message: \"\",\n      messageType: \"info\",\n    }));\n  }, []);\n\n  // Utilities\n  const validateInviteCode = useCallback((code: string): boolean => {\n    return KeyholderRelationshipService.validateInviteCodeFormat(code);\n  }, []);\n\n  const canCreateInviteCode = useCallback(async (): Promise<boolean> => {\n    if (!user?.uid) return false;\n    return await KeyholderRelationshipService.canCreateInviteCode(user.uid);\n  }, [user?.uid]);\n\n  const hasPermission = useCallback(\n    async (\n      submissiveUserId: string,\n      permission: keyof KeyholderPermissions,\n    ): Promise<boolean> => {\n      if (!user?.uid) return false;\n      return await KeyholderRelationshipService.hasPermission(\n        user.uid,\n        submissiveUserId,\n        permission,\n      );\n    },\n    [user?.uid],\n  );\n\n  // Load data on mount and user change\n  useEffect(() => {\n    if (user?.uid) {\n      loadRelationships();\n      loadInviteCodes();\n      loadRelationshipSummary();\n    } else {\n      setState(initialState);\n    }\n    // eslint-disable-next-line zustand-safe-patterns/zustand-no-store-actions-in-deps\n  }, [user?.uid, loadRelationships, loadInviteCodes, loadRelationshipSummary]);\n\n  return {\n    ...state,\n    loadRelationships,\n    loadInviteCodes,\n    loadRelationshipSummary,\n    createInviteCode,\n    acceptInviteCode,\n    revokeInviteCode,\n    updatePermissions,\n    endRelationship,\n    setInviteCodeInput,\n    setKeyholderNameInput,\n    clearMessage,\n    clearForm,\n    validateInviteCode,\n    canCreateInviteCode,\n    hasPermission,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/useLeaderboards.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (161). Maximum allowed is 75.",
        "line": 40,
        "column": 32,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 256,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * useLeaderboards Hook\n * React hook for managing leaderboard data and user participation\n */\n\nimport { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { achievementDBService } from \"../services\";\nimport {\n  LeaderboardCategory,\n  LeaderboardPeriod,\n  DBLeaderboardEntry,\n} from \"../types\";\nimport { logger } from \"../utils/logging\";\n\nexport interface LeaderboardEntry {\n  id: string;\n  displayName: string;\n  value: number;\n  rank: number;\n  isCurrentUser: boolean;\n}\n\nexport interface UserRankInfo {\n  rank: number;\n  value: number;\n  totalParticipants: number;\n}\n\nexport interface LeaderboardPrivacySettings {\n  participateInGlobal: boolean;\n  participateInMonthly: boolean;\n  shareSessionTime: boolean;\n  shareStreakData: boolean;\n  shareAchievements: boolean;\n  displayName: \"real\" | \"username\" | \"anonymous\";\n  showOnPublicProfile: boolean;\n}\n\nexport const useLeaderboards = (\n  userId?: string,\n  category: LeaderboardCategory = LeaderboardCategory.ACHIEVEMENT_POINTS,\n  period: LeaderboardPeriod = LeaderboardPeriod.ALL_TIME,\n) => {\n  const queryClient = useQueryClient();\n  const [privacySettings, setPrivacySettings] =\n    useState<LeaderboardPrivacySettings>({\n      participateInGlobal: false,\n      participateInMonthly: false,\n      shareSessionTime: false,\n      shareStreakData: false,\n      shareAchievements: true,\n      displayName: \"anonymous\",\n      showOnPublicProfile: false,\n    });\n\n  // ==================== QUERIES ====================\n\n  /**\n   * Get leaderboard data for a specific category and period\n   */\n  const {\n    data: rawLeaderboardData = [],\n    isLoading: isLoadingLeaderboard,\n    error: leaderboardError,\n  } = useQuery({\n    queryKey: [\"leaderboards\", category, period],\n    queryFn: () => achievementDBService.getLeaderboard(category, period),\n    enabled: true,\n    staleTime: 60 * 1000, // 1 minute\n  });\n\n  /**\n   * Get user's rank in the leaderboard\n   */\n  const { data: userRank, isLoading: isLoadingUserRank } = useQuery({\n    queryKey: [\"leaderboards\", \"rank\", userId, category, period],\n    queryFn: () =>\n      achievementDBService.getUserLeaderboardRank(userId!, category, period),\n    enabled: Boolean(userId),\n    staleTime: 60 * 1000, // 1 minute\n  });\n\n  /**\n   * Get user's leaderboard privacy settings\n   */\n  const { data: userPrivacySettings } = useQuery({\n    queryKey: [\"leaderboards\", \"privacy\", userId],\n    queryFn: () => achievementDBService.getLeaderboardPrivacy(userId!),\n    enabled: Boolean(userId),\n  });\n\n  // Update privacy settings when data changes\n  useEffect(() => {\n    if (userPrivacySettings) {\n      setPrivacySettings(userPrivacySettings);\n    }\n  }, [userPrivacySettings]);\n\n  // ==================== MUTATIONS ====================\n\n  /**\n   * Opt into leaderboards\n   */\n  const optInMutation = useMutation({\n    mutationFn: async () => {\n      if (!userId) throw new Error(\"User ID required\");\n\n      const defaultSettings: LeaderboardPrivacySettings = {\n        participateInGlobal: true,\n        participateInMonthly: true,\n        shareSessionTime: true,\n        shareStreakData: true,\n        shareAchievements: true,\n        displayName: \"anonymous\",\n        showOnPublicProfile: false,\n      };\n\n      await achievementDBService.updateLeaderboardPrivacy(\n        userId,\n        defaultSettings,\n      );\n      return defaultSettings;\n    },\n    onSuccess: (data) => {\n      setPrivacySettings(data);\n      queryClient.invalidateQueries({ queryKey: [\"leaderboards\"] });\n      logger.info(\"User opted into leaderboards\", \"useLeaderboards\");\n    },\n    onError: (error) => {\n      logger.error(\"Failed to opt into leaderboards\", error, \"useLeaderboards\");\n    },\n  });\n\n  /**\n   * Opt out of leaderboards\n   */\n  const optOutMutation = useMutation({\n    mutationFn: async () => {\n      if (!userId) throw new Error(\"User ID required\");\n\n      const optOutSettings: LeaderboardPrivacySettings = {\n        participateInGlobal: false,\n        participateInMonthly: false,\n        shareSessionTime: false,\n        shareStreakData: false,\n        shareAchievements: false,\n        displayName: \"anonymous\",\n        showOnPublicProfile: false,\n      };\n\n      await achievementDBService.updateLeaderboardPrivacy(\n        userId,\n        optOutSettings,\n      );\n      return optOutSettings;\n    },\n    onSuccess: (data) => {\n      setPrivacySettings(data);\n      queryClient.invalidateQueries({ queryKey: [\"leaderboards\"] });\n      logger.info(\"User opted out of leaderboards\", \"useLeaderboards\");\n    },\n    onError: (error) => {\n      logger.error(\n        \"Failed to opt out of leaderboards\",\n        error,\n        \"useLeaderboards\",\n      );\n    },\n  });\n\n  /**\n   * Update leaderboard privacy settings\n   */\n  const updatePrivacyMutation = useMutation({\n    mutationFn: async (settings: Partial<LeaderboardPrivacySettings>) => {\n      if (!userId) throw new Error(\"User ID required\");\n\n      const newSettings = { ...privacySettings, ...settings };\n      await achievementDBService.updateLeaderboardPrivacy(userId, newSettings);\n      return newSettings;\n    },\n    onSuccess: (data) => {\n      setPrivacySettings(data);\n      queryClient.invalidateQueries({ queryKey: [\"leaderboards\"] });\n      logger.info(\"Updated leaderboard privacy settings\", \"useLeaderboards\");\n    },\n    onError: (error) => {\n      logger.error(\n        \"Failed to update privacy settings\",\n        error,\n        \"useLeaderboards\",\n      );\n    },\n  });\n\n  // ==================== PROCESSED DATA ====================\n\n  /**\n   * Process raw leaderboard data into displayable format\n   */\n  const leaderboardData: LeaderboardEntry[] = rawLeaderboardData.map(\n    (entry: DBLeaderboardEntry, index: number) => ({\n      id: entry.id,\n      displayName: getDisplayName(entry),\n      value: entry.value,\n      rank: index + 1,\n      isCurrentUser: entry.userId === userId,\n    }),\n  );\n\n  /**\n   * Generate display name based on privacy settings\n   */\n  function getDisplayName(entry: DBLeaderboardEntry): string {\n    if (entry.userId === userId) {\n      return \"You\";\n    }\n\n    switch (entry.displayNameType) {\n      case \"real\":\n        return entry.displayName || \"Unknown User\";\n      case \"username\":\n        return entry.displayName || `User_${entry.userId.slice(-6)}`;\n      case \"anonymous\":\n      default:\n        return `ChastityUser_${entry.userId.slice(-4)}`;\n    }\n  }\n\n  // ==================== PUBLIC API ====================\n\n  return {\n    // Data\n    leaderboardData,\n    userRank,\n    privacySettings,\n\n    // Loading states\n    isLoading: isLoadingLeaderboard || isLoadingUserRank,\n    error: leaderboardError,\n\n    // Actions\n    optInToLeaderboards: optInMutation.mutateAsync,\n    optOutFromLeaderboards: optOutMutation.mutateAsync,\n    updateLeaderboardPrivacy: updatePrivacyMutation.mutateAsync,\n\n    // Status\n    isOptedIn:\n      privacySettings.participateInGlobal ||\n      privacySettings.participateInMonthly,\n    isOptingIn: optInMutation.isPending,\n    isOptingOut: optOutMutation.isPending,\n    isUpdatingPrivacy: updatePrivacyMutation.isPending,\n  };\n};\n\n// Named export only - hook files should only export hooks starting with 'use'\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/useOfflineDemo.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/usePauseState.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "zustand-safe-patterns/zustand-no-store-actions-in-deps",
        "severity": 2,
        "message": "Dangerous pattern: Store action in useEffect dependency array! This causes React error #185 infinite render loops. Zustand store actions are stable and should not be in dependency arrays. Remove store actions from the dependency array to fix this issue.",
        "line": 65,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "noStoreActionsInDeps",
        "endLine": 65,
        "endColumn": 17,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "zustand-safe-patterns/zustand-no-store-actions-in-deps",
        "severity": 2,
        "message": "Dangerous pattern: Store action in useEffect dependency array! This causes React error #185 infinite render loops. Zustand store actions are stable and should not be in dependency arrays. Remove store actions from the dependency array to fix this issue.",
        "line": 93,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "noStoreActionsInDeps",
        "endLine": 93,
        "endColumn": 17,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/useRelationships.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Function 'useRelationships' has too many lines (177). Maximum allowed is 75.",
        "line": 105,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 313,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * React Hook for Relationship Management (Composed)\n * Provides state management and actions for the dual-account keyholder system\n * Refactored to use focused hooks for better maintainability\n */\nimport { useEffect, useCallback, useMemo } from \"react\";\nimport { relationshipChastityService } from \"@/services/database/RelationshipChastityService\";\nimport {\n  RelationshipTask,\n  RelationshipEvent,\n  RelationshipPermissions,\n} from \"@/types/relationships\";\nimport type { KeyholderRelationship } from \"@/types/core\";\nimport {\n  useRelationshipList,\n  useRelationshipInvites,\n  useRelationshipActions,\n  useRelationshipStatus,\n  useRelationshipPermissions,\n  useRelationshipTasks,\n  useRelationshipValidation,\n} from \"./relationships\";\n\n// Re-export types from the shared types file\nexport type {\n  RelationshipState,\n  BaseHookState,\n  BaseHookActions,\n} from \"./relationships/types\";\n\n// Maintain backward compatibility with the original interface\nexport interface RelationshipActions {\n  // Relationship management\n  sendRelationshipRequest: (\n    targetUserId: string,\n    role: \"submissive\" | \"keyholder\",\n    message?: string,\n  ) => Promise<void>;\n  acceptRelationshipRequest: (requestId: string) => Promise<void>;\n  rejectRelationshipRequest: (requestId: string) => Promise<void>;\n  endRelationship: (relationshipId: string) => Promise<void>;\n  updatePermissions: (\n    relationshipId: string,\n    permissions: RelationshipPermissions,\n  ) => Promise<void>;\n\n  // Session management\n  startSession: (\n    relationshipId: string,\n    options?: {\n      goalDuration?: number;\n      isHardcoreMode?: boolean;\n      notes?: string;\n    },\n  ) => Promise<void>;\n  endSession: (\n    relationshipId: string,\n    sessionId: string,\n    reason?: string,\n  ) => Promise<void>;\n  pauseSession: (\n    relationshipId: string,\n    sessionId: string,\n    reason?: string,\n  ) => Promise<void>;\n  resumeSession: (relationshipId: string, sessionId: string) => Promise<void>;\n\n  // Task management\n  createTask: (\n    relationshipId: string,\n    taskData: {\n      text: string;\n      dueDate?: Date;\n      consequence?: RelationshipTask[\"consequence\"];\n    },\n  ) => Promise<void>;\n  updateTaskStatus: (\n    relationshipId: string,\n    taskId: string,\n    status: RelationshipTask[\"status\"],\n    note?: string,\n  ) => Promise<void>;\n\n  // Event logging\n  logEvent: (\n    relationshipId: string,\n    eventData: {\n      type: RelationshipEvent[\"type\"];\n      details: RelationshipEvent[\"details\"];\n      isPrivate?: boolean;\n      tags?: string[];\n    },\n  ) => Promise<void>;\n\n  // Migration\n  migrateSingleUserData: () => Promise<void>;\n  checkMigrationStatus: () => Promise<void>;\n\n  // Utility\n  setActiveRelationship: (relationship: KeyholderRelationship | null) => void;\n  refreshData: () => Promise<void>;\n  clearError: () => void;\n}\n\nexport function useRelationships() {\n  // Use focused hooks for specific functionalities\n  const relationshipList = useRelationshipList();\n  const relationshipInvites = useRelationshipInvites();\n  const relationshipActions = useRelationshipActions();\n  const relationshipStatus = useRelationshipStatus();\n  const relationshipPermissions = useRelationshipPermissions();\n  const relationshipTasks = useRelationshipTasks();\n  const relationshipValidation = useRelationshipValidation();\n\n  // Load data for active relationship when it changes\n  useEffect(() => {\n    if (relationshipList.activeRelationship) {\n      const relationshipId = relationshipList.activeRelationship.id;\n      relationshipStatus.loadRelationshipData(relationshipId);\n      relationshipTasks.loadRelationshipData(relationshipId);\n    }\n  }, [\n    relationshipList.activeRelationship,\n    relationshipStatus,\n    relationshipTasks,\n  ]);\n\n  // Set up real-time listeners for active relationship data\n  useEffect(() => {\n    if (!relationshipList.activeRelationship) return;\n\n    const relationshipId = relationshipList.activeRelationship.id;\n\n    const unsubscribeChastityData =\n      relationshipChastityService.subscribeToChastityData(\n        relationshipId,\n        (_chastityData) => {\n          // Update the status hook with new data\n          relationshipStatus.loadRelationshipData(relationshipId);\n        },\n      );\n\n    const unsubscribeTasks = relationshipChastityService.subscribeToTasks(\n      relationshipId,\n      (_tasks) => {\n        // Update the tasks hook with new data\n        relationshipTasks.loadRelationshipData(relationshipId);\n      },\n    );\n\n    return () => {\n      unsubscribeChastityData();\n      unsubscribeTasks();\n    };\n  }, [\n    relationshipList.activeRelationship,\n    relationshipStatus,\n    relationshipTasks,\n  ]);\n\n  // Enhanced refresh function that coordinates all hooks\n  const refreshData = useCallback(async () => {\n    await Promise.all([\n      relationshipList.refreshRelationships(),\n      relationshipInvites.refreshPendingRequests(),\n      relationshipValidation.checkMigrationStatus(),\n    ]);\n\n    if (relationshipList.activeRelationship) {\n      const relationshipId = relationshipList.activeRelationship.id;\n      await Promise.all([\n        relationshipStatus.loadRelationshipData(relationshipId),\n        relationshipTasks.loadRelationshipData(relationshipId),\n      ]);\n    }\n  }, [\n    relationshipList,\n    relationshipInvites,\n    relationshipValidation,\n    relationshipStatus,\n    relationshipTasks,\n  ]);\n\n  // Unified error handling - combine errors from all hooks\n  const _hasError = useMemo(() => {\n    return !!(\n      relationshipList.error ||\n      relationshipInvites.error ||\n      relationshipActions.error ||\n      relationshipStatus.error ||\n      relationshipPermissions.error ||\n      relationshipTasks.error ||\n      relationshipValidation.error\n    );\n  }, [\n    relationshipList.error,\n    relationshipInvites.error,\n    relationshipActions.error,\n    relationshipStatus.error,\n    relationshipPermissions.error,\n    relationshipTasks.error,\n    relationshipValidation.error,\n  ]);\n\n  const combinedError = useMemo(() => {\n    const errors = [\n      relationshipList.error,\n      relationshipInvites.error,\n      relationshipActions.error,\n      relationshipStatus.error,\n      relationshipPermissions.error,\n      relationshipTasks.error,\n      relationshipValidation.error,\n    ].filter(Boolean);\n\n    return errors.length > 0 ? errors[0] : null;\n  }, [\n    relationshipList.error,\n    relationshipInvites.error,\n    relationshipActions.error,\n    relationshipStatus.error,\n    relationshipPermissions.error,\n    relationshipTasks.error,\n    relationshipValidation.error,\n  ]);\n\n  // Unified loading state - true if any hook is loading\n  const isLoading = useMemo(() => {\n    return !!(\n      relationshipList.isLoading ||\n      relationshipInvites.isLoading ||\n      relationshipActions.isLoading ||\n      relationshipStatus.isLoading ||\n      relationshipPermissions.isLoading ||\n      relationshipTasks.isLoading ||\n      relationshipValidation.isLoading\n    );\n  }, [\n    relationshipList.isLoading,\n    relationshipInvites.isLoading,\n    relationshipActions.isLoading,\n    relationshipStatus.isLoading,\n    relationshipPermissions.isLoading,\n    relationshipTasks.isLoading,\n    relationshipValidation.isLoading,\n  ]);\n\n  // Unified clear error function\n  const clearError = useCallback(() => {\n    relationshipList.clearError();\n    relationshipInvites.clearError();\n    relationshipActions.clearError();\n    relationshipStatus.clearError();\n    relationshipPermissions.clearError();\n    relationshipTasks.clearError();\n    relationshipValidation.clearError();\n  }, [\n    relationshipList,\n    relationshipInvites,\n    relationshipActions,\n    relationshipStatus,\n    relationshipPermissions,\n    relationshipTasks,\n    relationshipValidation,\n  ]);\n\n  // Enhanced setActiveRelationship that clears data when switching\n  const setActiveRelationship = useCallback(\n    (relationship: KeyholderRelationship | null) => {\n      relationshipList.setActiveRelationship(relationship);\n\n      // Clear old data when switching relationships\n      if (!relationship) {\n        // Data will be automatically cleared since hooks are reactive\n      }\n    },\n    [relationshipList],\n  );\n\n  // Return combined state and actions for backward compatibility\n  return {\n    // Combined state - maintaining backward compatibility\n    relationships: relationshipList.relationships,\n    pendingRequests: relationshipInvites.pendingRequests,\n    activeRelationship: relationshipList.activeRelationship,\n    chastityData: relationshipStatus.chastityData,\n    tasks: relationshipTasks.tasks,\n    events: relationshipTasks.events,\n    sessions: relationshipStatus.sessions,\n    isLoading,\n    error: combinedError,\n    needsMigration: relationshipValidation.needsMigration,\n\n    // Combined actions - maintaining backward compatibility\n    sendRelationshipRequest: relationshipInvites.sendRelationshipRequest,\n    acceptRelationshipRequest: relationshipActions.acceptRelationshipRequest,\n    rejectRelationshipRequest: relationshipActions.rejectRelationshipRequest,\n    endRelationship: relationshipActions.endRelationship,\n    updatePermissions: relationshipPermissions.updatePermissions,\n    startSession: relationshipStatus.startSession,\n    endSession: relationshipStatus.endSession,\n    pauseSession: relationshipStatus.pauseSession,\n    resumeSession: relationshipStatus.resumeSession,\n    createTask: relationshipTasks.createTask,\n    updateTaskStatus: relationshipTasks.updateTaskStatus,\n    logEvent: relationshipTasks.logEvent,\n    migrateSingleUserData: relationshipValidation.migrateSingleUserData,\n    checkMigrationStatus: relationshipValidation.checkMigrationStatus,\n    setActiveRelationship,\n    refreshData,\n    clearError,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/useSessionPersistence.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Function 'useSessionPersistence' has too many lines (139). Maximum allowed is 75.",
        "line": 38,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 208,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Session Persistence Hook\n * Provides React integration for session persistence functionality\n */\nimport { useState, useEffect, useCallback } from \"react\";\nimport { sessionPersistenceService } from \"../services\";\nimport type {\n  SessionRestorationResult,\n  SessionPersistenceState,\n} from \"../services/SessionPersistenceService\";\nimport type { DBSession } from \"../types/database\";\nimport { serviceLogger } from \"../utils/logging\";\n\nconst logger = serviceLogger(\"useSessionPersistence\");\n\nexport interface UseSessionPersistenceOptions {\n  userId?: string;\n  autoInitialize?: boolean;\n}\n\nexport interface UseSessionPersistenceReturn {\n  isInitializing: boolean;\n  restorationResult: SessionRestorationResult | null;\n  error: string | null;\n  isSessionRestored: boolean;\n\n  // Actions\n  initializeSession: (userId: string) => Promise<SessionRestorationResult>;\n  backupSession: (session: DBSession) => Promise<void>;\n  startHeartbeat: (sessionId: string) => void;\n  stopHeartbeat: () => void;\n  detectAndRecover: (userId: string) => Promise<SessionRestorationResult>;\n\n  // State getters\n  getBackupState: () => SessionPersistenceState | null;\n}\n\nexport function useSessionPersistence(\n  options: UseSessionPersistenceOptions = {},\n): UseSessionPersistenceReturn {\n  const { userId, autoInitialize = true } = options;\n\n  const [isInitializing, setIsInitializing] = useState(false);\n  const [restorationResult, setRestorationResult] =\n    useState<SessionRestorationResult | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isSessionRestored, setIsSessionRestored] = useState(false);\n\n  // Initialize session persistence when userId is available\n  const initializeSession = useCallback(\n    async (targetUserId: string): Promise<SessionRestorationResult> => {\n      try {\n        setIsInitializing(true);\n        setError(null);\n\n        logger.debug(\"Initializing session persistence\", {\n          userId: targetUserId,\n        });\n\n        const result =\n          await sessionPersistenceService.initializeSessionState(targetUserId);\n        setRestorationResult(result);\n        setIsSessionRestored(result.wasRestored);\n\n        if (!result.success && result.error) {\n          setError(result.error);\n        }\n\n        logger.debug(\"Session persistence initialized\", {\n          userId: targetUserId,\n          wasRestored: result.wasRestored,\n          success: result.success,\n        });\n\n        return result;\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : \"Unknown error\";\n        setError(errorMessage);\n        logger.error(\"Failed to initialize session persistence\", {\n          error: err as Error,\n          userId: targetUserId,\n        });\n\n        return {\n          success: false,\n          error: errorMessage,\n          wasRestored: false,\n        };\n      } finally {\n        setIsInitializing(false);\n      }\n    },\n    [],\n  );\n\n  // Backup session state\n  const backupSession = useCallback(\n    async (session: DBSession): Promise<void> => {\n      try {\n        await sessionPersistenceService.backupSessionState(session);\n        logger.debug(\"Session backed up\", { sessionId: session.id });\n      } catch (err) {\n        logger.error(\"Failed to backup session\", {\n          error: err as Error,\n          sessionId: session.id,\n        });\n        throw err;\n      }\n    },\n    [],\n  );\n\n  // Start heartbeat\n  const startHeartbeat = useCallback((sessionId: string): void => {\n    sessionPersistenceService.startHeartbeat(sessionId);\n    logger.debug(\"Heartbeat started\", { sessionId });\n  }, []);\n\n  // Stop heartbeat\n  const stopHeartbeat = useCallback((): void => {\n    sessionPersistenceService.stopHeartbeat();\n    logger.debug(\"Heartbeat stopped\");\n  }, []);\n\n  // Detect and recover from interruptions\n  const detectAndRecover = useCallback(\n    async (targetUserId: string): Promise<SessionRestorationResult> => {\n      try {\n        logger.debug(\"Detecting and recovering session\", {\n          userId: targetUserId,\n        });\n\n        const result =\n          await sessionPersistenceService.detectAndRecover(targetUserId);\n\n        if (result.wasRestored) {\n          setRestorationResult(result);\n          setIsSessionRestored(true);\n        }\n\n        return result;\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : \"Unknown error\";\n        logger.error(\"Failed to detect and recover session\", {\n          error: err as Error,\n          userId: targetUserId,\n        });\n\n        return {\n          success: false,\n          error: errorMessage,\n          wasRestored: false,\n        };\n      }\n    },\n    [],\n  );\n\n  // Get current backup state\n  const getBackupState = useCallback((): SessionPersistenceState | null => {\n    try {\n      const backup = localStorage.getItem(\"chastity_session_backup\");\n      return backup ? JSON.parse(backup) : null;\n    } catch (err) {\n      logger.error(\"Failed to get backup state\", { error: err as Error });\n      return null;\n    }\n  }, []);\n\n  // Auto-initialize when userId is provided\n  useEffect(() => {\n    if (autoInitialize && userId && !isInitializing && !restorationResult) {\n      initializeSession(userId);\n    }\n  }, [\n    userId,\n    autoInitialize,\n    isInitializing,\n    restorationResult,\n    initializeSession,\n  ]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      stopHeartbeat();\n    };\n  }, [stopHeartbeat]);\n\n  return {\n    isInitializing,\n    restorationResult,\n    error,\n    isSessionRestored,\n\n    // Actions\n    initializeSession,\n    backupSession,\n    startHeartbeat,\n    stopHeartbeat,\n    detectAndRecover,\n\n    // State getters\n    getBackupState,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/useSessionTimer.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Function 'useSessionTimer' has too many lines (89). Maximum allowed is 75.",
        "line": 42,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 151,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Function 'useMultiSessionTimer' has too many lines (94). Maximum allowed is 75.",
        "line": 166,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 271,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "zustand-safe-patterns/zustand-no-store-actions-in-deps",
        "severity": 2,
        "message": "Dangerous pattern: Store action in useEffect dependency array! This causes React error #185 infinite render loops. Zustand store actions are stable and should not be in dependency arrays. Remove store actions from the dependency array to fix this issue.",
        "line": 81,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "noStoreActionsInDeps",
        "endLine": 81,
        "endColumn": 38,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "zustand-safe-patterns/zustand-no-store-actions-in-deps",
        "severity": 2,
        "message": "Dangerous pattern: Store action in useEffect dependency array! This causes React error #185 infinite render loops. Zustand store actions are stable and should not be in dependency arrays. Remove store actions from the dependency array to fix this issue.",
        "line": 201,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "noStoreActionsInDeps",
        "endLine": 201,
        "endColumn": 49,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Session Timer Hook\n * Provides real-time timer updates for active chastity sessions\n */\nimport { useState, useEffect, useMemo, useRef } from \"react\";\nimport type { DBSession } from \"../types/database\";\nimport { TimerService } from \"../services/TimerService\";\n\nexport interface SessionTimerData {\n  // Core timer values\n  effectiveTime: number; // Time in seconds excluding pauses\n  totalElapsedTime: number; // Total time including pauses\n  currentPauseDuration: number; // Current pause duration if paused\n\n  // Formatted strings\n  effectiveTimeFormatted: string;\n  totalElapsedTimeFormatted: string;\n  currentPauseDurationFormatted: string;\n\n  // Goal-related data\n  goalProgress: number; // Percentage (0-100)\n  remainingGoalTime: number; // Seconds remaining to goal\n  remainingGoalTimeFormatted: string;\n  isGoalCompleted: boolean;\n\n  // State flags\n  isActive: boolean; // Session exists and not ended\n  isPaused: boolean;\n\n  // Current time reference\n  currentTime: Date;\n}\n\nexport interface UseSessionTimerOptions {\n  updateInterval?: number; // Milliseconds, default 1000\n  enabled?: boolean; // Enable/disable timer updates, default true\n}\n\n/**\n * Hook for real-time session timer with live updates\n */\nexport function useSessionTimer(\n  session: DBSession | null | undefined,\n  options: UseSessionTimerOptions = {},\n): SessionTimerData {\n  const { updateInterval = 1000, enabled = true } = options;\n\n  const [currentTime, setCurrentTime] = useState(() => new Date());\n  const intervalRef = useRef<ReturnType<typeof setInterval> | null>(null);\n\n  // Track session state changes manually to avoid zustand warnings\n  const sessionId = session?.id;\n  const sessionEndTime = session?.endTime;\n  const isSessionActive = enabled && sessionId && !sessionEndTime;\n\n  // Update current time every second\n  useEffect(() => {\n    if (!isSessionActive) {\n      // Clear interval if timer is disabled or session is not active\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n      return;\n    }\n\n    const updateCurrentTime = () => {\n      setCurrentTime(new Date());\n    };\n\n    // Set up interval\n    intervalRef.current = setInterval(updateCurrentTime, updateInterval);\n\n    // Cleanup on unmount or dependency change\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    };\n  }, [isSessionActive, updateInterval]); // eslint-disable-line zustand-safe-patterns/zustand-no-store-actions-in-deps\n\n  // Memoized calculations to prevent unnecessary recalculations\n  const timerData = useMemo((): SessionTimerData => {\n    // Default values when no session or session ended\n    const defaultData: SessionTimerData = {\n      effectiveTime: 0,\n      totalElapsedTime: 0,\n      currentPauseDuration: 0,\n      effectiveTimeFormatted: \"0s\",\n      totalElapsedTimeFormatted: \"0s\",\n      currentPauseDurationFormatted: \"0s\",\n      goalProgress: 0,\n      remainingGoalTime: 0,\n      remainingGoalTimeFormatted: \"0s\",\n      isGoalCompleted: false,\n      isActive: false,\n      isPaused: false,\n      currentTime,\n    };\n\n    if (!session || session.endTime) {\n      return defaultData;\n    }\n\n    // Calculate timer values\n    const effectiveTime = TimerService.calculateEffectiveTime(\n      session,\n      currentTime,\n    );\n    const totalElapsedTime = TimerService.calculateTotalElapsedTime(\n      session,\n      currentTime,\n    );\n    const currentPauseDuration = TimerService.calculateCurrentPauseDuration(\n      session,\n      currentTime,\n    );\n\n    // Calculate goal-related data\n    const goalProgress = TimerService.calculateGoalProgress(\n      session,\n      currentTime,\n    );\n    const remainingGoalTime = TimerService.calculateRemainingGoalTime(\n      session,\n      currentTime,\n    );\n    const isGoalCompleted = TimerService.isGoalCompleted(session, currentTime);\n\n    return {\n      effectiveTime,\n      totalElapsedTime,\n      currentPauseDuration,\n      effectiveTimeFormatted: TimerService.formatDuration(effectiveTime),\n      totalElapsedTimeFormatted: TimerService.formatDuration(totalElapsedTime),\n      currentPauseDurationFormatted:\n        TimerService.formatDuration(currentPauseDuration),\n      goalProgress,\n      remainingGoalTime,\n      remainingGoalTimeFormatted:\n        TimerService.formatDuration(remainingGoalTime),\n      isGoalCompleted,\n      isActive: true,\n      isPaused: session.isPaused,\n      currentTime,\n    };\n  }, [session, currentTime]);\n\n  return timerData;\n}\n\n/**\n * Hook for getting a snapshot of timer data without live updates\n * Useful for components that don't need real-time updates\n */\nexport function useSessionTimerSnapshot(\n  session: DBSession | null | undefined,\n): SessionTimerData {\n  return useSessionTimer(session, { enabled: false });\n}\n\n/**\n * Hook for multiple sessions timer data (useful for dashboards)\n */\nexport function useMultiSessionTimer(\n  sessions: (DBSession | null | undefined)[],\n  options: UseSessionTimerOptions = {},\n): SessionTimerData[] {\n  const [currentTime, setCurrentTime] = useState(() => new Date());\n  const { updateInterval = 1000, enabled = true } = options;\n  const intervalRef = useRef<ReturnType<typeof setInterval> | null>(null);\n\n  // Check if we have any active sessions\n  const hasActiveSessions = useMemo(() => {\n    return sessions.some((session) => session && !session.endTime);\n  }, [sessions]);\n\n  // Update current time for all sessions\n  useEffect(() => {\n    if (!enabled || !hasActiveSessions) {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n      return;\n    }\n\n    const updateCurrentTime = () => {\n      setCurrentTime(new Date());\n    };\n\n    intervalRef.current = setInterval(updateCurrentTime, updateInterval);\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    };\n  }, [enabled, hasActiveSessions, updateInterval]); // eslint-disable-line zustand-safe-patterns/zustand-no-store-actions-in-deps\n\n  // Calculate timer data for each session\n  const timerDataArray = useMemo(() => {\n    return sessions.map((session) => {\n      if (!session || session.endTime) {\n        return {\n          effectiveTime: 0,\n          totalElapsedTime: 0,\n          currentPauseDuration: 0,\n          effectiveTimeFormatted: \"0s\",\n          totalElapsedTimeFormatted: \"0s\",\n          currentPauseDurationFormatted: \"0s\",\n          goalProgress: 0,\n          remainingGoalTime: 0,\n          remainingGoalTimeFormatted: \"0s\",\n          isGoalCompleted: false,\n          isActive: false,\n          isPaused: false,\n          currentTime,\n        };\n      }\n\n      const effectiveTime = TimerService.calculateEffectiveTime(\n        session,\n        currentTime,\n      );\n      const totalElapsedTime = TimerService.calculateTotalElapsedTime(\n        session,\n        currentTime,\n      );\n      const currentPauseDuration = TimerService.calculateCurrentPauseDuration(\n        session,\n        currentTime,\n      );\n      const goalProgress = TimerService.calculateGoalProgress(\n        session,\n        currentTime,\n      );\n      const remainingGoalTime = TimerService.calculateRemainingGoalTime(\n        session,\n        currentTime,\n      );\n      const isGoalCompleted = TimerService.isGoalCompleted(\n        session,\n        currentTime,\n      );\n\n      return {\n        effectiveTime,\n        totalElapsedTime,\n        currentPauseDuration,\n        effectiveTimeFormatted: TimerService.formatDuration(effectiveTime),\n        totalElapsedTimeFormatted:\n          TimerService.formatDuration(totalElapsedTime),\n        currentPauseDurationFormatted:\n          TimerService.formatDuration(currentPauseDuration),\n        goalProgress,\n        remainingGoalTime,\n        remainingGoalTimeFormatted:\n          TimerService.formatDuration(remainingGoalTime),\n        isGoalCompleted,\n        isActive: true,\n        isPaused: session.isPaused,\n        currentTime,\n      };\n    });\n  }, [sessions, currentTime]);\n\n  return timerDataArray;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/useSpecialChallenges.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (195). Maximum allowed is 75.",
        "line": 27,
        "column": 37,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 268,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "zustand-safe-patterns/zustand-no-store-actions-in-deps",
        "severity": 2,
        "message": "Dangerous pattern: Store action in useEffect dependency array! This causes React error #185 infinite render loops. Zustand store actions are stable and should not be in dependency arrays. Remove store actions from the dependency array to fix this issue.",
        "line": 237,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "noStoreActionsInDeps",
        "endLine": 237,
        "endColumn": 62,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect, useCallback } from \"react\";\nimport { goalDBService } from \"@/services/database/GoalDBService\";\nimport type { DBGoal } from \"@/types/database\";\nimport { serviceLogger } from \"@/utils/logging\";\nimport { useAchievementIntegration } from \"@/constants/challengeAchievements\";\n\nconst logger = serviceLogger(\"useSpecialChallenges\");\n\nexport interface SpecialChallengeStatus {\n  locktober: {\n    available: boolean;\n    active: boolean;\n    completed: boolean;\n    goal?: DBGoal;\n  };\n  noNutNovember: {\n    available: boolean;\n    active: boolean;\n    completed: boolean;\n    goal?: DBGoal;\n  };\n}\n\n/**\n * Hook for managing special challenge goals (Locktober, No Nut November)\n */\nexport const useSpecialChallenges = (userId: string | null) => {\n  const [challengeStatus, setChallengeStatus] =\n    useState<SpecialChallengeStatus>({\n      locktober: { available: false, active: false, completed: false },\n      noNutNovember: { available: false, active: false, completed: false },\n    });\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const { checkForChallengeAchievements } = useAchievementIntegration();\n\n  /**\n   * Check if challenges are available based on current date\n   */\n  const checkChallengeAvailability = useCallback(() => {\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth(); // 0-based\n\n    return {\n      locktober: currentMonth === 9, // October\n      noNutNovember: currentMonth === 10, // November\n    };\n  }, []);\n\n  /**\n   * Load challenge status for the user\n   */\n  const loadChallengeStatus = useCallback(async () => {\n    if (!userId) {\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const availability = checkChallengeAvailability();\n      const specialGoals = await goalDBService.getSpecialChallengeGoals(userId);\n      const currentYear = new Date().getFullYear();\n\n      // Find current year's goals\n      const locktoberGoal = specialGoals.find(\n        (goal) =>\n          goal.challengeType === \"locktober\" &&\n          goal.challengeYear === currentYear,\n      );\n      const noNutGoal = specialGoals.find(\n        (goal) =>\n          goal.challengeType === \"no_nut_november\" &&\n          goal.challengeYear === currentYear,\n      );\n\n      setChallengeStatus({\n        locktober: {\n          available: availability.locktober,\n          active: !!locktoberGoal && !locktoberGoal.isCompleted,\n          completed: !!locktoberGoal?.isCompleted,\n          goal: locktoberGoal,\n        },\n        noNutNovember: {\n          available: availability.noNutNovember,\n          active: !!noNutGoal && !noNutGoal.isCompleted,\n          completed: !!noNutGoal?.isCompleted,\n          goal: noNutGoal,\n        },\n      });\n\n      logger.debug(\"Loaded challenge status\", {\n        userId,\n        hasLocktober: !!locktoberGoal,\n        hasNoNut: !!noNutGoal,\n      });\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Unknown error\";\n      setError(errorMessage);\n      logger.error(\"Failed to load challenge status\", { error: err, userId });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [userId, checkChallengeAvailability]);\n\n  /**\n   * Join a special challenge\n   */\n  const joinChallenge = useCallback(\n    async (challengeType: \"locktober\" | \"no_nut_november\") => {\n      if (!userId) {\n        throw new Error(\"User not authenticated\");\n      }\n\n      try {\n        setError(null);\n        const goal = await goalDBService.getOrCreateChallengeGoal(\n          userId,\n          challengeType,\n        );\n\n        // Refresh status\n        await loadChallengeStatus();\n\n        logger.info(\"User joined challenge\", {\n          userId,\n          challengeType,\n          goalId: goal.id,\n        });\n        return goal;\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : \"Failed to join challenge\";\n        setError(errorMessage);\n        logger.error(\"Failed to join challenge\", {\n          error: err,\n          userId,\n          challengeType,\n        });\n        throw err;\n      }\n    },\n    [userId, loadChallengeStatus],\n  );\n\n  /**\n   * Update challenge progress\n   */\n  const updateChallengeProgress = useCallback(\n    async (\n      challengeType: \"locktober\" | \"no_nut_november\",\n      progressValue: number,\n    ) => {\n      if (!userId) {\n        throw new Error(\"User not authenticated\");\n      }\n\n      try {\n        const challengeMap = {\n          locktober: challengeStatus.locktober,\n          no_nut_november: challengeStatus.noNutNovember,\n        };\n        const challenge =\n          challengeMap[challengeType as keyof typeof challengeMap];\n        if (!challenge.goal) {\n          throw new Error(\"Challenge goal not found\");\n        }\n\n        await goalDBService.updateGoalProgress(\n          challenge.goal.id,\n          progressValue,\n        );\n\n        // Check if challenge was completed and trigger achievements\n        const updatedGoal = await goalDBService.findById(challenge.goal.id);\n        if (updatedGoal?.isCompleted) {\n          await checkForChallengeAchievements({\n            challengeType: updatedGoal.challengeType,\n            challengeYear: updatedGoal.challengeYear,\n            isCompleted: updatedGoal.isCompleted,\n          });\n        }\n\n        // Refresh status\n        await loadChallengeStatus();\n\n        logger.info(\"Updated challenge progress\", {\n          userId,\n          challengeType,\n          progressValue,\n          goalId: challenge.goal.id,\n        });\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : \"Failed to update progress\";\n        setError(errorMessage);\n        logger.error(\"Failed to update challenge progress\", {\n          error: err,\n          userId,\n          challengeType,\n          progressValue,\n        });\n        throw err;\n      }\n    },\n    [\n      userId,\n      challengeStatus,\n      loadChallengeStatus,\n      checkForChallengeAchievements,\n    ],\n  );\n\n  /**\n   * Get progress percentage for a challenge\n   */\n  const getChallengeProgress = useCallback(\n    (challengeType: \"locktober\" | \"no_nut_november\") => {\n      const challenge = challengeStatus[challengeType];\n      if (!challenge.goal) return 0;\n\n      return Math.min(\n        100,\n        (challenge.goal.currentValue / challenge.goal.targetValue) * 100,\n      );\n    },\n    [challengeStatus],\n  );\n\n  // Load challenge status on mount and when userId changes\n  useEffect(() => {\n    loadChallengeStatus();\n    // eslint-disable-next-line zustand-safe-patterns/zustand-no-store-actions-in-deps\n  }, [userId, checkChallengeAvailability, loadChallengeStatus]);\n\n  // Refresh status every hour to check for date changes\n  useEffect(() => {\n    const interval = setInterval(\n      () => {\n        const availability = checkChallengeAvailability();\n        setChallengeStatus((prev) => ({\n          ...prev,\n          locktober: { ...prev.locktober, available: availability.locktober },\n          noNutNovember: {\n            ...prev.noNutNovember,\n            available: availability.noNutNovember,\n          },\n        }));\n      },\n      60 * 60 * 1000,\n    ); // Check every hour\n\n    return () => clearInterval(interval);\n  }, [checkChallengeAvailability]);\n\n  return {\n    challengeStatus,\n    isLoading,\n    error,\n    joinChallenge,\n    updateChallengeProgress,\n    getChallengeProgress,\n    refreshStatus: loadChallengeStatus,\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/hooks/useSync.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (99). Maximum allowed is 75.",
        "line": 27,
        "column": 24,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 154,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * useSync Hook\n * Manages synchronization state and conflict resolution\n */\nimport { useState, useEffect, useCallback } from \"react\";\nimport { firebaseSync } from \"@/services/sync\";\nimport type { SyncResult, ConflictInfo, SyncOptions } from \"@/types/database\";\nimport { serviceLogger } from \"@/utils/logging\";\n\nconst logger = serviceLogger(\"useSync\");\n\ninterface UseSyncState {\n  isSyncing: boolean;\n  lastSyncResult: SyncResult | null;\n  pendingConflicts: ConflictInfo[];\n  error: Error | null;\n}\n\ninterface UseSyncActions {\n  sync: (userId: string, options?: SyncOptions) => Promise<SyncResult>;\n  resolveConflicts: (\n    resolutions: Record<string, \"local\" | \"remote\">,\n  ) => Promise<void>;\n  clearError: () => void;\n}\n\nexport const useSync = (): UseSyncState & UseSyncActions => {\n  const [state, setState] = useState<UseSyncState>({\n    isSyncing: false,\n    lastSyncResult: null,\n    pendingConflicts: [],\n    error: null,\n  });\n\n  // Check for pending conflicts on mount\n  useEffect(() => {\n    const checkPendingConflicts = () => {\n      const conflicts = firebaseSync.getPendingConflicts();\n      setState((prev) => ({ ...prev, pendingConflicts: conflicts }));\n    };\n\n    checkPendingConflicts();\n\n    // Check periodically for conflicts\n    const interval = setInterval(checkPendingConflicts, 30000); // Every 30 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const sync = useCallback(\n    async (userId: string, options?: SyncOptions): Promise<SyncResult> => {\n      setState((prev) => ({ ...prev, isSyncing: true, error: null }));\n\n      try {\n        logger.info(\"Starting sync\", { userId, options });\n        const result = await firebaseSync.syncUserData(userId, options);\n\n        setState((prev) => ({\n          ...prev,\n          isSyncing: false,\n          lastSyncResult: result,\n          pendingConflicts:\n            result.conflicts.length > 0\n              ? result.conflicts\n              : prev.pendingConflicts,\n        }));\n\n        logger.info(\"Sync completed\", {\n          success: result.success,\n          conflicts: result.conflicts.length,\n        });\n\n        return result;\n      } catch (error) {\n        const err = error as Error;\n        logger.error(\"Sync failed\", { error: err });\n\n        setState((prev) => ({\n          ...prev,\n          isSyncing: false,\n          error: err,\n        }));\n\n        throw error;\n      }\n    },\n    [],\n  );\n\n  const resolveConflicts = useCallback(\n    async (resolutions: Record<string, \"local\" | \"remote\">): Promise<void> => {\n      try {\n        logger.info(\"Resolving conflicts\", {\n          resolutionCount: Object.keys(resolutions).length,\n        });\n\n        // Apply resolutions (implementation would depend on specific conflict resolution logic)\n        const resolvedIds: string[] = [];\n\n        for (const [conflictKey, resolution] of Object.entries(resolutions)) {\n          // conflictKey format: \"collection-documentId-index\" or similar\n          const conflict = state.pendingConflicts.find(\n            (c) =>\n              `${c.collection}-${c.documentId}` ===\n              conflictKey.split(\"-\").slice(0, 2).join(\"-\"),\n          );\n\n          if (conflict) {\n            // Apply the chosen resolution\n            const dataToApply =\n              resolution === \"local\" ? conflict.localData : conflict.remoteData;\n\n            // Update both local and remote with chosen data\n            await firebaseSync.applyRemoteChanges(conflict.collection, [\n              dataToApply,\n            ]);\n\n            resolvedIds.push(`${conflict.collection}-${conflict.documentId}`);\n          }\n        }\n\n        // Clear resolved conflicts\n        firebaseSync.clearResolvedConflicts(resolvedIds);\n\n        setState((prev) => ({\n          ...prev,\n          pendingConflicts: prev.pendingConflicts.filter(\n            (c) => !resolvedIds.includes(`${c.collection}-${c.documentId}`),\n          ),\n        }));\n\n        logger.info(\"Conflicts resolved\", {\n          resolvedCount: resolvedIds.length,\n        });\n      } catch (error) {\n        logger.error(\"Failed to resolve conflicts\", { error: error as Error });\n        setState((prev) => ({ ...prev, error: error as Error }));\n        throw error;\n      }\n    },\n    [state.pendingConflicts],\n  );\n\n  const clearError = useCallback(() => {\n    setState((prev) => ({ ...prev, error: null }));\n  }, []);\n\n  return {\n    ...state,\n    sync,\n    resolveConflicts,\n    clearError,\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/main.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/AchievementPage.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (114). Maximum allowed is 75.",
        "line": 25,
        "column": 42,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 148,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Achievement Page\n * Dedicated page for viewing and managing achievements\n */\n\nimport React, { useState } from \"react\";\nimport { useAuthState } from \"../contexts\";\nimport { useAchievements } from \"../hooks/useAchievements\";\nimport {\n  AchievementGallery,\n  AchievementDashboard,\n} from \"../components/achievements\";\nimport LeaderboardView from \"../components/achievements/LeaderboardView\";\nimport AchievementPrivacySettings from \"../components/achievements/AchievementPrivacySettings\";\nimport {\n  FaTrophy,\n  FaList,\n  FaChartBar,\n  FaUsers,\n  FaCog,\n} from \"../utils/iconImport\";\n\ntype ViewMode = \"dashboard\" | \"gallery\" | \"leaderboards\" | \"privacy\";\n\nexport const AchievementPage: React.FC = () => {\n  const { user } = useAuthState();\n  const [viewMode, setViewMode] = useState<ViewMode>(\"dashboard\");\n\n  const {\n    allAchievements: _allAchievements,\n    getAchievementsWithProgress,\n    toggleAchievementVisibility,\n    isLoading,\n  } = useAchievements(user?.uid);\n\n  if (!user) {\n    return (\n      <div className=\"text-nightly-spring-green\">\n        <div className=\"flex items-center justify-center py-20\">\n          <div className=\"text-center\">\n            <FaTrophy className=\"text-4xl text-nightly-celadon/50 mb-4 mx-auto\" />\n            <div className=\"text-nightly-celadon\">\n              Please sign in to view achievements\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"text-nightly-spring-green\">\n        <div className=\"flex items-center justify-center py-20\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin w-8 h-8 border-2 border-nightly-aquamarine border-t-transparent rounded-full mb-4 mx-auto\"></div>\n            <div className=\"text-nightly-celadon\">Loading achievements...</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const achievementsWithProgress = getAchievementsWithProgress();\n\n  return (\n    <div className=\"text-nightly-spring-green\">\n      <div className=\"p-4 max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-3\">\n            <FaTrophy className=\"text-3xl text-nightly-lavender-floral\" />\n            <h1 className=\"text-3xl font-bold text-nightly-honeydew\">\n              Achievements\n            </h1>\n          </div>\n\n          {/* View Mode Toggle */}\n          <div className=\"flex items-center bg-white/10 rounded-lg p-1\">\n            <button\n              onClick={() => setViewMode(\"dashboard\")}\n              className={`flex items-center space-x-2 px-3 py-2 rounded-md text-sm transition-colors ${\n                viewMode === \"dashboard\"\n                  ? \"bg-nightly-aquamarine text-black font-semibold\"\n                  : \"text-nightly-celadon hover:text-nightly-honeydew\"\n              }`}\n            >\n              <FaChartBar />\n              <span>Dashboard</span>\n            </button>\n            <button\n              onClick={() => setViewMode(\"gallery\")}\n              className={`flex items-center space-x-2 px-3 py-2 rounded-md text-sm transition-colors ${\n                viewMode === \"gallery\"\n                  ? \"bg-nightly-aquamarine text-black font-semibold\"\n                  : \"text-nightly-celadon hover:text-nightly-honeydew\"\n              }`}\n            >\n              <FaList />\n              <span>Gallery</span>\n            </button>\n            <button\n              onClick={() => setViewMode(\"leaderboards\")}\n              className={`flex items-center space-x-2 px-3 py-2 rounded-md text-sm transition-colors ${\n                viewMode === \"leaderboards\"\n                  ? \"bg-nightly-aquamarine text-black font-semibold\"\n                  : \"text-nightly-celadon hover:text-nightly-honeydew\"\n              }`}\n            >\n              <FaUsers />\n              <span>Leaderboards</span>\n            </button>\n            <button\n              onClick={() => setViewMode(\"privacy\")}\n              className={`flex items-center space-x-2 px-3 py-2 rounded-md text-sm transition-colors ${\n                viewMode === \"privacy\"\n                  ? \"bg-nightly-aquamarine text-black font-semibold\"\n                  : \"text-nightly-celadon hover:text-nightly-honeydew\"\n              }`}\n            >\n              <FaCog />\n              <span>Privacy</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Content */}\n        {viewMode === \"dashboard\" && <AchievementDashboard />}\n\n        {viewMode === \"gallery\" && (\n          <AchievementGallery\n            achievementsWithProgress={achievementsWithProgress}\n            onToggleVisibility={toggleAchievementVisibility}\n            isOwnGallery={true}\n          />\n        )}\n\n        {viewMode === \"leaderboards\" && <LeaderboardView />}\n\n        {viewMode === \"privacy\" && (\n          <AchievementPrivacySettings\n            onClose={() => setViewMode(\"dashboard\")}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AchievementPage;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/ChastityTracking.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (240). Maximum allowed is 75.",
        "line": 85,
        "column": 31,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 374,
        "endColumn": 2
      },
      {
        "ruleId": "max-statements",
        "severity": 1,
        "message": "Arrow function has too many statements (48). Maximum allowed is 25.",
        "line": 85,
        "column": 31,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 374,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 1,
        "message": "Arrow function has a complexity of 29. Maximum allowed is 15.",
        "line": 85,
        "column": 31,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 374,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from \"react\";\nimport { RestoreSessionPrompt } from \"../components/tracker/RestoreSessionPrompt\";\nimport { SessionLoader } from \"../components/tracker/SessionLoader\";\nimport { SessionRecoveryModal } from \"../components/tracker/SessionRecoveryModal\";\nimport { TrackerStats } from \"../components/tracker/TrackerStats\";\nimport { ActionButtons } from \"../components/tracker/ActionButtons\";\nimport { PauseResumeButtons } from \"../components/tracker/PauseResumeButtons\";\n// TODO: CooldownTimer temporarily disabled due to service import restrictions\n// import { CooldownTimer } from \"../components/tracker/CooldownTimer\";\nimport { ReasonModals } from \"../components/tracker/ReasonModals\";\nimport { TrackerHeader } from \"../components/tracker/TrackerHeader\";\nimport { useSessionPersistence } from \"../hooks/useSessionPersistence\";\nimport { useAuth } from \"../hooks/api/useAuth\";\nimport { logger } from \"../utils/logging\";\nimport type { DBSession } from \"../types/database\";\nimport type { SessionRestorationResult } from \"../services/SessionPersistenceService\";\n// TODO: Replace with proper hook pattern\n// import { usePauseState } from \"../hooks/usePauseState\";\n// import { SessionService } from \"../services/api/session-service\";\n\n// Helper function to handle session restoration\nconst createSessionRestorationHandler =\n  (\n    setCurrentSession: (session: DBSession | null) => void,\n    startHeartbeat: (sessionId: string) => void,\n    setCorruptedSession: (session: DBSession | null) => void,\n    setShowSessionRecovery: (show: boolean) => void,\n  ) =>\n  (result: SessionRestorationResult) => {\n    logger.info(\"Session restoration completed\", {\n      wasRestored: result.wasRestored,\n      sessionId: result.session?.id,\n    });\n\n    if (result.session) {\n      setCurrentSession(result.session);\n      startHeartbeat(result.session.id);\n\n      // If session had validation issues but was recovered, show recovery modal\n      if (result.error && result.session) {\n        setCorruptedSession(result.session);\n        setShowSessionRecovery(true);\n      }\n    }\n  };\n\n// Helper function to handle session recovery\nconst createSessionRecoveryHandler =\n  (\n    setCurrentSession: (session: DBSession | null) => void,\n    backupSession: (session: DBSession) => Promise<void>,\n    startHeartbeat: (sessionId: string) => void,\n    setShowSessionRecovery: (show: boolean) => void,\n    setCorruptedSession: (session: DBSession | null) => void,\n  ) =>\n  async (session: DBSession) => {\n    try {\n      setCurrentSession(session);\n      await backupSession(session);\n      startHeartbeat(session.id);\n      setShowSessionRecovery(false);\n      setCorruptedSession(null);\n      logger.info(\"Session recovered successfully\", { sessionId: session.id });\n    } catch (error) {\n      logger.error(\"Failed to recover session\", { error: error as Error });\n    }\n  };\n\n// Helper function to handle session discard\nconst createSessionDiscardHandler =\n  (\n    setCurrentSession: (session: DBSession | null) => void,\n    setShowSessionRecovery: (show: boolean) => void,\n    setCorruptedSession: (session: DBSession | null) => void,\n    stopHeartbeat: () => void,\n  ) =>\n  () => {\n    setCurrentSession(null);\n    setShowSessionRecovery(false);\n    setCorruptedSession(null);\n    stopHeartbeat();\n    logger.info(\"Corrupted session discarded\");\n  };\n\nconst TrackerPage: React.FC = () => {\n  // Authentication state\n  const { data: user, isLoading: authLoading } = useAuth();\n\n  // Session persistence state\n  const {\n    isInitializing,\n    error: persistenceError,\n    backupSession,\n    startHeartbeat,\n    stopHeartbeat,\n  } = useSessionPersistence({\n    userId: user?.uid,\n    autoInitialize: true,\n  });\n\n  // Session state\n  const [currentSession, setCurrentSession] = useState<DBSession | null>(null);\n  const [showSessionRecovery, setShowSessionRecovery] = useState(false);\n  const [isSessionInitialized, setIsSessionInitialized] = useState(false);\n  const [corruptedSession, setCorruptedSession] = useState<DBSession | null>(\n    null,\n  );\n\n  // Create handlers using helper functions\n  const handleSessionRestored = createSessionRestorationHandler(\n    setCurrentSession,\n    startHeartbeat,\n    setCorruptedSession,\n    setShowSessionRecovery,\n  );\n\n  const handleRecoverSession = createSessionRecoveryHandler(\n    setCurrentSession,\n    backupSession,\n    startHeartbeat,\n    setShowSessionRecovery,\n    setCorruptedSession,\n  );\n\n  const handleDiscardSession = createSessionDiscardHandler(\n    setCurrentSession,\n    setShowSessionRecovery,\n    setCorruptedSession,\n    stopHeartbeat,\n  );\n\n  // Handle session persistence initialization\n  const handleSessionInitialized = () => {\n    setIsSessionInitialized(true);\n    logger.debug(\"Session persistence initialized\");\n  };\n\n  // Backup session state when it changes\n  useEffect(() => {\n    if (currentSession && isSessionInitialized) {\n      backupSession(currentSession).catch((error) => {\n        logger.error(\"Failed to backup session\", { error: error as Error });\n      });\n    }\n  }, [currentSession, isSessionInitialized, backupSession]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      stopHeartbeat();\n    };\n  }, [stopHeartbeat]);\n\n  // TODO: Replace with proper hook pattern\n  // const {\n  //   pauseState,\n  //   isLoading: pauseStateLoading,\n  //   error: pauseStateError,\n  //   refreshPauseState,\n  // } = usePauseState({ userId, sessionId: currentSession?.id });\n\n  // Mock pause state data for now\n  const pauseState = {\n    canPause: true,\n    cooldownRemaining: undefined,\n    lastPauseTime: undefined,\n    nextPauseAvailable: undefined,\n  };\n  const pauseStateLoading = false;\n  const pauseStateError = null;\n  const refreshPauseState = () => {};\n\n  // Mock session data - replace with real session management\n  const isCageOn = true;\n  const isPaused = false;\n  const remainingGoalTime = 3600;\n  const keyholderName = \"Keyholder\";\n  const savedSubmissivesName = \"Submissive\";\n  const requiredKeyholderDurationSeconds = 7200;\n  const mainChastityDisplayTime = 3600;\n  const topBoxLabel = \"Total Locked Time\";\n  const topBoxTime = \"1d 2h 3m\";\n  const livePauseDuration = 0;\n  const accumulatedPauseTimeThisSession = 0;\n  const timeCageOff = 0;\n  const totalChastityTime = 86400;\n  const totalTimeCageOff = 0;\n  const showRestoreSessionPrompt = false;\n  const pauseCooldownMessage = null;\n  const denialCooldownActive = false;\n  const hasPendingReleaseRequest = false;\n  const isGoalActive = true;\n  const isHardcoreGoal = false;\n  const showReasonModal = false;\n  const showPauseReasonModal = false;\n  const _showEmergencyUnlockModal = false;\n  const useRealTimeTimer = false; // Feature flag for real-time timer\n\n  // Mock session data for emergency unlock\n  const sessionId = \"mock-session-123\";\n  const userId = user?.uid || \"mock-user-123\";\n\n  const handleEmergencyUnlock = () => {\n    // This would typically refresh the session state or redirect\n    logger.info(\"Emergency unlock completed - refreshing session state\", {\n      sessionId,\n      userId,\n    });\n  };\n\n  // Initialize mock session with real DBSession structure\n  useEffect(() => {\n    const mockSession: DBSession = {\n      id: \"session123\",\n      userId: \"user123\",\n      startTime: new Date(Date.now() - 86400000), // 1 day ago\n      endTime: undefined,\n      isPaused: false,\n      pauseStartTime: undefined,\n      accumulatedPauseTime: 3600, // 1 hour of accumulated pause time\n      goalDuration: 172800, // 48 hour goal\n      isHardcoreMode: false,\n      keyholderApprovalRequired: false,\n      syncStatus: \"synced\" as const,\n      lastModified: new Date(),\n    };\n    setCurrentSession(mockSession);\n  }, []);\n\n  const handlePause = () => {\n    logger.info(\"Session paused\", { sessionId: currentSession?.id, userId });\n    refreshPauseState();\n  };\n\n  const handleResume = () => {\n    logger.info(\"Session resumed\", { sessionId: currentSession?.id, userId });\n    refreshPauseState();\n  };\n\n  // Override pause state for demo - show that pause is available\n  const mockPauseState = {\n    canPause: true,\n    lastPauseTime: undefined,\n    nextPauseAvailable: undefined,\n    cooldownRemaining: undefined,\n  };\n\n  return (\n    <div className=\"text-nightly-spring-green\">\n      {/* Session Persistence Loading */}\n      {(authLoading || isInitializing) && user?.uid && (\n        <SessionLoader\n          userId={user.uid}\n          onSessionRestored={handleSessionRestored}\n          onInitialized={handleSessionInitialized}\n        />\n      )}\n\n      {/* Session Recovery Modal */}\n      {showSessionRecovery && corruptedSession && (\n        <SessionRecoveryModal\n          corruptedSession={corruptedSession}\n          onRecover={handleRecoverSession}\n          onDiscard={handleDiscardSession}\n        />\n      )}\n\n      {/* Session Persistence Error */}\n      {persistenceError && (\n        <div className=\"mx-4 mb-4 p-3 bg-red-900/50 border border-red-500 rounded-lg\">\n          <p className=\"text-sm text-red-200\">\n            <strong>Session Error:</strong> {persistenceError}\n          </p>\n        </div>\n      )}\n\n      {showRestoreSessionPrompt && (\n        <RestoreSessionPrompt onConfirm={() => {}} onDiscard={() => {}} />\n      )}\n\n      <TrackerHeader\n        remainingGoalTime={remainingGoalTime}\n        keyholderName={keyholderName}\n        savedSubmissivesName={savedSubmissivesName}\n        requiredKeyholderDurationSeconds={requiredKeyholderDurationSeconds}\n        isCageOn={isCageOn}\n        denialCooldownActive={denialCooldownActive}\n        pauseCooldownMessage={pauseCooldownMessage}\n      />\n\n      <TrackerStats\n        // Pass the real session when using real-time timer\n        currentSession={useRealTimeTimer ? currentSession : undefined}\n        // Legacy props for backward compatibility\n        mainChastityDisplayTime={\n          useRealTimeTimer ? undefined : mainChastityDisplayTime\n        }\n        topBoxLabel={topBoxLabel}\n        topBoxTime={useRealTimeTimer ? undefined : topBoxTime}\n        livePauseDuration={useRealTimeTimer ? undefined : livePauseDuration}\n        accumulatedPauseTimeThisSession={\n          useRealTimeTimer ? undefined : accumulatedPauseTimeThisSession\n        }\n        timeCageOff={timeCageOff}\n        isCageOn={isCageOn}\n        totalChastityTime={totalChastityTime}\n        totalTimeCageOff={totalTimeCageOff}\n        isPaused={isPaused}\n      />\n\n      {/* Enhanced Pause Controls with 4-hour cooldown */}\n      {isCageOn && currentSession && (\n        <>\n          {pauseState &&\n            !pauseState.canPause &&\n            pauseState.cooldownRemaining && (\n              <div className=\"mx-4 text-center\">\n                {/* TODO: Replace with proper CooldownTimer component */}\n                <div className=\"text-yellow-600\">\n                  Cooldown: {pauseState.cooldownRemaining}s remaining\n                </div>\n              </div>\n            )}\n\n          <PauseResumeButtons\n            sessionId={currentSession.id}\n            userId={user?.uid || \"\"}\n            isPaused={isPaused}\n            pauseState={mockPauseState} // Use mock state to show functionality\n            onPause={handlePause}\n            onResume={handleResume}\n          />\n        </>\n      )}\n\n      <ActionButtons\n        isCageOn={isCageOn}\n        isGoalActive={isGoalActive}\n        isHardcoreGoal={isHardcoreGoal}\n        requiredKeyholderDurationSeconds={requiredKeyholderDurationSeconds}\n        hasPendingReleaseRequest={hasPendingReleaseRequest}\n        sessionId={sessionId}\n        userId={userId}\n        onEmergencyUnlock={handleEmergencyUnlock}\n      />\n\n      <ReasonModals\n        showReasonModal={showReasonModal}\n        showPauseReasonModal={showPauseReasonModal}\n      />\n\n      {/* Debug info for development */}\n      {process.env.NODE_ENV === \"development\" && (\n        <div className=\"mt-8 p-4 bg-gray-800 rounded-lg text-xs\">\n          <h4 className=\"text-yellow-400 font-bold mb-2\">Debug: Pause State</h4>\n          <pre className=\"text-gray-300\">\n            {JSON.stringify(\n              {\n                canPause: pauseState?.canPause,\n                cooldownRemaining: pauseState?.cooldownRemaining,\n                lastPauseTime: pauseState?.lastPauseTime,\n                nextPauseAvailable: pauseState?.nextPauseAvailable,\n                isLoading: pauseStateLoading,\n                error: pauseStateError,\n              },\n              null,\n              2,\n            )}\n          </pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TrackerPage;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/Dashboard.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (113). Maximum allowed is 75.",
        "line": 11,
        "column": 29,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 135,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FeatureCard } from \"../components/dashboard/FeatureCard\";\nimport { AchievementDashboard } from \"../components/achievements\";\nimport { SessionPersistenceDemo } from \"../components/demo/SessionPersistenceDemo\";\n// TODO: DexieDemo temporarily disabled due to architectural restrictions\n// import { DexieDemo } from \"../components/common\";\nimport { sessionDBService } from \"../services/database\";\nimport { useAuthState } from \"../contexts\";\n\nconst Dashboard: React.FC = () => {\n  const { user } = useAuthState();\n  const [sessionDuration, setSessionDuration] = useState(\"0s\");\n\n  useEffect(() => {\n    if (user) {\n      const fetchSession = async () => {\n        const session = await sessionDBService.getCurrentSession(user.uid);\n        if (session) {\n          // This is a simplified duration calculation. A more robust solution would be needed.\n          const duration = Math.floor(\n            (new Date().getTime() - session.startTime.getTime()) / 1000,\n          );\n          setSessionDuration(`${duration}s`);\n        }\n      };\n      fetchSession();\n    }\n  }, [user]);\n\n  return (\n    <>\n      <main className=\"font-inter\">\n        {/* Dashboard title */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-white mb-4\">\n            Dashboard\n          </h1>\n        </div>\n\n        {/* Mobile Layout (single column) */}\n        <div className=\"block md:hidden space-y-6 mb-8\">\n          <Link to=\"/chastity-tracking\" className=\"block\">\n            <FeatureCard\n              title=\"Chastity Tracker\"\n              description={`Current Session: ${sessionDuration}`}\n              accentColor=\"orange\"\n            />\n          </Link>\n          <Link to=\"/log-event\" className=\"block\">\n            <FeatureCard\n              title=\"Log Event\"\n              description=\"View upcoming tasks & goals\"\n              accentColor=\"purple\"\n            />\n          </Link>\n          <Link to=\"/full-report\" className=\"block\">\n            <FeatureCard\n              title=\"Full Report\"\n              description=\"Analyze your journey\"\n              accentColor=\"orange\"\n            />\n          </Link>\n        </div>\n\n        {/* Desktop/Tablet Layout (2x2 grid) */}\n        <div className=\"hidden md:block mb-8\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-white\">\n              Welcome to ChastityOS Dashboard\n            </h2>\n          </div>\n          <div className=\"grid grid-cols-2 gap-6\">\n            <Link to=\"/chastity-tracking\">\n              <FeatureCard\n                title=\"Chastity Tracker\"\n                description={`Current Session: ${sessionDuration}`}\n                accentColor=\"orange\"\n              />\n            </Link>\n            <Link to=\"/log-event\">\n              <FeatureCard\n                title=\"Log Event\"\n                description=\"Record new events\"\n                accentColor=\"purple\"\n              />\n            </Link>\n            <Link to=\"/tasks\">\n              <FeatureCard\n                title=\"Tasks\"\n                description=\"View upcoming tasks\"\n                accentColor=\"purple\"\n              />\n            </Link>\n            <Link to=\"/full-report\">\n              <FeatureCard\n                title=\"Full Report\"\n                description=\"Analyze your journey\"\n                accentColor=\"orange\"\n              />\n            </Link>\n          </div>\n        </div>\n\n        {/* Achievement Dashboard */}\n        {user && (\n          <div className=\"mt-12\">\n            <AchievementDashboard />\n          </div>\n        )}\n\n        {/* Session Persistence Demo */}\n        <div className=\"mt-12\">\n          <SessionPersistenceDemo />\n        </div>\n\n        {/* TODO: Dexie Offline Demo temporarily disabled due to architectural restrictions */}\n        {/* <div className=\"mb-8\">\n          <div className=\"glass-card\">\n            <DexieDemo />\n          </div>\n        </div> */}\n\n        {/* Enhanced Keyholder access button */}\n        <div className=\"text-center mt-8\">\n          <Link to=\"/keyholder\">\n            <button className=\"bg-tekhelet hover:bg-tekhelet-600 text-white font-bold py-3 px-8 rounded-lg transition-colors duration-200\">\n              View Keyholder Dashboard\n            </button>\n          </Link>\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Dashboard;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/FullReportPage.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (113). Maximum allowed is 75.",
        "line": 27,
        "column": 6,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 145,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (104). Maximum allowed is 75.",
        "line": 153,
        "column": 6,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 264,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (106). Maximum allowed is 75.",
        "line": 267,
        "column": 68,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 382,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect, useMemo } from \"react\";\nimport { useAuthState } from \"../contexts\";\nimport {\n  sessionDBService,\n  eventDBService,\n  taskDBService,\n  goalDBService,\n} from \"../services/database\";\nimport type { DBSession, DBEvent, DBTask, DBGoal } from \"../types/database\";\nimport { logger } from \"../utils/logging\";\nimport { useSessionTimer } from \"../hooks/useSessionTimer\";\nimport {\n  FaClock,\n  FaPlay,\n  FaPause,\n  FaStop,\n  FaTrophy,\n  FaCalendar,\n  FaChartBar,\n  FaHistory,\n  FaSpinner,\n} from \"../utils/iconImport\";\n\n// Current Status Section with Real-time Timer\nconst CurrentStatusSection: React.FC<{\n  currentSession: DBSession | null;\n}> = ({ currentSession }) => {\n  // Use the new session timer hook for real-time updates\n  const timerData = useSessionTimer(currentSession);\n\n  const getSessionStatus = () => {\n    if (!currentSession)\n      return {\n        status: \"No Active Session\",\n        icon: FaStop,\n        color: \"text-gray-400\",\n      };\n    if (currentSession.isPaused)\n      return { status: \"Paused\", icon: FaPause, color: \"text-yellow-400\" };\n    return { status: \"Active\", icon: FaPlay, color: \"text-green-400\" };\n  };\n\n  const sessionStatus = getSessionStatus();\n  const StatusIcon = sessionStatus.icon;\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6 mb-6\">\n      <div className=\"flex items-center gap-3 mb-6\">\n        <FaClock className=\"text-nightly-aquamarine\" />\n        <h2 className=\"text-xl font-semibold text-nightly-honeydew\">\n          Current Status\n        </h2>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Session Status */}\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center gap-2 mb-2\">\n            <StatusIcon className={sessionStatus.color} />\n            <span className={`text-lg font-medium ${sessionStatus.color}`}>\n              {sessionStatus.status}\n            </span>\n          </div>\n          {currentSession && (\n            <>\n              <div className=\"text-3xl font-mono text-nightly-honeydew mb-2\">\n                {timerData.effectiveTimeFormatted}\n              </div>\n              <div className=\"text-sm text-nightly-celadon\">\n                Started: {currentSession.startTime.toLocaleDateString()}{\" \"}\n                {currentSession.startTime.toLocaleTimeString()}\n              </div>\n              {currentSession.goalDuration && (\n                <div className=\"text-sm text-nightly-celadon\">\n                  Goal: {timerData.remainingGoalTimeFormatted} remaining\n                </div>\n              )}\n              {timerData.isPaused && timerData.currentPauseDuration > 0 && (\n                <div className=\"text-sm text-yellow-400 mt-2\">\n                  Current pause: {timerData.currentPauseDurationFormatted}\n                </div>\n              )}\n            </>\n          )}\n        </div>\n\n        {/* Session Details */}\n        <div className=\"space-y-3\">\n          {currentSession && (\n            <>\n              <div className=\"flex justify-between\">\n                <span className=\"text-nightly-celadon\">Mode:</span>\n                <span className=\"text-nightly-honeydew\">\n                  {currentSession.isHardcoreMode ? \"Hardcore\" : \"Normal\"}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-nightly-celadon\">Total Time:</span>\n                <span className=\"text-nightly-honeydew\">\n                  {timerData.totalElapsedTimeFormatted}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-nightly-celadon\">Accumulated Pause:</span>\n                <span className=\"text-nightly-honeydew\">\n                  {currentSession.accumulatedPauseTime > 0\n                    ? `${Math.floor(currentSession.accumulatedPauseTime / 60)}m ${currentSession.accumulatedPauseTime % 60}s`\n                    : \"0s\"}\n                </span>\n              </div>\n              {currentSession.goalDuration && (\n                <>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-nightly-celadon\">Goal Progress:</span>\n                    <span className=\"text-nightly-honeydew\">\n                      {timerData.goalProgress.toFixed(1)}%\n                    </span>\n                  </div>\n                  {timerData.isGoalCompleted && (\n                    <div className=\"text-center mt-2\">\n                      <span className=\"inline-flex items-center gap-1 bg-green-500/20 text-green-400 px-3 py-1 rounded-full text-sm\">\n                        <FaTrophy />\n                        Goal Completed!\n                      </span>\n                    </div>\n                  )}\n                </>\n              )}\n              <div className=\"flex justify-between\">\n                <span className=\"text-nightly-celadon\">\n                  Keyholder Approval:\n                </span>\n                <span className=\"text-nightly-honeydew\">\n                  {currentSession.keyholderApprovalRequired\n                    ? \"Required\"\n                    : \"Not Required\"}\n                </span>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Statistics Section\nconst StatisticsSection: React.FC<{\n  sessions: DBSession[];\n  events: DBEvent[];\n  tasks: DBTask[];\n  goals: DBGoal[];\n}> = ({ sessions, events, tasks, goals }) => {\n  const stats = useMemo(() => {\n    const completedSessions = sessions.filter((s) => s.endTime);\n    const totalChastityTime = completedSessions.reduce((acc, session) => {\n      if (session.endTime) {\n        const duration = Math.floor(\n          (session.endTime.getTime() - session.startTime.getTime()) / 1000,\n        );\n        return acc + Math.max(0, duration - session.accumulatedPauseTime);\n      }\n      return acc;\n    }, 0);\n\n    const totalPauseTime = sessions.reduce(\n      (acc, session) => acc + session.accumulatedPauseTime,\n      0,\n    );\n    const completedTasks = tasks.filter((t) => t.status === \"completed\").length;\n    const completedGoals = goals.filter((g) => g.isCompleted).length;\n\n    const longestSession = Math.max(\n      ...completedSessions.map((s) => {\n        if (s.endTime) {\n          const duration = Math.floor(\n            (s.endTime.getTime() - s.startTime.getTime()) / 1000,\n          );\n          return Math.max(0, duration - s.accumulatedPauseTime);\n        }\n        return 0;\n      }),\n      0,\n    );\n\n    return {\n      totalSessions: sessions.length,\n      completedSessions: completedSessions.length,\n      totalChastityTime,\n      totalPauseTime,\n      completedTasks,\n      completedGoals,\n      longestSession,\n      totalEvents: events.length,\n    };\n  }, [sessions, events, tasks, goals]);\n\n  const formatDuration = (seconds: number) => {\n    const days = Math.floor(seconds / (24 * 60 * 60));\n    const hours = Math.floor((seconds % (24 * 60 * 60)) / (60 * 60));\n    const minutes = Math.floor((seconds % (60 * 60)) / 60);\n\n    if (days > 0) {\n      return `${days}d ${hours}h ${minutes}m`;\n    } else if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    } else {\n      return `${minutes}m`;\n    }\n  };\n\n  const statItems = [\n    { label: \"Total Sessions\", value: stats.totalSessions, icon: FaPlay },\n    {\n      label: \"Completed Sessions\",\n      value: stats.completedSessions,\n      icon: FaStop,\n    },\n    {\n      label: \"Total Chastity Time\",\n      value: formatDuration(stats.totalChastityTime),\n      icon: FaClock,\n    },\n    {\n      label: \"Total Pause Time\",\n      value: formatDuration(stats.totalPauseTime),\n      icon: FaPause,\n    },\n    {\n      label: \"Longest Session\",\n      value: formatDuration(stats.longestSession),\n      icon: FaTrophy,\n    },\n    { label: \"Completed Tasks\", value: stats.completedTasks, icon: FaChartBar },\n    { label: \"Completed Goals\", value: stats.completedGoals, icon: FaTrophy },\n    { label: \"Total Events\", value: stats.totalEvents, icon: FaHistory },\n  ];\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6 mb-6\">\n      <div className=\"flex items-center gap-3 mb-6\">\n        <FaChartBar className=\"text-nightly-lavender-floral\" />\n        <h2 className=\"text-xl font-semibold text-nightly-honeydew\">\n          Statistics\n        </h2>\n      </div>\n\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        {statItems.map((item, index) => {\n          const Icon = item.icon;\n          return (\n            <div key={index} className=\"text-center\">\n              <Icon className=\"text-nightly-aquamarine text-2xl mb-2 mx-auto\" />\n              <div className=\"text-lg font-semibold text-nightly-honeydew mb-1\">\n                {item.value}\n              </div>\n              <div className=\"text-sm text-nightly-celadon\">{item.label}</div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\n// Session History Section\nconst SessionHistorySection: React.FC<{ sessions: DBSession[] }> = ({\n  sessions,\n}) => {\n  const [showAll, setShowAll] = useState(false);\n\n  const sortedSessions = useMemo(() => {\n    return [...sessions].sort(\n      (a, b) => b.startTime.getTime() - a.startTime.getTime(),\n    );\n  }, [sessions]);\n\n  const displaySessions = showAll\n    ? sortedSessions\n    : sortedSessions.slice(0, 10);\n\n  const formatDuration = (seconds: number) => {\n    const days = Math.floor(seconds / (24 * 60 * 60));\n    const hours = Math.floor((seconds % (24 * 60 * 60)) / (60 * 60));\n    const minutes = Math.floor((seconds % (60 * 60)) / 60);\n\n    if (days > 0) {\n      return `${days}d ${hours}h ${minutes}m`;\n    } else if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    } else {\n      return `${minutes}m`;\n    }\n  };\n\n  const getSessionDuration = (session: DBSession) => {\n    if (!session.endTime) return 0;\n    const totalDuration = Math.floor(\n      (session.endTime.getTime() - session.startTime.getTime()) / 1000,\n    );\n    return Math.max(0, totalDuration - session.accumulatedPauseTime);\n  };\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6 mb-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-3\">\n          <FaHistory className=\"text-nightly-spring-green\" />\n          <h2 className=\"text-xl font-semibold text-nightly-honeydew\">\n            Session History\n          </h2>\n        </div>\n        {sessions.length > 10 && (\n          <button\n            onClick={() => setShowAll(!showAll)}\n            className=\"text-nightly-aquamarine hover:text-nightly-spring-green transition-colors\"\n          >\n            {showAll ? \"Show Less\" : `Show All (${sessions.length})`}\n          </button>\n        )}\n      </div>\n\n      {displaySessions.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <FaCalendar className=\"text-4xl text-nightly-celadon/50 mb-4 mx-auto\" />\n          <div className=\"text-nightly-celadon\">No sessions found</div>\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          {displaySessions.map((session) => (\n            <div key={session.id} className=\"bg-white/5 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"font-medium text-nightly-honeydew\">\n                    {session.startTime.toLocaleDateString()}{\" \"}\n                    {session.startTime.toLocaleTimeString()}\n                  </div>\n                  <div className=\"text-sm text-nightly-celadon\">\n                    {session.endTime ? (\n                      <>\n                        Ended: {session.endTime.toLocaleDateString()}{\" \"}\n                        {session.endTime.toLocaleTimeString()}\n                        {session.endReason && ` (${session.endReason})`}\n                      </>\n                    ) : (\n                      \"Active Session\"\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"text-right\">\n                  <div className=\"font-mono text-nightly-honeydew\">\n                    {session.endTime\n                      ? formatDuration(getSessionDuration(session))\n                      : \"Ongoing\"}\n                  </div>\n                  {session.accumulatedPauseTime > 0 && (\n                    <div className=\"text-xs text-yellow-400\">\n                      Pause: {formatDuration(session.accumulatedPauseTime)}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {session.isHardcoreMode && (\n                <span className=\"inline-block mt-2 bg-red-500/20 text-red-400 px-2 py-1 text-xs rounded\">\n                  Hardcore Mode\n                </span>\n              )}\n\n              {session.notes && (\n                <div className=\"mt-2 text-sm text-nightly-celadon\">\n                  Notes: {session.notes}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst FullReportPage: React.FC = () => {\n  const { user } = useAuthState();\n  const [currentSession, setCurrentSession] = useState<DBSession | null>(null);\n  const [sessions, setSessions] = useState<DBSession[]>([]);\n  const [events, setEvents] = useState<DBEvent[]>([]);\n  const [tasks, setTasks] = useState<DBTask[]>([]);\n  const [goals, setGoals] = useState<DBGoal[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!user) return;\n\n      try {\n        setLoading(true);\n\n        const [currentSessionData, sessionData, eventData, taskData, goalData] =\n          await Promise.all([\n            sessionDBService.getCurrentSession(user.uid),\n            sessionDBService.findByUserId(user.uid),\n            eventDBService.findByUserId(user.uid),\n            taskDBService.findByUserId(user.uid),\n            goalDBService.findByUserId(user.uid),\n          ]);\n\n        setCurrentSession(currentSessionData || null);\n        setSessions(sessionData);\n        setEvents(eventData);\n        setTasks(taskData);\n        setGoals(goalData);\n      } catch (error) {\n        logger.error(\"Error fetching report data:\", error, \"FullReportPage\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [user]);\n\n  return (\n    <div className=\"text-nightly-spring-green\">\n      {/* Content */}\n      <div className=\"p-4 max-w-6xl mx-auto\">\n        {loading ? (\n          <div className=\"text-center py-8\">\n            <FaSpinner className=\"animate-spin text-2xl text-nightly-aquamarine mb-4 mx-auto\" />\n            <div className=\"text-nightly-celadon\">Loading report...</div>\n          </div>\n        ) : (\n          <>\n            <CurrentStatusSection currentSession={currentSession} />\n            <StatisticsSection\n              sessions={sessions}\n              events={events}\n              tasks={tasks}\n              goals={goals}\n            />\n            <SessionHistorySection sessions={sessions} />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FullReportPage;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/KeyholderDemo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/KeyholderPage.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (106). Maximum allowed is 75.",
        "line": 16,
        "column": 33,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 136,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from \"react\";\nimport { useAuthState } from \"../contexts\";\nimport { useKeyholderStore } from \"../stores/keyholderStore\";\nimport { sessionDBService } from \"../services/database\";\nimport type { DBSession } from \"../types/database\";\nimport {\n  KeyholderPasswordUnlock,\n  AccountLinkingPreview,\n  AdminDashboard,\n  SessionControls,\n  TaskManagement,\n} from \"../components/keyholder\";\nimport { logger } from \"../utils/logging\";\nimport { FaLock, FaCog, FaEye, FaSpinner } from \"../utils/iconImport\";\n\nconst KeyholderPage: React.FC = () => {\n  const { user } = useAuthState();\n  // Selective subscriptions for specific keyholder store values\n  const isKeyholderModeUnlocked = useKeyholderStore(\n    (state) => state.isKeyholderModeUnlocked,\n  );\n  const lockKeyholderControls = useKeyholderStore(\n    (state) => state.lockKeyholderControls,\n  );\n  const [currentSession, setCurrentSession] = useState<DBSession | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!user) return;\n\n      try {\n        setLoading(true);\n        const [session] = await Promise.all([\n          sessionDBService.getCurrentSession(user.uid),\n        ]);\n\n        setCurrentSession(session || null);\n      } catch (error) {\n        logger.error(\"Error fetching keyholder data:\", error, \"KeyholderPage\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [user]);\n\n  // Auto-lock when leaving page\n  useEffect(() => {\n    return () => {\n      if (isKeyholderModeUnlocked) {\n        lockKeyholderControls();\n      }\n    };\n  }, [isKeyholderModeUnlocked, lockKeyholderControls]);\n\n  return (\n    <div className=\"text-nightly-spring-green\">\n      {/* Content */}\n      <div className=\"p-4 max-w-4xl mx-auto\">\n        {loading ? (\n          <div className=\"text-center py-8\">\n            <FaSpinner className=\"animate-spin text-2xl text-nightly-aquamarine mb-4 mx-auto\" />\n            <div className=\"text-nightly-celadon\">\n              Loading keyholder controls...\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {/* Account Linking - Always visible */}\n            <AccountLinkingPreview />\n\n            {/* Admin Dashboard - Always visible for keyholders */}\n            <AdminDashboard />\n\n            {/* Current Password System */}\n            <KeyholderPasswordUnlock />\n\n            {/* Keyholder Controls - Only when unlocked */}\n            {isKeyholderModeUnlocked && (\n              <>\n                <SessionControls session={currentSession} />\n                <TaskManagement userId={user?.uid || \"\"} />\n\n                {/* Additional Controls */}\n                <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <FaCog className=\"text-nightly-spring-green\" />\n                    <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n                      Keyholder Settings\n                    </h3>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <button className=\"bg-white/5 hover:bg-white/10 p-4 rounded-lg text-left transition-colors\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <FaEye className=\"text-nightly-aquamarine\" />\n                        <span className=\"font-medium text-nightly-honeydew\">\n                          View Full Report\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-nightly-celadon\">\n                        See complete session history and statistics\n                      </p>\n                    </button>\n\n                    <button className=\"bg-white/5 hover:bg-white/10 p-4 rounded-lg text-left transition-colors\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <FaCog className=\"text-nightly-lavender-floral\" />\n                        <span className=\"font-medium text-nightly-honeydew\">\n                          Manage Rules\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-nightly-celadon\">\n                        Set requirements and restrictions\n                      </p>\n                    </button>\n                  </div>\n\n                  <button\n                    onClick={lockKeyholderControls}\n                    className=\"mt-4 bg-red-500/20 hover:bg-red-500/30 text-red-400 px-4 py-2 rounded font-medium transition-colors flex items-center gap-2\"\n                  >\n                    <FaLock />\n                    Lock Controls\n                  </button>\n                </div>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default KeyholderPage;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/LogEventPage.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/MobileShowcase.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/PublicProfilePage.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/RelationshipsPage.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (78). Maximum allowed is 75.",
        "line": 9,
        "column": 37,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 91,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Relationships Page\n * Main page for managing keyholder relationships\n */\nimport React from \"react\";\nimport RelationshipManager from \"@/components/relationships/RelationshipManager\";\nimport { useRelationships } from \"@/hooks/useRelationships\";\n\nconst RelationshipsPage: React.FC = () => {\n  const { needsMigration } = useRelationships();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"container mx-auto py-8\">\n        {/* Page header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Keyholder Relationships\n          </h1>\n          <p className=\"text-gray-600 max-w-2xl mx-auto\">\n            Manage your connections with keyholders and submissives. Create\n            relationships to share chastity tracking, tasks, and oversight.\n          </p>\n        </div>\n\n        {/* Relationship manager */}\n        <RelationshipManager />\n\n        {/* Help section */}\n        <div className=\"max-w-4xl mx-auto mt-12 p-6\">\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              How Relationships Work\n            </h2>\n            <div className=\"grid md:grid-cols-2 gap-6 text-sm text-gray-600\">\n              <div>\n                <h3 className=\"font-medium text-gray-900 mb-2\">\n                  For Submissives:\n                </h3>\n                <ul className=\"space-y-1\">\n                  <li>• Send requests to keyholders</li>\n                  <li>• Share your chastity sessions and progress</li>\n                  <li>• Receive tasks and assignments</li>\n                  <li>• Get approval for session changes</li>\n                  <li>• Log events and milestones</li>\n                </ul>\n              </div>\n              <div>\n                <h3 className=\"font-medium text-gray-900 mb-2\">\n                  For Keyholders:\n                </h3>\n                <ul className=\"space-y-1\">\n                  <li>• Accept requests from submissives</li>\n                  <li>• Monitor their chastity progress</li>\n                  <li>• Create and approve tasks</li>\n                  <li>• Control session permissions</li>\n                  <li>• Set goals and requirements</li>\n                </ul>\n              </div>\n            </div>\n\n            <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n              <h3 className=\"font-medium text-blue-900 mb-2\">\n                Privacy & Security\n              </h3>\n              <p className=\"text-blue-800 text-sm\">\n                All relationship data is encrypted and only visible to the\n                participants. You can end relationships at any time, and your\n                data remains under your control.\n              </p>\n            </div>\n\n            {needsMigration && (\n              <div className=\"mt-6 p-4 bg-yellow-50 rounded-lg\">\n                <h3 className=\"font-medium text-yellow-900 mb-2\">\n                  Data Migration\n                </h3>\n                <p className=\"text-yellow-800 text-sm\">\n                  We've detected existing chastity data. Use the migration\n                  feature above to convert your data to the new relationship\n                  system. This creates a self-managed profile that you can later\n                  share with a keyholder.\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RelationshipsPage;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/RewardsPunishmentsPage.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (85). Maximum allowed is 75.",
        "line": 42,
        "column": 42,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 133,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from \"react\";\nimport {\n  LogItem,\n  RewardPunishmentStats,\n  ManualEntryForm,\n} from \"../components/rewards_punishments\";\nimport type { RewardPunishmentLog } from \"../components/rewards_punishments\";\nimport { FaFilter, FaSpinner, FaTrophy } from \"../utils/iconImport\";\n// Mock data for demonstration\nconst mockRewardsAndPunishments: RewardPunishmentLog[] = [\n  {\n    id: \"1\",\n    type: \"reward\",\n    title: \"Task Completed Early\",\n    description: \"Completed daily exercise routine ahead of schedule\",\n    timeChangeSeconds: -7200, // 2 hours removed\n    source: \"task_completion\",\n    createdAt: new Date(Date.now() - 86400000), // 1 day ago\n    notes: \"Excellent dedication to fitness goals\",\n  },\n  {\n    id: \"2\",\n    type: \"punishment\",\n    title: \"Late Task Submission\",\n    description: \"Failed to submit daily report on time\",\n    timeChangeSeconds: 14400, // 4 hours added\n    source: \"rule_violation\",\n    createdAt: new Date(Date.now() - 172800000), // 2 days ago\n  },\n  {\n    id: \"3\",\n    type: \"reward\",\n    title: \"Weekly Milestone\",\n    description: \"Successfully completed one week of consistent tracking\",\n    timeChangeSeconds: -10800, // 3 hours removed\n    source: \"milestone\",\n    createdAt: new Date(Date.now() - 604800000), // 1 week ago\n    notes: \"Keep up the great progress!\",\n  },\n];\n\nconst RewardsPunishmentsPage: React.FC = () => {\n  const [logs, setLogs] = useState<RewardPunishmentLog[]>(\n    mockRewardsAndPunishments,\n  );\n  const [filter, setFilter] = useState<\"all\" | \"rewards\" | \"punishments\">(\n    \"all\",\n  );\n  const [loading] = useState(false);\n\n  const filteredLogs = logs\n    .filter((log) => {\n      if (filter === \"all\") return true;\n      if (filter === \"rewards\") return log.type === \"reward\";\n      if (filter === \"punishments\") return log.type === \"punishment\";\n      return true;\n    })\n    .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n  const handleManualEntry = (\n    entry: Omit<RewardPunishmentLog, \"id\" | \"createdAt\">,\n  ) => {\n    const newEntry: RewardPunishmentLog = {\n      ...entry,\n      id: `manual_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      createdAt: new Date(),\n    };\n\n    setLogs((prev) => [newEntry, ...prev]);\n  };\n\n  return (\n    <div className=\"text-nightly-spring-green\">\n      {/* Content */}\n      <div className=\"p-4 max-w-4xl mx-auto\">\n        <RewardPunishmentStats logs={logs} />\n\n        {/* Controls */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center gap-4\">\n            <FaFilter className=\"text-nightly-celadon\" />\n            <select\n              value={filter}\n              onChange={(e) =>\n                setFilter(e.target.value as \"all\" | \"rewards\" | \"punishments\")\n              }\n              className=\"bg-white/10 border border-white/10 rounded p-2 text-nightly-honeydew\"\n            >\n              <option value=\"all\">All ({logs.length})</option>\n              <option value=\"rewards\">\n                Rewards ({logs.filter((l) => l.type === \"reward\").length})\n              </option>\n              <option value=\"punishments\">\n                Punishments (\n                {logs.filter((l) => l.type === \"punishment\").length})\n              </option>\n            </select>\n          </div>\n\n          <ManualEntryForm onSubmit={handleManualEntry} />\n        </div>\n\n        {/* Logs */}\n        {loading ? (\n          <div className=\"text-center py-8\">\n            <FaSpinner className=\"animate-spin text-2xl text-nightly-aquamarine mb-4 mx-auto\" />\n            <div className=\"text-nightly-celadon\">\n              Loading rewards and punishments...\n            </div>\n          </div>\n        ) : filteredLogs.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <FaTrophy className=\"text-4xl text-nightly-celadon/50 mb-4 mx-auto\" />\n            <div className=\"text-nightly-celadon\">\n              No {filter === \"all\" ? \"entries\" : filter} found\n            </div>\n            <div className=\"text-sm text-nightly-celadon/70\">\n              {filter === \"all\"\n                ? \"Complete tasks or have your keyholder add entries\"\n                : `Switch to 'All' to see other entries`}\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {filteredLogs.map((log) => (\n              <LogItem key={log.id} item={log} />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RewardsPunishmentsPage;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/RulesPage.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (159). Maximum allowed is 75.",
        "line": 72,
        "column": 29,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 245,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from \"react\";\nimport { RuleCard, RuleEditor } from \"../components/rules\";\nimport type { ChastityRule } from \"../components/rules\";\nimport { FaBook, FaEdit, FaInfo } from \"../utils/iconImport\";\n\n// Mock rules data\nconst mockRules: ChastityRule[] = [\n  {\n    id: \"1\",\n    title: \"Daily Check-ins\",\n    content: `Must complete daily check-in form by 10 PM each night.\n\n**Required information:**\n- Current mood and energy level\n- Any challenges or temptations faced\n- Tomorrow's goals and commitments\n\n**Consequences for missing:**\n- +12 hours added to chastity time\n- Extra task assigned for the following day`,\n    isActive: true,\n    createdBy: \"keyholder\",\n    createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n    lastModified: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n  },\n  {\n    id: \"2\",\n    title: \"Exercise Requirements\",\n    content: `Minimum 30 minutes of physical activity daily.\n\n**Acceptable activities:**\n- Cardio (running, cycling, swimming)\n- Strength training\n- Yoga or stretching\n- Sports activities\n\n**Tracking:**\n- Log activity type and duration\n- Include photo evidence when requested\n- Heart rate data if available\n\n**Rewards for consistency:**\n- 7 days straight: -4 hours\n- 14 days straight: -8 hours\n- 30 days straight: -24 hours`,\n    isActive: true,\n    createdBy: \"keyholder\",\n    createdAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000),\n    lastModified: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000),\n  },\n  {\n    id: \"3\",\n    title: \"Communication Protocol\",\n    content: `Clear communication expectations between keyholder and submissive.\n\n**Response times:**\n- Urgent messages: Within 1 hour\n- Regular messages: Within 4 hours\n- Check-ins: Daily by agreed time\n\n**Escalation process:**\n- If no response within timeframe\n- Emergency contact procedures\n- Safe words and their meanings`,\n    isActive: false,\n    createdBy: \"submissive\",\n    createdAt: new Date(Date.now() - 21 * 24 * 60 * 60 * 1000),\n    lastModified: new Date(Date.now() - 21 * 24 * 60 * 60 * 1000),\n  },\n];\n\nconst RulesPage: React.FC = () => {\n  const [rules, setRules] = useState<ChastityRule[]>(mockRules);\n  const [editingRule, setEditingRule] = useState<ChastityRule | null>(null);\n  const [showEditor, setShowEditor] = useState(false);\n  const [filter, setFilter] = useState<\"all\" | \"active\" | \"inactive\">(\"all\");\n\n  const filteredRules = rules\n    .filter((rule) => {\n      if (filter === \"all\") return true;\n      if (filter === \"active\") return rule.isActive;\n      if (filter === \"inactive\") return !rule.isActive;\n      return true;\n    })\n    .sort((a, b) => {\n      // Active rules first, then by last modified\n      if (a.isActive && !b.isActive) return -1;\n      if (!a.isActive && b.isActive) return 1;\n      return b.lastModified.getTime() - a.lastModified.getTime();\n    });\n\n  const handleEditRule = (ruleId: string) => {\n    const rule = rules.find((r) => r.id === ruleId);\n    setEditingRule(rule || null);\n    setShowEditor(true);\n  };\n\n  const handleToggleRule = (ruleId: string) => {\n    setRules((prev) =>\n      prev.map((rule) =>\n        rule.id === ruleId\n          ? { ...rule, isActive: !rule.isActive, lastModified: new Date() }\n          : rule,\n      ),\n    );\n  };\n\n  const handleSaveRule = (\n    ruleData: Omit<ChastityRule, \"id\" | \"createdAt\" | \"lastModified\">,\n  ) => {\n    const now = new Date();\n\n    if (editingRule) {\n      // Update existing rule\n      setRules((prev) =>\n        prev.map((rule) =>\n          rule.id === editingRule.id\n            ? {\n                ...rule,\n                ...ruleData,\n                lastModified: now,\n              }\n            : rule,\n        ),\n      );\n    } else {\n      // Create new rule\n      const newRule: ChastityRule = {\n        ...ruleData,\n        id: `rule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        createdAt: now,\n        lastModified: now,\n      };\n      setRules((prev) => [newRule, ...prev]);\n    }\n\n    setShowEditor(false);\n    setEditingRule(null);\n  };\n\n  const handleCancelEdit = () => {\n    setShowEditor(false);\n    setEditingRule(null);\n  };\n\n  return (\n    <div className=\"text-nightly-spring-green\">\n      {/* Content */}\n      <div className=\"p-4 max-w-4xl mx-auto\">\n        {/* Info Banner */}\n        <div className=\"bg-nightly-aquamarine/10 border border-nightly-aquamarine/20 rounded-lg p-4 mb-6\">\n          <div className=\"flex items-start gap-3\">\n            <FaInfo className=\"text-nightly-aquamarine mt-1\" />\n            <div>\n              <h3 className=\"font-medium text-nightly-honeydew mb-1\">\n                About Rules\n              </h3>\n              <p className=\"text-sm text-nightly-celadon\">\n                Rules define the expectations and consequences for your chastity\n                relationship. Both submissives and keyholders can create rules,\n                but only active rules are enforced. Use markdown formatting for\n                better organization.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Controls */}\n        {!showEditor && (\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center gap-4\">\n              <FaBook className=\"text-nightly-celadon\" />\n              <select\n                value={filter}\n                onChange={(e) =>\n                  setFilter(e.target.value as \"all\" | \"active\" | \"inactive\")\n                }\n                className=\"bg-white/10 border border-white/10 rounded p-2 text-nightly-honeydew\"\n              >\n                <option value=\"all\">All Rules ({rules.length})</option>\n                <option value=\"active\">\n                  Active ({rules.filter((r) => r.isActive).length})\n                </option>\n                <option value=\"inactive\">\n                  Inactive ({rules.filter((r) => !r.isActive).length})\n                </option>\n              </select>\n            </div>\n\n            <button\n              onClick={() => {\n                setEditingRule(null);\n                setShowEditor(true);\n              }}\n              className=\"bg-nightly-aquamarine hover:bg-nightly-aquamarine/80 text-black px-4 py-2 rounded font-medium transition-colors flex items-center gap-2\"\n            >\n              <FaEdit />\n              Create Rule\n            </button>\n          </div>\n        )}\n\n        {/* Editor */}\n        {showEditor && (\n          <div className=\"mb-6\">\n            <RuleEditor\n              rule={editingRule}\n              onSave={handleSaveRule}\n              onCancel={handleCancelEdit}\n            />\n          </div>\n        )}\n\n        {/* Rules List */}\n        {!showEditor && (\n          <div className=\"space-y-6\">\n            {filteredRules.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <FaBook className=\"text-4xl text-nightly-celadon/50 mb-4 mx-auto\" />\n                <div className=\"text-nightly-celadon\">\n                  No {filter === \"all\" ? \"rules\" : filter + \" rules\"} found\n                </div>\n                <div className=\"text-sm text-nightly-celadon/70\">\n                  {filter === \"all\"\n                    ? \"Create your first rule to get started\"\n                    : `Switch to 'All' to see other rules`}\n                </div>\n              </div>\n            ) : (\n              filteredRules.map((rule) => (\n                <RuleCard\n                  key={rule.id}\n                  rule={rule}\n                  isEditable={true}\n                  onEdit={handleEditRule}\n                  onToggle={handleToggleRule}\n                />\n              ))\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RulesPage;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/SettingsMainPage.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/SettingsPage.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (192). Maximum allowed is 75.",
        "line": 232,
        "column": 67,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 434,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (108). Maximum allowed is 75.",
        "line": 563,
        "column": 64,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 679,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (89). Maximum allowed is 75.",
        "line": 681,
        "column": 32,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 777,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from \"react\";\nimport { useAuthState } from \"../contexts\";\nimport { settingsDBService } from \"../services/database\";\nimport type { DBSettings } from \"../types/database\";\nimport { logger } from \"../utils/logging\";\nimport {\n  FaUser,\n  FaPalette,\n  FaGlobe,\n  FaBullseye,\n  FaCog,\n  FaDatabase,\n  FaDownload,\n  FaUpload,\n  FaTrash,\n  FaSpinner,\n  FaLock,\n  FaShieldAlt,\n} from \"../utils/iconImport\";\n\ntype SettingsTab =\n  | \"account\"\n  | \"display\"\n  | \"profile\"\n  | \"privacy\"\n  | \"goals\"\n  | \"sessions\"\n  | \"data\";\n\n// Account Settings Section\nconst AccountSection: React.FC<{ settings: DBSettings | null }> = ({\n  settings: _settings,\n}) => (\n  <div className=\"space-y-6\">\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n      <div className=\"flex items-center gap-3 mb-4\">\n        <FaUser className=\"text-nightly-aquamarine\" />\n        <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n          Account Information\n        </h3>\n      </div>\n\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Display Name\n          </label>\n          <input\n            type=\"text\"\n            className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew placeholder-nightly-celadon/50\"\n            placeholder=\"Enter display name\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Email\n          </label>\n          <input\n            type=\"email\"\n            className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew placeholder-nightly-celadon/50\"\n            placeholder=\"Enter email address\"\n          />\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-sm font-medium text-nightly-celadon\">\n              Two-Factor Authentication\n            </div>\n            <div className=\"text-xs text-nightly-celadon/70\">\n              Add extra security to your account\n            </div>\n          </div>\n          <button className=\"bg-nightly-lavender-floral hover:bg-nightly-lavender-floral/80 text-white px-4 py-2 rounded transition-colors\">\n            Setup 2FA\n          </button>\n        </div>\n\n        <button className=\"bg-nightly-aquamarine hover:bg-nightly-aquamarine/80 text-black px-6 py-2 rounded font-medium transition-colors\">\n          Save Changes\n        </button>\n      </div>\n    </div>\n  </div>\n);\n\n// Display Settings Section\nconst DisplaySection: React.FC<{ settings: DBSettings | null }> = ({\n  settings: _settings,\n}) => (\n  <div className=\"space-y-6\">\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n      <div className=\"flex items-center gap-3 mb-4\">\n        <FaPalette className=\"text-nightly-lavender-floral\" />\n        <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n          Display Settings\n        </h3>\n      </div>\n\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Theme\n          </label>\n          <select className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew\">\n            <option value=\"dark\">Dark</option>\n            <option value=\"light\">Light</option>\n            <option value=\"auto\">Auto</option>\n          </select>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Language\n          </label>\n          <select className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew\">\n            <option value=\"en\">English</option>\n            <option value=\"es\">Spanish</option>\n            <option value=\"fr\">French</option>\n            <option value=\"de\">German</option>\n          </select>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Timezone\n          </label>\n          <select className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew\">\n            <option value=\"America/New_York\">Eastern Time</option>\n            <option value=\"America/Chicago\">Central Time</option>\n            <option value=\"America/Denver\">Mountain Time</option>\n            <option value=\"America/Los_Angeles\">Pacific Time</option>\n          </select>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-sm font-medium text-nightly-celadon\">\n              Notifications\n            </div>\n            <div className=\"text-xs text-nightly-celadon/70\">\n              Receive app notifications\n            </div>\n          </div>\n          <label className=\"relative inline-flex items-center cursor-pointer\">\n            <input type=\"checkbox\" className=\"sr-only peer\" defaultChecked />\n            <div className=\"w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-nightly-aquamarine\"></div>\n          </label>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\n// Public Profile Section\nconst ProfileSection: React.FC<{ settings: DBSettings | null }> = ({\n  settings: _settings,\n}) => (\n  <div className=\"space-y-6\">\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n      <div className=\"flex items-center gap-3 mb-4\">\n        <FaGlobe className=\"text-nightly-spring-green\" />\n        <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n          Public Profile\n        </h3>\n      </div>\n\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-sm font-medium text-nightly-celadon\">\n              Public Profile\n            </div>\n            <div className=\"text-xs text-nightly-celadon/70\">\n              Make your profile visible to others\n            </div>\n          </div>\n          <label className=\"relative inline-flex items-center cursor-pointer\">\n            <input type=\"checkbox\" className=\"sr-only peer\" />\n            <div className=\"w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-nightly-spring-green\"></div>\n          </label>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-sm font-medium text-nightly-celadon\">\n              Share Statistics\n            </div>\n            <div className=\"text-xs text-nightly-celadon/70\">\n              Allow others to see your progress stats\n            </div>\n          </div>\n          <label className=\"relative inline-flex items-center cursor-pointer\">\n            <input type=\"checkbox\" className=\"sr-only peer\" />\n            <div className=\"w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-nightly-spring-green\"></div>\n          </label>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Bio\n          </label>\n          <textarea\n            className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew placeholder-nightly-celadon/50 resize-none\"\n            rows={3}\n            placeholder=\"Tell others about yourself...\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Profile URL\n          </label>\n          <div className=\"flex\">\n            <span className=\"bg-white/5 border border-white/10 border-r-0 rounded-l px-3 py-3 text-nightly-celadon text-sm\">\n              chastityos.com/profile/\n            </span>\n            <input\n              type=\"text\"\n              className=\"flex-1 bg-white/5 border border-white/10 rounded-r p-3 text-nightly-honeydew placeholder-nightly-celadon/50\"\n              placeholder=\"your-username\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\n// Privacy Settings Section\nconst PrivacySection: React.FC<{ settings: DBSettings | null }> = ({\n  settings: _settings,\n}) => (\n  <div className=\"space-y-6\">\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n      <div className=\"flex items-center gap-3 mb-4\">\n        <FaShieldAlt className=\"text-nightly-lavender-floral\" />\n        <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n          Privacy & Security\n        </h3>\n      </div>\n\n      <div className=\"space-y-4\">\n        {/* Data Collection */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-sm font-medium text-nightly-celadon\">\n              Data Collection\n            </div>\n            <div className=\"text-xs text-nightly-celadon/70\">\n              Allow collection of usage analytics\n            </div>\n          </div>\n          <label className=\"relative inline-flex items-center cursor-pointer\">\n            <input type=\"checkbox\" className=\"sr-only peer\" defaultChecked />\n            <div className=\"w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-nightly-lavender-floral\"></div>\n          </label>\n        </div>\n\n        {/* Data Sharing */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-sm font-medium text-nightly-celadon\">\n              Data Sharing\n            </div>\n            <div className=\"text-xs text-nightly-celadon/70\">\n              Share anonymous usage data to improve the app\n            </div>\n          </div>\n          <label className=\"relative inline-flex items-center cursor-pointer\">\n            <input type=\"checkbox\" className=\"sr-only peer\" />\n            <div className=\"w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-nightly-lavender-floral\"></div>\n          </label>\n        </div>\n\n        {/* Account Visibility */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-sm font-medium text-nightly-celadon\">\n              Account Discoverable\n            </div>\n            <div className=\"text-xs text-nightly-celadon/70\">\n              Allow others to find your account by username\n            </div>\n          </div>\n          <label className=\"relative inline-flex items-center cursor-pointer\">\n            <input type=\"checkbox\" className=\"sr-only peer\" defaultChecked />\n            <div className=\"w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-nightly-lavender-floral\"></div>\n          </label>\n        </div>\n\n        {/* Activity Status */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-sm font-medium text-nightly-celadon\">\n              Show Activity Status\n            </div>\n            <div className=\"text-xs text-nightly-celadon/70\">\n              Let others see when you're active\n            </div>\n          </div>\n          <label className=\"relative inline-flex items-center cursor-pointer\">\n            <input type=\"checkbox\" className=\"sr-only peer\" />\n            <div className=\"w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-nightly-lavender-floral\"></div>\n          </label>\n        </div>\n      </div>\n    </div>\n\n    {/* Security Settings */}\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n      <div className=\"flex items-center gap-3 mb-4\">\n        <FaLock className=\"text-nightly-aquamarine\" />\n        <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n          Security Settings\n        </h3>\n      </div>\n\n      <div className=\"space-y-4\">\n        {/* Session Timeout */}\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Auto-logout After Inactivity\n          </label>\n          <select className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew\">\n            <option value=\"never\">Never</option>\n            <option value=\"15\">15 minutes</option>\n            <option value=\"30\">30 minutes</option>\n            <option value=\"60\">1 hour</option>\n            <option value=\"240\">4 hours</option>\n            <option value=\"1440\">24 hours</option>\n          </select>\n        </div>\n\n        {/* Login Alerts */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-sm font-medium text-nightly-celadon\">\n              Login Alerts\n            </div>\n            <div className=\"text-xs text-nightly-celadon/70\">\n              Get notified of new logins to your account\n            </div>\n          </div>\n          <label className=\"relative inline-flex items-center cursor-pointer\">\n            <input type=\"checkbox\" className=\"sr-only peer\" defaultChecked />\n            <div className=\"w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-nightly-aquamarine\"></div>\n          </label>\n        </div>\n\n        {/* Device Management */}\n        <div>\n          <div className=\"text-sm font-medium text-nightly-celadon mb-2\">\n            Logged In Devices\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between bg-white/5 rounded p-3\">\n              <div>\n                <div className=\"text-sm text-nightly-honeydew\">\n                  Current Device (Chrome on macOS)\n                </div>\n                <div className=\"text-xs text-nightly-celadon/70\">\n                  Last used: Just now\n                </div>\n              </div>\n              <span className=\"text-green-400 text-xs\">Active</span>\n            </div>\n            <div className=\"flex items-center justify-between bg-white/5 rounded p-3\">\n              <div>\n                <div className=\"text-sm text-nightly-honeydew\">\n                  iPhone (Safari)\n                </div>\n                <div className=\"text-xs text-nightly-celadon/70\">\n                  Last used: 2 hours ago\n                </div>\n              </div>\n              <button className=\"text-red-400 hover:text-red-300 text-xs\">\n                Remove\n              </button>\n            </div>\n          </div>\n          <button className=\"mt-2 text-nightly-aquamarine hover:text-nightly-spring-green text-sm\">\n            Log out all other devices\n          </button>\n        </div>\n      </div>\n    </div>\n\n    {/* Data Controls */}\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n      <div className=\"flex items-center gap-3 mb-4\">\n        <FaDatabase className=\"text-nightly-spring-green\" />\n        <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n          Data Controls\n        </h3>\n      </div>\n\n      <div className=\"space-y-4\">\n        {/* Data Export */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-sm font-medium text-nightly-celadon\">\n              Export My Data\n            </div>\n            <div className=\"text-xs text-nightly-celadon/70\">\n              Download all your data in JSON format\n            </div>\n          </div>\n          <button className=\"bg-nightly-spring-green/20 hover:bg-nightly-spring-green/30 text-nightly-spring-green px-4 py-2 rounded font-medium transition-colors flex items-center gap-2\">\n            <FaDownload />\n            Export\n          </button>\n        </div>\n\n        {/* Account Deletion */}\n        <div className=\"flex items-center justify-between pt-4 border-t border-white/10\">\n          <div>\n            <div className=\"text-sm font-medium text-red-400\">\n              Delete Account\n            </div>\n            <div className=\"text-xs text-nightly-celadon/70\">\n              Permanently delete your account and all data\n            </div>\n          </div>\n          <button className=\"bg-red-500/20 hover:bg-red-500/30 text-red-400 px-4 py-2 rounded font-medium transition-colors flex items-center gap-2\">\n            <FaTrash />\n            Delete\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\n// Goals Section\nconst GoalsSection: React.FC<{ settings: DBSettings | null }> = ({\n  settings: _settings,\n}) => (\n  <div className=\"space-y-6\">\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n      <div className=\"flex items-center gap-3 mb-4\">\n        <FaBullseye className=\"text-nightly-aquamarine\" />\n        <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n          Personal Goals\n        </h3>\n      </div>\n\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Default Session Goal (hours)\n          </label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            max=\"168\"\n            className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew placeholder-nightly-celadon/50\"\n            placeholder=\"24\"\n          />\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-sm font-medium text-nightly-celadon\">\n              Goal Reminders\n            </div>\n            <div className=\"text-xs text-nightly-celadon/70\">\n              Get notified about goal progress\n            </div>\n          </div>\n          <label className=\"relative inline-flex items-center cursor-pointer\">\n            <input type=\"checkbox\" className=\"sr-only peer\" defaultChecked />\n            <div className=\"w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-nightly-aquamarine\"></div>\n          </label>\n        </div>\n\n        <button className=\"bg-nightly-aquamarine hover:bg-nightly-aquamarine/80 text-black px-6 py-2 rounded font-medium transition-colors\">\n          Create New Goal\n        </button>\n      </div>\n    </div>\n  </div>\n);\n\n// Session Settings Section\nconst SessionSection: React.FC<{ settings: DBSettings | null }> = ({\n  settings: _settings,\n}) => (\n  <div className=\"space-y-6\">\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n      <div className=\"flex items-center gap-3 mb-4\">\n        <FaCog className=\"text-nightly-lavender-floral\" />\n        <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n          Session Settings\n        </h3>\n      </div>\n\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-sm font-medium text-nightly-celadon\">\n              Allow Emergency Unlock\n            </div>\n            <div className=\"text-xs text-nightly-celadon/70\">\n              Enable emergency unlock feature\n            </div>\n          </div>\n          <label className=\"relative inline-flex items-center cursor-pointer\">\n            <input type=\"checkbox\" className=\"sr-only peer\" defaultChecked />\n            <div className=\"w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-nightly-lavender-floral\"></div>\n          </label>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-nightly-celadon mb-2\">\n            Emergency Unlock Cooldown (hours)\n          </label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            max=\"168\"\n            className=\"w-full bg-white/5 border border-white/10 rounded p-3 text-nightly-honeydew placeholder-nightly-celadon/50\"\n            placeholder=\"24\"\n          />\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-sm font-medium text-nightly-celadon\">\n              Require Keyholder Approval\n            </div>\n            <div className=\"text-xs text-nightly-celadon/70\">\n              Sessions need keyholder approval to end\n            </div>\n          </div>\n          <label className=\"relative inline-flex items-center cursor-pointer\">\n            <input type=\"checkbox\" className=\"sr-only peer\" />\n            <div className=\"w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-nightly-lavender-floral\"></div>\n          </label>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-sm font-medium text-nightly-celadon\">\n              Hardcore Mode\n            </div>\n            <div className=\"text-xs text-nightly-celadon/70\">\n              Disable pause and emergency unlock\n            </div>\n          </div>\n          <label className=\"relative inline-flex items-center cursor-pointer\">\n            <input type=\"checkbox\" className=\"sr-only peer\" />\n            <div className=\"w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-red-500\"></div>\n          </label>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\n// Data Management Section\nconst DataSection: React.FC<{ settings: DBSettings | null }> = ({\n  settings: _settings,\n}) => {\n  const [showResetModal, setShowResetModal] = useState(false);\n  const [resetStatus, setResetStatus] = useState<\n    \"idle\" | \"pending\" | \"success\" | \"error\"\n  >(\"idle\");\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <FaDatabase className=\"text-nightly-spring-green\" />\n          <h3 className=\"text-lg font-semibold text-nightly-honeydew\">\n            Data Management\n          </h3>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <button className=\"bg-nightly-aquamarine hover:bg-nightly-aquamarine/80 text-black p-4 rounded-lg font-medium transition-colors flex items-center gap-3\">\n              <FaDownload />\n              Export Data\n            </button>\n\n            <button className=\"bg-nightly-lavender-floral hover:bg-nightly-lavender-floral/80 text-white p-4 rounded-lg font-medium transition-colors flex items-center gap-3\">\n              <FaUpload />\n              Import Data\n            </button>\n          </div>\n\n          <div className=\"border-t border-white/10 pt-4\">\n            <div className=\"bg-red-500/10 border border-red-500/20 rounded-lg p-4\">\n              <h4 className=\"text-red-400 font-medium mb-2\">Danger Zone</h4>\n              <p className=\"text-nightly-celadon text-sm mb-4\">\n                Reset all data will permanently delete all your sessions, tasks,\n                goals, and settings. This action cannot be undone.\n              </p>\n              <button\n                onClick={() => setShowResetModal(true)}\n                className=\"bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded font-medium transition-colors flex items-center gap-2\"\n              >\n                <FaTrash />\n                Reset All Data\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Reset Modal */}\n      {showResetModal && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-nightly-dark-purple border border-white/10 rounded-lg p-6 max-w-md w-full\">\n            <h3 className=\"text-lg font-semibold text-red-400 mb-4\">\n              Confirm Data Reset\n            </h3>\n\n            {resetStatus === \"idle\" && (\n              <>\n                <p className=\"text-nightly-celadon mb-6\">\n                  Are you sure you want to reset all your data? This action\n                  cannot be undone and will delete:\n                </p>\n                <ul className=\"text-nightly-celadon text-sm mb-6 list-disc list-inside space-y-1\">\n                  <li>All chastity sessions</li>\n                  <li>All logged events</li>\n                  <li>All tasks and goals</li>\n                  <li>All settings and preferences</li>\n                </ul>\n                <div className=\"flex gap-3\">\n                  <button\n                    onClick={() => {\n                      setResetStatus(\"pending\");\n                      // Simulate reset process\n                      setTimeout(() => {\n                        setResetStatus(\"success\");\n                        setTimeout(() => {\n                          window.location.reload();\n                        }, 2000);\n                      }, 2000);\n                    }}\n                    className=\"bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded font-medium transition-colors\"\n                  >\n                    Yes, Reset Everything\n                  </button>\n                  <button\n                    onClick={() => setShowResetModal(false)}\n                    className=\"bg-white/10 hover:bg-white/20 text-nightly-celadon px-4 py-2 rounded font-medium transition-colors\"\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </>\n            )}\n\n            {resetStatus === \"pending\" && (\n              <div className=\"text-center\">\n                <FaSpinner className=\"animate-spin text-2xl text-nightly-aquamarine mb-4 mx-auto\" />\n                <p className=\"text-nightly-celadon\">Resetting all data...</p>\n              </div>\n            )}\n\n            {resetStatus === \"success\" && (\n              <div className=\"text-center\">\n                <div className=\"text-2xl text-green-400 mb-4\">✓</div>\n                <p className=\"text-nightly-celadon\">\n                  Data reset complete. Refreshing...\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst SettingsPage: React.FC = () => {\n  const { user } = useAuthState();\n  const [settings, setSettings] = useState<DBSettings | null>(null);\n  const [activeTab, setActiveTab] = useState<SettingsTab>(\"account\");\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchSettings = async () => {\n      if (!user) return;\n\n      try {\n        setLoading(true);\n        // Try to get user settings\n        const userSettings = await settingsDBService.findByUserId(user.uid);\n        setSettings(userSettings[0] || null);\n      } catch (error) {\n        logger.error(\"Error fetching settings:\", error, \"SettingsPage\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchSettings();\n  }, [user]);\n\n  const tabs = [\n    { id: \"account\" as SettingsTab, label: \"Account\", icon: FaUser },\n    { id: \"display\" as SettingsTab, label: \"Display\", icon: FaPalette },\n    { id: \"profile\" as SettingsTab, label: \"Profile\", icon: FaGlobe },\n    { id: \"privacy\" as SettingsTab, label: \"Privacy\", icon: FaShieldAlt },\n    { id: \"goals\" as SettingsTab, label: \"Goals\", icon: FaBullseye },\n    { id: \"sessions\" as SettingsTab, label: \"Sessions\", icon: FaCog },\n    { id: \"data\" as SettingsTab, label: \"Data\", icon: FaDatabase },\n  ];\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case \"account\":\n        return <AccountSection settings={settings} />;\n      case \"display\":\n        return <DisplaySection settings={settings} />;\n      case \"profile\":\n        return <ProfileSection settings={settings} />;\n      case \"privacy\":\n        return <PrivacySection settings={settings} />;\n      case \"goals\":\n        return <GoalsSection settings={settings} />;\n      case \"sessions\":\n        return <SessionSection settings={settings} />;\n      case \"data\":\n        return <DataSection settings={settings} />;\n      default:\n        return <AccountSection settings={settings} />;\n    }\n  };\n\n  return (\n    <div className=\"text-nightly-spring-green\">\n      <div className=\"flex flex-col lg:flex-row\">\n        {/* Tab Navigation */}\n        <nav className=\"lg:w-64 p-4 border-b lg:border-b-0 lg:border-r border-white/10\">\n          <div className=\"space-y-2\">\n            {tabs.map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg font-medium transition-colors ${\n                    activeTab === tab.id\n                      ? \"bg-nightly-aquamarine text-black\"\n                      : \"text-nightly-celadon hover:bg-white/10 hover:text-nightly-honeydew\"\n                  }`}\n                >\n                  <Icon />\n                  {tab.label}\n                </button>\n              );\n            })}\n          </div>\n        </nav>\n\n        {/* Content */}\n        <main className=\"flex-1 p-4 lg:p-6\">\n          {loading ? (\n            <div className=\"text-center py-8\">\n              <FaSpinner className=\"animate-spin text-2xl text-nightly-aquamarine mb-4 mx-auto\" />\n              <div className=\"text-nightly-celadon\">Loading settings...</div>\n            </div>\n          ) : (\n            <div className=\"max-w-4xl\">{renderTabContent()}</div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default SettingsPage;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/TasksPage.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (136). Maximum allowed is 75.",
        "line": 7,
        "column": 29,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 155,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from \"react\";\nimport { useAuthState } from \"../contexts\";\nimport { useTasks, useUpdateTaskStatus } from \"../hooks/api/useTasks\";\nimport type { TaskStatus } from \"../types/database\";\nimport { TaskItem } from \"../components/tasks\";\n\nconst TasksPage: React.FC = () => {\n  const { user } = useAuthState();\n  const [activeTab, setActiveTab] = useState<\"active\" | \"archived\">(\"active\");\n\n  // Use TanStack Query hooks for tasks\n  const {\n    data: tasks = [],\n    isLoading: loading,\n    error,\n  } = useTasks(user?.uid || \"\");\n\n  const updateTaskStatus = useUpdateTaskStatus();\n\n  const handleSubmitTask = async (taskId: string, _note: string) => {\n    if (!user) return;\n\n    try {\n      await updateTaskStatus.mutateAsync({\n        taskId,\n        userId: user.uid,\n        status: \"submitted\" as TaskStatus,\n        // Note: submissiveNote would be handled in task updates\n      });\n    } catch {\n      // Error is already logged in the hook\n      // TODO: Add toast notification for user feedback on error\n    }\n  };\n\n  const activeTasks = tasks.filter((task) =>\n    [\"pending\", \"submitted\"].includes(task.status),\n  );\n\n  const archivedTasks = tasks.filter((task) =>\n    [\"approved\", \"rejected\", \"completed\", \"cancelled\"].includes(task.status),\n  );\n\n  return (\n    <div className=\"p-6\">\n      {/* Enhanced Header with Glass Effect */}\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-4xl font-bold bg-gradient-to-r from-white via-blue-200 to-purple-200 bg-clip-text text-transparent mb-2\">\n          Task Management\n        </h1>\n        <div className=\"w-16 h-1 bg-gradient-to-r from-blue-400 to-purple-400 mx-auto rounded-full\"></div>\n      </div>\n\n      {/* Tab Navigation with Glass Pills */}\n      <div className=\"flex justify-center space-x-4 mb-8\">\n        <button\n          onClick={() => setActiveTab(\"active\")}\n          className={`glass-nav px-6 py-3 font-medium transition-all duration-300 ${\n            activeTab === \"active\"\n              ? \"glass-card-primary text-blue-200 shadow-liquid transform scale-105\"\n              : \"text-gray-300 hover:text-white glass-hover\"\n          }`}\n        >\n          Active Tasks ({activeTasks.length})\n        </button>\n        <button\n          onClick={() => setActiveTab(\"archived\")}\n          className={`glass-nav px-6 py-3 font-medium transition-all duration-300 ${\n            activeTab === \"archived\"\n              ? \"glass-card-primary text-blue-200 shadow-liquid transform scale-105\"\n              : \"text-gray-300 hover:text-white glass-hover\"\n          }`}\n        >\n          Archived ({archivedTasks.length})\n        </button>\n      </div>\n\n      {/* Content with Glass Container */}\n      <div className=\"max-w-4xl mx-auto\">\n        {loading ? (\n          <div className=\"glass-card text-center py-12\">\n            <div className=\"glass-float\">\n              <div className=\"inline-flex items-center space-x-2\">\n                <div className=\"w-6 h-6 border-2 border-blue-400 border-t-transparent rounded-full animate-spin\"></div>\n                <span className=\"text-blue-200 text-lg\">Loading tasks...</span>\n              </div>\n            </div>\n          </div>\n        ) : error ? (\n          <div className=\"text-center py-8\">\n            <div className=\"text-red-400\">\n              Error loading tasks. Please try again.\n            </div>\n          </div>\n        ) : (\n          <>\n            {activeTab === \"active\" ? (\n              activeTasks.length > 0 ? (\n                <div className=\"space-y-6\">\n                  {activeTasks.map((task) => (\n                    <div\n                      key={task.id}\n                      className=\"glass-card glass-hover transform transition-all duration-300 hover:scale-[1.02]\"\n                    >\n                      <TaskItem task={task} onSubmit={handleSubmitTask} />\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"glass-card text-center py-12\">\n                  <div className=\"glass-float\">\n                    <div className=\"text-6xl mb-4\">📝</div>\n                    <h3 className=\"text-xl font-semibold text-gray-200 mb-2\">\n                      No Active Tasks\n                    </h3>\n                    <p className=\"text-gray-400\">\n                      You're all caught up! New tasks will appear here when\n                      assigned.\n                    </p>\n                  </div>\n                </div>\n              )\n            ) : archivedTasks.length > 0 ? (\n              <div className=\"space-y-6\">\n                {archivedTasks.map((task) => (\n                  <div\n                    key={task.id}\n                    className=\"glass-card opacity-75 hover:opacity-100 transition-opacity duration-300\"\n                  >\n                    <TaskItem\n                      task={task}\n                      onSubmit={() => {}} // Archived tasks can't be submitted\n                    />\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"glass-card text-center py-12\">\n                <div className=\"glass-float\">\n                  <div className=\"text-6xl mb-4\">📚</div>\n                  <h3 className=\"text-xl font-semibold text-gray-200 mb-2\">\n                    No Archived Tasks\n                  </h3>\n                  <p className=\"text-gray-400\">\n                    Completed and reviewed tasks will appear here.\n                  </p>\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TasksPage;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/showcase/ButtonVariantsDemo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/showcase/HapticFeedbackDemo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/showcase/InputExamplesDemo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/showcase/PullToRefreshDemo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/showcase/ShowcaseHeader.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/showcase/SwipeableCardDemo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/pages/showcase/TouchTargetsDemo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/AchievementEngine.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/AchievementIntegration.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/EffectiveTimeService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/KeyholderRelationshipService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/PauseCooldownService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/PauseService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/SessionPersistenceService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/TimerService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/api/session-service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/auth/account-linking.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/auth/auth-service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/cache-config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/AchievementDBService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/BaseDBService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/EmergencyService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/EventDBService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/GoalDBService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/KeyholderRelationshipDBService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/MigrationService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/PerformanceService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/RelationshipChastityService.ts",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 1,
        "message": "'Timestamp' is not defined.",
        "line": 179,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 179,
        "endColumn": 52
      },
      {
        "ruleId": "no-undef",
        "severity": 1,
        "message": "'Timestamp' is not defined.",
        "line": 185,
        "column": 47,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 185,
        "endColumn": 56
      },
      {
        "ruleId": "no-undef",
        "severity": 1,
        "message": "'Timestamp' is not defined.",
        "line": 292,
        "column": 41,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 292,
        "endColumn": 50
      },
      {
        "ruleId": "no-undef",
        "severity": 1,
        "message": "'Timestamp' is not defined.",
        "line": 384,
        "column": 41,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 384,
        "endColumn": 50
      },
      {
        "ruleId": "no-undef",
        "severity": 1,
        "message": "'Timestamp' is not defined.",
        "line": 466,
        "column": 41,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 466,
        "endColumn": 50
      },
      {
        "ruleId": "no-undef",
        "severity": 1,
        "message": "'Timestamp' is not defined.",
        "line": 540,
        "column": 58,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 540,
        "endColumn": 67
      },
      {
        "ruleId": "no-undef",
        "severity": 1,
        "message": "'Timestamp' is not defined.",
        "line": 693,
        "column": 41,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 693,
        "endColumn": 50
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Relationship Chastity Service\n * REFACTORED: Now uses domain-focused services for better maintainability\n *\n * This file maintains backward compatibility by re-exporting the facade service\n * that delegates to the appropriate domain services.\n */\nimport {\n  collection,\n  doc,\n  addDoc,\n  updateDoc,\n  getDoc,\n  getDocs,\n  query,\n  orderBy,\n  limit,\n  serverTimestamp,\n  writeBatch,\n  onSnapshot,\n  Unsubscribe,\n  Firestore,\n} from \"firebase/firestore\";\nimport { getFirestore } from \"../firebase\";\nimport {\n  RelationshipChastityData,\n  RelationshipSession,\n  RelationshipTask,\n  RelationshipEvent,\n  SessionEvent,\n  RelationshipTaskStatus,\n} from \"../../types/relationships\";\nimport { relationshipService } from \"./relationships/RelationshipService\";\nimport { serviceLogger } from \"../../utils/logging\";\nimport { generateUUID } from \"../../utils\";\n\nconst logger = serviceLogger(\"RelationshipChastityService\");\n\nclass RelationshipChastityService {\n  private db: Firestore | null = null;\n\n  constructor() {\n    this.initializeDb();\n  }\n\n  private async initializeDb() {\n    this.db = await getFirestore();\n  }\n\n  private async ensureDb(): Promise<Firestore> {\n    if (!this.db) {\n      await this.initializeDb();\n    }\n    if (!this.db) {\n      throw new Error(\"Failed to initialize Firestore database\");\n    }\n    return this.db;\n  }\n\n  // ==================== CHASTITY DATA MANAGEMENT ====================\n\n  /**\n   * Get chastity data for a relationship\n   */\n  async getChastityData(\n    relationshipId: string,\n  ): Promise<RelationshipChastityData | null> {\n    try {\n      const db = await this.ensureDb();\n      const docSnapshot = await getDoc(doc(db, \"chastityData\", relationshipId));\n\n      if (!docSnapshot.exists()) {\n        return null;\n      }\n\n      const data = {\n        ...docSnapshot.data(),\n        relationshipId: docSnapshot.id,\n      } as RelationshipChastityData;\n\n      logger.debug(\"Retrieved chastity data\", { relationshipId });\n      return data;\n    } catch (error) {\n      logger.error(\"Failed to get chastity data\", {\n        error: error as Error,\n        relationshipId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Update chastity data settings\n   */\n  async updateChastitySettings(\n    relationshipId: string,\n    settings: Partial<RelationshipChastityData[\"settings\"]>,\n    userId: string,\n  ): Promise<void> {\n    try {\n      const db = await this.ensureDb();\n\n      // Check permissions\n      const hasPermission = await relationshipService.checkPermission(\n        relationshipId,\n        userId,\n        \"settings\",\n      );\n\n      if (!hasPermission) {\n        throw new Error(\"Insufficient permissions to update settings\");\n      }\n\n      await updateDoc(doc(db, \"chastityData\", relationshipId), {\n        settings,\n        updatedAt: serverTimestamp(),\n      });\n\n      logger.info(\"Updated chastity settings\", {\n        relationshipId,\n        userId,\n        settings,\n      });\n    } catch (error) {\n      logger.error(\"Failed to update chastity settings\", {\n        error: error as Error,\n        relationshipId,\n        userId,\n      });\n      throw error;\n    }\n  }\n\n  // ==================== SESSION MANAGEMENT ====================\n\n  /**\n   * Start a new chastity session\n   */\n  async startSession(\n    relationshipId: string,\n    userId: string,\n    options: {\n      goalDuration?: number;\n      isHardcoreMode?: boolean;\n      notes?: string;\n    } = {},\n  ): Promise<string> {\n    try {\n      const db = await this.ensureDb();\n      if (!db) {\n        throw new Error(\"Database connection not available\");\n      }\n\n      // Check if user has permission to start session\n      const hasPermission = await relationshipService.checkPermission(\n        relationshipId,\n        userId,\n        \"sessions\",\n      );\n\n      if (!hasPermission) {\n        throw new Error(\"Insufficient permissions to start session\");\n      }\n\n      // Check if there's already an active session\n      const chastityData = await this.getChastityData(relationshipId);\n      if (chastityData?.currentSession.isActive) {\n        throw new Error(\"A session is already active for this relationship\");\n      }\n\n      const sessionId = generateUUID();\n      const batch = writeBatch(db);\n\n      // Create session record\n      const sessionData: Omit<RelationshipSession, \"createdAt\" | \"updatedAt\"> =\n        {\n          id: sessionId,\n          relationshipId,\n          startTime: serverTimestamp() as Timestamp,\n          duration: 0,\n          effectiveDuration: 0,\n          events: [\n            {\n              type: \"start\",\n              timestamp: serverTimestamp() as Timestamp,\n              initiatedBy:\n                userId === chastityData?.keyholderId\n                  ? \"keyholder\"\n                  : \"submissive\",\n              reason: options.notes,\n            },\n          ],\n          goalMet: false,\n          keyholderApproval: {\n            required: false,\n          },\n        };\n\n      batch.set(\n        doc(db, \"chastityData\", relationshipId, \"sessions\", sessionId),\n        {\n          ...sessionData,\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n        },\n      );\n\n      // Update current session in chastity data\n      batch.update(doc(db, \"chastityData\", relationshipId), {\n        currentSession: {\n          id: sessionId,\n          isActive: true,\n          startTime: serverTimestamp(),\n          accumulatedPauseTime: 0,\n          keyholderApprovalRequired:\n            chastityData?.settings.requireReasonForEnd || false,\n        },\n        updatedAt: serverTimestamp(),\n      });\n\n      await batch.commit();\n\n      logger.info(\"Started new session\", {\n        sessionId,\n        relationshipId,\n        userId,\n        options,\n      });\n\n      return sessionId;\n    } catch (error) {\n      logger.error(\"Failed to start session\", {\n        error: error as Error,\n        relationshipId,\n        userId,\n        options,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * End a chastity session\n   */\n  async endSession(\n    relationshipId: string,\n    sessionId: string,\n    userId: string,\n    endReason?: string,\n  ): Promise<void> {\n    try {\n      const db = await this.ensureDb();\n      if (!db) {\n        throw new Error(\"Database connection not available\");\n      }\n\n      // Check permissions\n      const hasPermission = await relationshipService.checkPermission(\n        relationshipId,\n        userId,\n        \"sessions\",\n      );\n\n      if (!hasPermission) {\n        throw new Error(\"Insufficient permissions to end session\");\n      }\n\n      const batch = writeBatch(db);\n\n      // Update session record\n      const sessionRef = doc(\n        db,\n        \"chastityData\",\n        relationshipId,\n        \"sessions\",\n        sessionId,\n      );\n      const sessionDoc = await getDoc(sessionRef);\n\n      if (!sessionDoc.exists()) {\n        throw new Error(\"Session not found\");\n      }\n\n      const sessionData = sessionDoc.data() as RelationshipSession;\n      const endTime = new Date();\n      const totalDuration =\n        endTime.getTime() - sessionData.startTime.toDate().getTime();\n\n      // Add end event\n      const endEvent: SessionEvent = {\n        type: \"end\",\n        timestamp: serverTimestamp() as Timestamp,\n        initiatedBy:\n          userId === (await this.getKeyholderId(relationshipId))\n            ? \"keyholder\"\n            : \"submissive\",\n        reason: endReason,\n      };\n\n      batch.update(sessionRef, {\n        endTime: serverTimestamp(),\n        duration: Math.floor(totalDuration / 1000),\n        events: [...sessionData.events, endEvent],\n        updatedAt: serverTimestamp(),\n      });\n\n      // Update current session in chastity data\n      batch.update(doc(db, \"chastityData\", relationshipId), {\n        currentSession: {\n          id: \"\",\n          isActive: false,\n          startTime: serverTimestamp(),\n          accumulatedPauseTime: 0,\n          keyholderApprovalRequired: false,\n        },\n        updatedAt: serverTimestamp(),\n      });\n\n      await batch.commit();\n\n      logger.info(\"Ended session\", {\n        sessionId,\n        relationshipId,\n        userId,\n        endReason,\n      });\n    } catch (error) {\n      logger.error(\"Failed to end session\", {\n        error: error as Error,\n        sessionId,\n        relationshipId,\n        userId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Pause a session\n   */\n  async pauseSession(\n    relationshipId: string,\n    sessionId: string,\n    userId: string,\n    pauseReason?: string,\n  ): Promise<void> {\n    try {\n      const db = await this.ensureDb();\n      if (!db) {\n        throw new Error(\"Database connection not available\");\n      }\n\n      // Check if submissive can pause\n      const canPause = await relationshipService.checkPermission(\n        relationshipId,\n        userId,\n        \"pauseSession\",\n      );\n\n      if (!canPause) {\n        throw new Error(\"Insufficient permissions to pause session\");\n      }\n\n      const batch = writeBatch(db);\n\n      // Update session with pause event\n      const sessionRef = doc(\n        db,\n        \"chastityData\",\n        relationshipId,\n        \"sessions\",\n        sessionId,\n      );\n      const sessionDoc = await getDoc(sessionRef);\n\n      if (!sessionDoc.exists()) {\n        throw new Error(\"Session not found\");\n      }\n\n      const sessionData = sessionDoc.data() as RelationshipSession;\n\n      const pauseEvent: SessionEvent = {\n        type: \"pause\",\n        timestamp: serverTimestamp() as Timestamp,\n        initiatedBy: \"submissive\",\n        reason: pauseReason,\n      };\n\n      batch.update(sessionRef, {\n        events: [...sessionData.events, pauseEvent],\n        updatedAt: serverTimestamp(),\n      });\n\n      // Update current session\n      batch.update(doc(db, \"chastityData\", relationshipId), {\n        \"currentSession.pausedAt\": serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      });\n\n      await batch.commit();\n\n      logger.info(\"Paused session\", {\n        sessionId,\n        relationshipId,\n        userId,\n        pauseReason,\n      });\n    } catch (error) {\n      logger.error(\"Failed to pause session\", {\n        error: error as Error,\n        sessionId,\n        relationshipId,\n        userId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Resume a paused session\n   */\n  async resumeSession(\n    relationshipId: string,\n    sessionId: string,\n    userId: string,\n  ): Promise<void> {\n    try {\n      const db = await this.ensureDb();\n      if (!db) {\n        throw new Error(\"Database connection not available\");\n      }\n\n      // Get current chastity data to calculate pause time\n      const chastityData = await this.getChastityData(relationshipId);\n      if (!chastityData?.currentSession.pausedAt) {\n        throw new Error(\"Session is not paused\");\n      }\n\n      const batch = writeBatch(db);\n\n      // Calculate pause duration\n      const pauseEnd = new Date();\n      const pauseStart = chastityData.currentSession.pausedAt.toDate();\n      const pauseDuration = Math.floor(\n        (pauseEnd.getTime() - pauseStart.getTime()) / 1000,\n      );\n\n      // Update session with resume event\n      const sessionRef = doc(\n        db,\n        \"chastityData\",\n        relationshipId,\n        \"sessions\",\n        sessionId,\n      );\n      const sessionDoc = await getDoc(sessionRef);\n\n      if (!sessionDoc.exists()) {\n        throw new Error(\"Session not found\");\n      }\n\n      const sessionData = sessionDoc.data() as RelationshipSession;\n\n      const resumeEvent: SessionEvent = {\n        type: \"resume\",\n        timestamp: serverTimestamp() as Timestamp,\n        initiatedBy: \"submissive\",\n      };\n\n      batch.update(sessionRef, {\n        events: [...sessionData.events, resumeEvent],\n        updatedAt: serverTimestamp(),\n      });\n\n      // Update current session\n      batch.update(doc(db, \"chastityData\", relationshipId), {\n        \"currentSession.pausedAt\": null,\n        \"currentSession.accumulatedPauseTime\":\n          chastityData.currentSession.accumulatedPauseTime + pauseDuration,\n        updatedAt: serverTimestamp(),\n      });\n\n      await batch.commit();\n\n      logger.info(\"Resumed session\", {\n        sessionId,\n        relationshipId,\n        userId,\n        pauseDuration,\n      });\n    } catch (error) {\n      logger.error(\"Failed to resume session\", {\n        error: error as Error,\n        sessionId,\n        relationshipId,\n        userId,\n      });\n      throw error;\n    }\n  }\n\n  // ==================== TASK MANAGEMENT ====================\n\n  /**\n   * Create a new task\n   */\n  async createTask(\n    relationshipId: string,\n    taskData: {\n      text: string;\n      dueDate?: Date;\n      consequence?: RelationshipTask[\"consequence\"];\n    },\n    userId: string,\n  ): Promise<string> {\n    try {\n      const db = await this.ensureDb();\n\n      // Check permissions\n      const hasPermission = await relationshipService.checkPermission(\n        relationshipId,\n        userId,\n        \"tasks\",\n      );\n\n      if (!hasPermission) {\n        throw new Error(\"Insufficient permissions to create tasks\");\n      }\n\n      const taskId = generateUUID();\n      const isKeyholder =\n        userId === (await this.getKeyholderId(relationshipId));\n\n      const task: Omit<RelationshipTask, \"createdAt\" | \"updatedAt\"> = {\n        id: taskId,\n        relationshipId,\n        text: taskData.text,\n        assignedBy: isKeyholder ? \"keyholder\" : \"submissive\",\n        assignedTo: \"submissive\",\n        dueDate: taskData.dueDate ? (taskData.dueDate as Timestamp) : undefined,\n        status: RelationshipTaskStatus.PENDING,\n        consequence: taskData.consequence,\n      };\n\n      await addDoc(collection(db, \"chastityData\", relationshipId, \"tasks\"), {\n        ...task,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      });\n\n      logger.info(\"Created task\", {\n        taskId,\n        relationshipId,\n        userId,\n        isKeyholder,\n      });\n\n      return taskId;\n    } catch (error) {\n      logger.error(\"Failed to create task\", {\n        error: error as Error,\n        relationshipId,\n        userId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Update task status\n   */\n  async updateTaskStatus(\n    relationshipId: string,\n    taskId: string,\n    status: RelationshipTaskStatus,\n    userId: string,\n    note?: string,\n  ): Promise<void> {\n    try {\n      const db = await this.ensureDb();\n\n      const updateData: Record<string, unknown> = {\n        status,\n        updatedAt: serverTimestamp(),\n      };\n\n      // Add role-specific fields\n      const isKeyholder =\n        userId === (await this.getKeyholderId(relationshipId));\n\n      if (status === RelationshipTaskStatus.SUBMITTED && !isKeyholder) {\n        updateData.submittedAt = serverTimestamp();\n        updateData.submissiveNote = note;\n      } else if (\n        (status === RelationshipTaskStatus.APPROVED ||\n          status === RelationshipTaskStatus.REJECTED) &&\n        isKeyholder\n      ) {\n        updateData.approvedAt = serverTimestamp();\n        updateData.keyholderFeedback = note;\n      } else if (status === RelationshipTaskStatus.COMPLETED) {\n        updateData.completedAt = serverTimestamp();\n      }\n\n      await updateDoc(\n        doc(db, \"chastityData\", relationshipId, \"tasks\", taskId),\n        updateData,\n      );\n\n      logger.info(\"Updated task status\", {\n        taskId,\n        relationshipId,\n        status,\n        userId,\n        isKeyholder,\n      });\n    } catch (error) {\n      logger.error(\"Failed to update task status\", {\n        error: error as Error,\n        taskId,\n        relationshipId,\n        status,\n        userId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get tasks for a relationship\n   */\n  async getTasks(\n    relationshipId: string,\n    limitCount: number = 50,\n  ): Promise<RelationshipTask[]> {\n    try {\n      const db = await this.ensureDb();\n\n      const tasksSnapshot = await getDocs(\n        query(\n          collection(db, \"chastityData\", relationshipId, \"tasks\"),\n          orderBy(\"createdAt\", \"desc\"),\n          limit(limitCount),\n        ),\n      );\n\n      const tasks = tasksSnapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      })) as RelationshipTask[];\n\n      logger.debug(\"Retrieved tasks\", {\n        relationshipId,\n        count: tasks.length,\n      });\n\n      return tasks;\n    } catch (error) {\n      logger.error(\"Failed to get tasks\", {\n        error: error as Error,\n        relationshipId,\n      });\n      throw error;\n    }\n  }\n\n  // ==================== EVENT LOGGING ====================\n\n  /**\n   * Log an event\n   */\n  async logEvent(\n    relationshipId: string,\n    eventData: {\n      type: RelationshipEvent[\"type\"];\n      details: RelationshipEvent[\"details\"];\n      isPrivate?: boolean;\n      tags?: string[];\n    },\n    userId: string,\n  ): Promise<string> {\n    try {\n      const db = await this.ensureDb();\n\n      const eventId = generateUUID();\n      const isKeyholder =\n        userId === (await this.getKeyholderId(relationshipId));\n\n      const event: Omit<RelationshipEvent, \"createdAt\"> = {\n        id: eventId,\n        relationshipId,\n        type: eventData.type,\n        timestamp: serverTimestamp() as Timestamp,\n        details: eventData.details,\n        loggedBy: isKeyholder ? \"keyholder\" : \"submissive\",\n        isPrivate: eventData.isPrivate || false,\n        tags: eventData.tags,\n      };\n\n      await addDoc(collection(db, \"chastityData\", relationshipId, \"events\"), {\n        ...event,\n        createdAt: serverTimestamp(),\n      });\n\n      logger.info(\"Logged event\", {\n        eventId,\n        relationshipId,\n        type: eventData.type,\n        userId,\n        isKeyholder,\n      });\n\n      return eventId;\n    } catch (error) {\n      logger.error(\"Failed to log event\", {\n        error: error as Error,\n        relationshipId,\n        userId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get events for a relationship\n   */\n  async getEvents(\n    relationshipId: string,\n    limitCount: number = 100,\n  ): Promise<RelationshipEvent[]> {\n    try {\n      const db = await this.ensureDb();\n\n      const eventsSnapshot = await getDocs(\n        query(\n          collection(db, \"chastityData\", relationshipId, \"events\"),\n          orderBy(\"timestamp\", \"desc\"),\n          limit(limitCount),\n        ),\n      );\n\n      const events = eventsSnapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      })) as RelationshipEvent[];\n\n      logger.debug(\"Retrieved events\", {\n        relationshipId,\n        count: events.length,\n      });\n\n      return events;\n    } catch (error) {\n      logger.error(\"Failed to get events\", {\n        error: error as Error,\n        relationshipId,\n      });\n      throw error;\n    }\n  }\n\n  // ==================== HELPER METHODS ====================\n\n  /**\n   * Get keyholder ID for a relationship\n   */\n  private async getKeyholderId(relationshipId: string): Promise<string> {\n    const relationship =\n      await relationshipService.getRelationship(relationshipId);\n    if (!relationship) {\n      throw new Error(\"Relationship not found\");\n    }\n    return relationship.keyholderId;\n  }\n\n  /**\n   * Get session history for a relationship\n   */\n  async getSessionHistory(\n    relationshipId: string,\n    limitCount: number = 50,\n  ): Promise<RelationshipSession[]> {\n    try {\n      const db = await this.ensureDb();\n\n      const sessionsSnapshot = await getDocs(\n        query(\n          collection(db, \"chastityData\", relationshipId, \"sessions\"),\n          orderBy(\"startTime\", \"desc\"),\n          limit(limitCount),\n        ),\n      );\n\n      const sessions = sessionsSnapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      })) as RelationshipSession[];\n\n      logger.debug(\"Retrieved session history\", {\n        relationshipId,\n        count: sessions.length,\n      });\n\n      return sessions;\n    } catch (error) {\n      logger.error(\"Failed to get session history\", {\n        error: error as Error,\n        relationshipId,\n      });\n      throw error;\n    }\n  }\n\n  // ==================== REAL-TIME LISTENERS ====================\n\n  /**\n   * Subscribe to chastity data changes\n   */\n  subscribeToChastityData(\n    relationshipId: string,\n    callback: (data: RelationshipChastityData | null) => void,\n  ): Promise<Unsubscribe> {\n    return this.ensureDb().then((db) => {\n      return onSnapshot(\n        doc(db, \"chastityData\", relationshipId),\n        (doc) => {\n          const data = doc.exists()\n            ? ({\n                ...doc.data(),\n                relationshipId: doc.id,\n              } as RelationshipChastityData)\n            : null;\n          callback(data);\n        },\n        (error) => {\n          logger.error(\"Error in chastity data subscription\", {\n            error,\n            relationshipId,\n          });\n        },\n      );\n    });\n  }\n\n  /**\n   * Subscribe to task changes\n   */\n  subscribeToTasks(\n    relationshipId: string,\n    callback: (tasks: RelationshipTask[]) => void,\n  ): Promise<Unsubscribe> {\n    return this.ensureDb().then((db) => {\n      return onSnapshot(\n        query(\n          collection(db, \"chastityData\", relationshipId, \"tasks\"),\n          orderBy(\"createdAt\", \"desc\"),\n        ),\n        (snapshot) => {\n          const tasks = snapshot.docs.map((doc) => ({\n            ...doc.data(),\n            id: doc.id,\n          })) as RelationshipTask[];\n          callback(tasks);\n        },\n        (error) => {\n          logger.error(\"Error in tasks subscription\", {\n            error,\n            relationshipId,\n          });\n        },\n      );\n    });\n  }\n}\n\nexport const relationshipChastityService = new RelationshipChastityService();\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/SessionDBService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/SettingsDBService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/TaskDBService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/achievements/AchievementBadgeService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/achievements/AchievementCRUDService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/achievements/AchievementLeaderboardService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/achievements/AchievementNotificationService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/achievements/AchievementProgressService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/achievements/AchievementStatsService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/achievements/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/relationship-chastity/ChastityEventService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/relationship-chastity/ChastitySessionService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/relationship-chastity/ChastityTaskService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/relationship-chastity/RelationshipCoreService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/relationship-chastity/RelationshipPermissionService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/relationship-chastity/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/relationships/RelationshipCRUDService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/relationships/RelationshipInviteService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/relationships/RelationshipRoleService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/relationships/RelationshipSearchService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/relationships/RelationshipService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/relationships/RelationshipStatsService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/relationships/RelationshipStatusService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/relationships/RelationshipValidationService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/database/relationships/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/feedbackService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/firebase.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/migration/DataMigrationService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/storage/ChastityDB.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/storage/dexie.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/sync/AchievementDataSync.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/sync/ConflictResolver.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/sync/EventDataSync.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/sync/FirebaseListeners.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/sync/FirebaseSync.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/sync/FirebaseSyncCore.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/sync/OfflineQueue.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/sync/RelationshipDataSync.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/sync/SessionDataSync.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/sync/SyncConflictResolver.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/sync/TaskDataSync.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/sync/UserSettingsSync.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/sync/connectionStatus.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/services/sync/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/stores/formStore.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 173,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 173,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4401, 4404], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4401, 4404], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 201,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 201,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5052, 5055], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5052, 5055], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 277,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 277,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6958, 6961], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6958, 6961], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 357,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 357,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8884, 8887], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8884, 8887], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Form Store - Form State Management\n * Manages form state, validation, and dirty tracking for complex forms\n */\nimport React from \"react\";\nimport { create } from \"zustand\";\nimport { devtools } from \"zustand/middleware\";\n\n// Define common form field value types\nexport type FormFieldValue =\n  | string\n  | number\n  | boolean\n  | Date\n  | string[]\n  | null\n  | undefined;\n\nexport interface FormField {\n  value: FormFieldValue;\n  error?: string;\n  touched: boolean;\n  dirty: boolean;\n}\n\nexport interface FormState {\n  // Form registry - stores forms by ID\n  forms: Record<\n    string,\n    {\n      fields: Record<string, FormField>;\n      isSubmitting: boolean;\n      isValid: boolean;\n      isDirty: boolean;\n      submitCount: number;\n      lastSubmitted?: Date;\n    }\n  >;\n\n  // Actions\n  createForm: (\n    formId: string,\n    initialValues?: Record<string, FormFieldValue>,\n  ) => void;\n  destroyForm: (formId: string) => void;\n  setFieldValue: (\n    formId: string,\n    fieldName: string,\n    value: FormFieldValue,\n  ) => void;\n  setFieldError: (formId: string, fieldName: string, error?: string) => void;\n  touchField: (formId: string, fieldName: string) => void;\n  resetForm: (\n    formId: string,\n    newValues?: Record<string, FormFieldValue>,\n  ) => void;\n  setSubmitting: (formId: string, isSubmitting: boolean) => void;\n  incrementSubmitCount: (formId: string) => void;\n\n  // Validation\n  validateField: (\n    formId: string,\n    fieldName: string,\n    validator: (value: FormFieldValue) => string | undefined,\n  ) => void;\n  validateForm: (\n    formId: string,\n    validators: Record<string, (value: FormFieldValue) => string | undefined>,\n  ) => boolean;\n\n  // Utility getters\n  getForm: (formId: string) => FormState[\"forms\"][string] | undefined;\n  getFieldValue: (formId: string, fieldName: string) => FormFieldValue;\n  getFieldError: (formId: string, fieldName: string) => string | undefined;\n  isFieldTouched: (formId: string, fieldName: string) => boolean;\n  isFieldDirty: (formId: string, fieldName: string) => boolean;\n  isFormValid: (formId: string) => boolean;\n  isFormDirty: (formId: string) => boolean;\n  isFormSubmitting: (formId: string) => boolean;\n}\n\n// Helper functions to break down complexity\nconst createFieldsFromValues = (\n  initialValues: Record<string, FormFieldValue>,\n): Record<string, FormField> => {\n  const fields: Record<string, FormField> = {};\n  Object.entries(initialValues).forEach(([key, value]) => {\n    fields[key] = {\n      value,\n      touched: false,\n      dirty: false,\n    };\n  });\n  return fields;\n};\n\nconst createFormInstance = (initialValues: Record<string, FormFieldValue>) => ({\n  fields: createFieldsFromValues(initialValues),\n  isSubmitting: false,\n  isValid: true,\n  isDirty: false,\n  submitCount: 0,\n});\n\nconst updateFieldInForm = (\n  form: FormState[\"forms\"][string],\n  fieldName: string,\n  updates: Partial<FormField>,\n) => {\n  const field = form.fields[fieldName] || {\n    value: undefined,\n    touched: false,\n    dirty: false,\n  };\n\n  return {\n    ...form,\n    fields: {\n      ...form.fields,\n      [fieldName]: {\n        ...field,\n        ...updates,\n      },\n    },\n  };\n};\n\nconst calculateFormDirty = (fields: Record<string, FormField>): boolean =>\n  Object.values(fields).some((f) => f.dirty);\n\nconst calculateFormValid = (fields: Record<string, FormField>): boolean =>\n  !Object.values(fields).some((f) => f.error);\n\n// Validation functions\nconst validateSingleField = (\n  get: () => FormState,\n  formId: string,\n  fieldName: string,\n  validator: (value: FormFieldValue) => string | undefined,\n) => {\n  const form = get().forms[formId];\n  if (!form) return;\n\n  const field = form.fields[fieldName];\n  if (!field) return;\n\n  const error = validator(field.value);\n  get().setFieldError(formId, fieldName, error);\n};\n\nconst validateMultipleFields = (\n  get: () => FormState,\n  formId: string,\n  validators: Record<string, (value: FormFieldValue) => string | undefined>,\n): boolean => {\n  const form = get().forms[formId];\n  if (!form) return false;\n\n  let isValid = true;\n  Object.entries(validators).forEach(([fieldName, validator]) => {\n    const field = form.fields[fieldName];\n    if (!field) return;\n\n    const error = validator(field.value);\n    get().setFieldError(formId, fieldName, error);\n    if (error) isValid = false;\n  });\n\n  return isValid;\n};\n\n// Form lifecycle actions\nconst createFormLifecycleActions = (set: any) => ({\n  createForm: (formId: string, initialValues = {}) =>\n    set(\n      (state: FormState) => {\n        if (state.forms[formId]) return state;\n        return {\n          forms: {\n            ...state.forms,\n            [formId]: createFormInstance(initialValues),\n          },\n        };\n      },\n      false,\n      `createForm:${formId}`,\n    ),\n\n  destroyForm: (formId: string) =>\n    set(\n      (state: FormState) => {\n        const { [formId]: _removed, ...rest } = state.forms;\n        return { forms: rest };\n      },\n      false,\n      `destroyForm:${formId}`,\n    ),\n});\n\n// Field manipulation actions\nconst createFieldActions = (set: any) => ({\n  setFieldValue: (formId: string, fieldName: string, value: FormFieldValue) =>\n    set(\n      (state: FormState) => {\n        const form = state.forms[formId];\n        if (!form) return state;\n\n        const currentField = form.fields[fieldName];\n        const isDirty = currentField ? currentField.value !== value : true;\n\n        const updatedForm = updateFieldInForm(form, fieldName, {\n          value,\n          dirty: isDirty,\n        });\n        const formIsDirty = calculateFormDirty(updatedForm.fields);\n\n        return {\n          forms: {\n            ...state.forms,\n            [formId]: {\n              ...updatedForm,\n              isDirty: formIsDirty,\n            },\n          },\n        };\n      },\n      false,\n      `setFieldValue:${formId}.${fieldName}`,\n    ),\n\n  setFieldError: (formId: string, fieldName: string, error?: string) =>\n    set(\n      (state: FormState) => {\n        const form = state.forms[formId];\n        if (!form) return state;\n\n        const updatedForm = updateFieldInForm(form, fieldName, { error });\n        const isValid = calculateFormValid(updatedForm.fields);\n\n        return {\n          forms: {\n            ...state.forms,\n            [formId]: {\n              ...updatedForm,\n              isValid,\n            },\n          },\n        };\n      },\n      false,\n      `setFieldError:${formId}.${fieldName}`,\n    ),\n\n  touchField: (formId: string, fieldName: string) =>\n    set(\n      (state: FormState) => {\n        const form = state.forms[formId];\n        if (!form) return state;\n\n        const updatedForm = updateFieldInForm(form, fieldName, {\n          touched: true,\n        });\n\n        return {\n          forms: {\n            ...state.forms,\n            [formId]: updatedForm,\n          },\n        };\n      },\n      false,\n      `touchField:${formId}.${fieldName}`,\n    ),\n});\n\n// Form state actions\nconst createFormStateActions = (set: any) => ({\n  resetForm: (formId: string, newValues = {}) =>\n    set(\n      (state: FormState) => {\n        const form = state.forms[formId];\n        if (!form) return state;\n\n        return {\n          forms: {\n            ...state.forms,\n            [formId]: {\n              ...form,\n              fields: createFieldsFromValues(newValues),\n              isDirty: false,\n              isValid: true,\n            },\n          },\n        };\n      },\n      false,\n      `resetForm:${formId}`,\n    ),\n\n  setSubmitting: (formId: string, isSubmitting: boolean) =>\n    set(\n      (state: FormState) => {\n        const form = state.forms[formId];\n        if (!form) return state;\n\n        return {\n          forms: {\n            ...state.forms,\n            [formId]: {\n              ...form,\n              isSubmitting,\n              ...(isSubmitting ? {} : { lastSubmitted: new Date() }),\n            },\n          },\n        };\n      },\n      false,\n      `setSubmitting:${formId}`,\n    ),\n\n  incrementSubmitCount: (formId: string) =>\n    set(\n      (state: FormState) => {\n        const form = state.forms[formId];\n        if (!form) return state;\n\n        return {\n          forms: {\n            ...state.forms,\n            [formId]: {\n              ...form,\n              submitCount: form.submitCount + 1,\n            },\n          },\n        };\n      },\n      false,\n      `incrementSubmitCount:${formId}`,\n    ),\n});\n\n// Form validation actions\nconst createValidationActions = (get: () => FormState) => ({\n  validateField: (\n    formId: string,\n    fieldName: string,\n    validator: (value: FormFieldValue) => string | undefined,\n  ) => validateSingleField(get, formId, fieldName, validator),\n\n  validateForm: (\n    formId: string,\n    validators: Record<string, (value: FormFieldValue) => string | undefined>,\n  ) => validateMultipleFields(get, formId, validators),\n});\n\n// Form state actions\nconst createFormActions = (set: any, get: () => FormState) => ({\n  ...createFormLifecycleActions(set),\n  ...createFieldActions(set),\n  ...createFormStateActions(set),\n  ...createValidationActions(get),\n});\n\nexport const useFormStore = create<FormState>()(\n  devtools(\n    (set, get) => ({\n      // Initial state\n      forms: {},\n\n      // All actions\n      ...createFormActions(set, get),\n\n      // Utility getters\n      getForm: (formId: string) => get().forms[formId],\n      getFieldValue: (formId: string, fieldName: string) =>\n        get().forms[formId]?.fields[fieldName]?.value,\n      getFieldError: (formId: string, fieldName: string) =>\n        get().forms[formId]?.fields[fieldName]?.error,\n      isFieldTouched: (formId: string, fieldName: string) =>\n        get().forms[formId]?.fields[fieldName]?.touched ?? false,\n      isFieldDirty: (formId: string, fieldName: string) =>\n        get().forms[formId]?.fields[fieldName]?.dirty ?? false,\n      isFormValid: (formId: string) => get().forms[formId]?.isValid ?? false,\n      isFormDirty: (formId: string) => get().forms[formId]?.isDirty ?? false,\n      isFormSubmitting: (formId: string) =>\n        get().forms[formId]?.isSubmitting ?? false,\n    }),\n    {\n      name: \"form-store\",\n    },\n  ),\n);\n\n// Selector hooks for better performance\nexport const useForm = (formId: string) =>\n  useFormStore((state) => state.forms[formId]);\n\nexport const useFormField = (formId: string, fieldName: string) =>\n  useFormStore((state) => state.forms[formId]?.fields[fieldName]);\n\nexport const useFormActions = () =>\n  useFormStore((state) => ({\n    createForm: state.createForm,\n    destroyForm: state.destroyForm,\n    setFieldValue: state.setFieldValue,\n    setFieldError: state.setFieldError,\n    touchField: state.touchField,\n    resetForm: state.resetForm,\n    setSubmitting: state.setSubmitting,\n    validateField: state.validateField,\n    validateForm: state.validateForm,\n  }));\n\n// Utility hook for easier form management\nexport const useFormManager = (formId: string, initialValues = {}) => {\n  const form = useForm(formId);\n  const actions = useFormActions();\n\n  // Auto-create form on mount\n  React.useEffect(() => {\n    if (!form) {\n      actions.createForm(formId, initialValues);\n    }\n  }, [formId, form, actions, initialValues]);\n\n  // Auto-destroy form on unmount\n  React.useEffect(() => {\n    return () => {\n      actions.destroyForm(formId);\n    };\n  }, [formId, actions]);\n\n  return {\n    form,\n    ...actions,\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/stores/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/stores/keyholderStore.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (185). Maximum allowed is 75.",
        "line": 76,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 296,
        "endColumn": 7
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Keyholder Store\n * UI state management for keyholder mode functionality\n * Zustand store - handles keyholder UI state only\n */\nimport { create } from \"zustand\";\nimport { devtools } from \"zustand/middleware\";\nimport { sha256 } from \"@/utils/helpers/hash\";\nimport { serviceLogger } from \"@/utils/logging\";\n\nconst logger = serviceLogger(\"KeyholderStore\");\n\nexport interface KeyholderState {\n  // UI State\n  isKeyholderModeUnlocked: boolean;\n  keyholderMessage: string;\n  isPasswordDialogOpen: boolean;\n  isPasswordSettingMode: boolean;\n\n  // Form State\n  passwordAttempt: string;\n  newPassword: string;\n  confirmPassword: string;\n\n  // Loading States\n  isCheckingPassword: boolean;\n  isSavingPassword: boolean;\n}\n\nexport interface KeyholderActions {\n  // Password Management\n  checkPassword: (passwordAttempt: string, storedHash: string) => Promise<void>;\n  setTempPassword: (keyholderName: string) => Promise<string>;\n  setPermanentPassword: (\n    newPassword: string,\n    onSave: (hash: string) => Promise<void>,\n  ) => Promise<void>;\n\n  // UI Actions\n  unlockKeyholderMode: () => void;\n  lockKeyholderControls: () => void;\n  setMessage: (message: string) => void;\n  clearMessage: () => void;\n\n  // Dialog Management\n  openPasswordDialog: () => void;\n  closePasswordDialog: () => void;\n  setPasswordSettingMode: (isSettingMode: boolean) => void;\n\n  // Form Actions\n  setPasswordAttempt: (password: string) => void;\n  setNewPassword: (password: string) => void;\n  setConfirmPassword: (password: string) => void;\n  clearForm: () => void;\n\n  // Reset\n  resetStore: () => void;\n}\n\nexport interface KeyholderStore extends KeyholderState, KeyholderActions {}\n\nconst initialState: KeyholderState = {\n  isKeyholderModeUnlocked: false,\n  keyholderMessage: \"\",\n  isPasswordDialogOpen: false,\n  isPasswordSettingMode: false,\n  passwordAttempt: \"\",\n  newPassword: \"\",\n  confirmPassword: \"\",\n  isCheckingPassword: false,\n  isSavingPassword: false,\n};\n\nexport const useKeyholderStore = create<KeyholderStore>()(\n  devtools(\n    (set, get) => ({\n      ...initialState,\n\n      // Password Management\n      checkPassword: async (passwordAttempt: string, storedHash: string) => {\n        const state = get();\n\n        if (state.isCheckingPassword) {\n          logger.debug(\"Password check already in progress\");\n          return;\n        }\n\n        set({ isCheckingPassword: true, keyholderMessage: \"\" });\n\n        try {\n          logger.debug(\"Checking keyholder password\");\n\n          if (!storedHash) {\n            const message =\n              \"Error: No keyholder password is set in the database.\";\n            set({\n              keyholderMessage: message,\n              isCheckingPassword: false,\n            });\n            logger.warn(\"No keyholder password hash found\");\n            return;\n          }\n\n          const attemptHash = await sha256(passwordAttempt);\n\n          if (attemptHash === storedHash) {\n            set({\n              isKeyholderModeUnlocked: true,\n              keyholderMessage: \"Controls are now unlocked.\",\n              isPasswordDialogOpen: false,\n              passwordAttempt: \"\",\n              isCheckingPassword: false,\n            });\n            logger.info(\"Keyholder password correct, mode unlocked\");\n          } else {\n            set({\n              keyholderMessage: \"Incorrect password. Please try again.\",\n              passwordAttempt: \"\",\n              isCheckingPassword: false,\n            });\n            logger.warn(\"Incorrect keyholder password attempt\");\n          }\n        } catch (error) {\n          const message = \"Failed to check password. Please try again.\";\n          set({\n            keyholderMessage: message,\n            isCheckingPassword: false,\n          });\n          logger.error(\"Error checking keyholder password\", {\n            error: error as Error,\n          });\n        }\n      },\n\n      setTempPassword: async (keyholderName: string): Promise<string> => {\n        try {\n          logger.debug(\"Generating temporary keyholder password\", {\n            keyholderName,\n          });\n\n          const tempPassword = Math.random()\n            .toString(36)\n            .substring(2, 8)\n            .toUpperCase();\n          const message = `Your keyholder password is: ${tempPassword}. This is now the permanent password unless you set a custom one.`;\n\n          set({ keyholderMessage: message });\n\n          logger.info(\"Temporary keyholder password generated\");\n          return tempPassword;\n        } catch (error) {\n          const message = \"Failed to generate temporary password.\";\n          set({ keyholderMessage: message });\n          logger.error(\"Error generating temporary password\", {\n            error: error as Error,\n          });\n          throw error;\n        }\n      },\n\n      setPermanentPassword: async (\n        newPassword: string,\n        onSave: (hash: string) => Promise<void>,\n      ) => {\n        const state = get();\n\n        if (state.isSavingPassword) {\n          logger.debug(\"Password save already in progress\");\n          return;\n        }\n\n        if (!newPassword || newPassword.length < 6) {\n          set({\n            keyholderMessage: \"Password must be at least 6 characters long.\",\n          });\n          return;\n        }\n\n        set({ isSavingPassword: true, keyholderMessage: \"\" });\n\n        try {\n          logger.debug(\"Setting permanent keyholder password\");\n\n          const newHash = await sha256(newPassword);\n          await onSave(newHash);\n\n          set({\n            keyholderMessage:\n              \"Permanent password has been updated successfully!\",\n            newPassword: \"\",\n            confirmPassword: \"\",\n            isPasswordSettingMode: false,\n            isPasswordDialogOpen: false,\n            isSavingPassword: false,\n          });\n\n          logger.info(\"Permanent keyholder password updated successfully\");\n        } catch (error) {\n          const message = \"Failed to update password. Please try again.\";\n          set({\n            keyholderMessage: message,\n            isSavingPassword: false,\n          });\n          logger.error(\"Error setting permanent password\", {\n            error: error as Error,\n          });\n        }\n      },\n\n      // UI Actions\n      unlockKeyholderMode: () => {\n        set({\n          isKeyholderModeUnlocked: true,\n          keyholderMessage: \"Controls are now unlocked.\",\n          isPasswordDialogOpen: false,\n        });\n        logger.info(\"Keyholder mode unlocked manually\");\n      },\n\n      lockKeyholderControls: () => {\n        set({\n          isKeyholderModeUnlocked: false,\n          keyholderMessage: \"\",\n          isPasswordDialogOpen: false,\n          passwordAttempt: \"\",\n          newPassword: \"\",\n          confirmPassword: \"\",\n        });\n        logger.info(\"Keyholder controls locked\");\n      },\n\n      setMessage: (message: string) => {\n        set({ keyholderMessage: message });\n      },\n\n      clearMessage: () => {\n        set({ keyholderMessage: \"\" });\n      },\n\n      // Dialog Management\n      openPasswordDialog: () => {\n        set({\n          isPasswordDialogOpen: true,\n          keyholderMessage: \"\",\n          passwordAttempt: \"\",\n        });\n      },\n\n      closePasswordDialog: () => {\n        set({\n          isPasswordDialogOpen: false,\n          passwordAttempt: \"\",\n          newPassword: \"\",\n          confirmPassword: \"\",\n          isPasswordSettingMode: false,\n        });\n      },\n\n      setPasswordSettingMode: (isSettingMode: boolean) => {\n        set({\n          isPasswordSettingMode: isSettingMode,\n          keyholderMessage: \"\",\n          passwordAttempt: \"\",\n          newPassword: \"\",\n          confirmPassword: \"\",\n        });\n      },\n\n      // Form Actions\n      setPasswordAttempt: (password: string) => {\n        set({ passwordAttempt: password });\n      },\n\n      setNewPassword: (password: string) => {\n        set({ newPassword: password });\n      },\n\n      setConfirmPassword: (password: string) => {\n        set({ confirmPassword: password });\n      },\n\n      clearForm: () => {\n        set({\n          passwordAttempt: \"\",\n          newPassword: \"\",\n          confirmPassword: \"\",\n          keyholderMessage: \"\",\n        });\n      },\n\n      // Reset\n      resetStore: () => {\n        set(initialState);\n        logger.debug(\"Keyholder store reset to initial state\");\n      },\n    }),\n    {\n      name: \"keyholder-store\",\n      // Only enable devtools in development\n      enabled:\n        import.meta.env.MODE === \"development\" ||\n        import.meta.env.MODE === \"nightly\",\n    },\n  ),\n);\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/stores/modalStore.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/stores/navigationStore.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/stores/notificationStore.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 1,
        "message": "Arrow function has too many lines (92). Maximum allowed is 75.",
        "line": 89,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 197,
        "endColumn": 7
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Notification Store - Temporary UI Feedback\n * Manages toast messages, alerts, and temporary UI feedback\n */\nimport { create } from \"zustand\";\nimport { devtools } from \"zustand/middleware\";\n\nexport interface Notification {\n  id: string;\n  type: \"success\" | \"error\" | \"warning\" | \"info\";\n  title?: string;\n  message: string;\n  duration?: number; // in milliseconds, 0 means persistent\n  dismissible?: boolean;\n  position?:\n    | \"top-left\"\n    | \"top-right\"\n    | \"bottom-left\"\n    | \"bottom-right\"\n    | \"top-center\"\n    | \"bottom-center\";\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n  timestamp: Date;\n}\n\nexport interface NotificationState {\n  // Notifications list\n  notifications: Notification[];\n\n  // Configuration\n  pauseOnHover?: boolean;\n\n  // Actions\n  addNotification: (\n    notification: Omit<Notification, \"id\" | \"timestamp\">,\n  ) => string;\n  removeNotification: (id: string) => void;\n  clearAllNotifications: () => void;\n  updateNotification: (id: string, updates: Partial<Notification>) => void;\n\n  // Convenience methods\n  showSuccess: (message: string, title?: string, duration?: number) => string;\n  showError: (message: string, title?: string, duration?: number) => string;\n  showWarning: (message: string, title?: string, duration?: number) => string;\n  showInfo: (message: string, title?: string, duration?: number) => string;\n\n  // Reset function for testing\n  resetStore: () => void;\n}\n\n// Additional type exports for compatibility with index.ts\nexport interface NotificationActions {\n  addNotification: (\n    notification: Omit<Notification, \"id\" | \"timestamp\">,\n  ) => string;\n  removeNotification: (id: string) => void;\n  clearAllNotifications: () => void;\n  showSuccess: (message: string, title?: string, duration?: number) => string;\n  showError: (message: string, title?: string, duration?: number) => string;\n  showWarning: (message: string, title?: string, duration?: number) => string;\n  showInfo: (message: string, title?: string, duration?: number) => string;\n}\n\nexport type NotificationStore = NotificationState;\nexport type NotificationConfig = Omit<Notification, \"id\" | \"timestamp\">;\nexport type NotificationType = \"success\" | \"error\" | \"warning\" | \"info\";\nexport type NotificationAction = {\n  label: string;\n  onClick: () => void;\n};\n\n// Default durations for different notification types\nconst DEFAULT_DURATIONS = {\n  success: 4000,\n  error: 0, // Persistent for errors\n  warning: 6000,\n  info: 4000,\n};\n\nconst initialState = {\n  notifications: [],\n};\n\nexport const useNotificationStore = create<NotificationState>()(\n  devtools(\n    (set, get) => ({\n      // Initial state\n      ...initialState,\n      pauseOnHover: true,\n\n      // Actions\n      addNotification: (notification) => {\n        const id = `notification-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        const newNotification: Notification = {\n          id,\n          timestamp: new Date(),\n          duration: DEFAULT_DURATIONS[notification.type],\n          dismissible: true,\n          ...notification,\n        };\n\n        set(\n          (state) => ({\n            notifications: [...state.notifications, newNotification],\n          }),\n          false,\n          `addNotification:${notification.type}`,\n        );\n\n        // Auto-remove notification after duration if specified\n        if (newNotification.duration && newNotification.duration > 0) {\n          setTimeout(() => {\n            useNotificationStore.getState().removeNotification(id);\n          }, newNotification.duration);\n        }\n\n        return id;\n      },\n\n      removeNotification: (id: string) =>\n        set(\n          (state) => ({\n            notifications: state.notifications.filter((n) => n.id !== id),\n          }),\n          false,\n          `removeNotification:${id}`,\n        ),\n\n      clearAllNotifications: () =>\n        set({ notifications: [] }, false, \"clearAllNotifications\"),\n\n      updateNotification: (id: string, updates: Partial<Notification>) =>\n        set(\n          (state) => ({\n            notifications: state.notifications.map((n) =>\n              n.id === id ? { ...n, ...updates } : n,\n            ),\n          }),\n          false,\n          `updateNotification:${id}`,\n        ),\n\n      // Convenience methods\n      showSuccess: (message: string, title?: string, duration?: number) => {\n        const notificationData: Omit<Notification, \"id\" | \"timestamp\"> = {\n          type: \"success\",\n          message,\n          title,\n        };\n        if (duration !== undefined) {\n          notificationData.duration = duration;\n        }\n        return get().addNotification(notificationData);\n      },\n\n      showError: (message: string, title?: string, duration?: number) => {\n        const notificationData: Omit<Notification, \"id\" | \"timestamp\"> = {\n          type: \"error\",\n          message,\n          title,\n        };\n        if (duration !== undefined) {\n          notificationData.duration = duration;\n        }\n        return get().addNotification(notificationData);\n      },\n\n      showWarning: (message: string, title?: string, duration?: number) => {\n        const notificationData: Omit<Notification, \"id\" | \"timestamp\"> = {\n          type: \"warning\",\n          message,\n          title,\n        };\n        if (duration !== undefined) {\n          notificationData.duration = duration;\n        }\n        return get().addNotification(notificationData);\n      },\n\n      showInfo: (message: string, title?: string, duration?: number) => {\n        const notificationData: Omit<Notification, \"id\" | \"timestamp\"> = {\n          type: \"info\",\n          message,\n          title,\n        };\n        if (duration !== undefined) {\n          notificationData.duration = duration;\n        }\n        return get().addNotification(notificationData);\n      },\n\n      // Reset function for testing\n      resetStore: () => set(initialState, false, \"resetStore\"),\n    }),\n    {\n      name: \"notification-store\",\n    },\n  ),\n);\n\n// Selector hooks for better performance\nexport const useNotifications = () =>\n  useNotificationStore((state) => state.notifications);\n\nexport const useNotificationActions = () =>\n  useNotificationStore((state) => ({\n    addNotification: state.addNotification,\n    removeNotification: state.removeNotification,\n    clearAllNotifications: state.clearAllNotifications,\n    showSuccess: state.showSuccess,\n    showError: state.showError,\n    showWarning: state.showWarning,\n    showInfo: state.showInfo,\n  }));\n\n// Utility hooks for common notification patterns\nexport const useErrorHandler = () => {\n  const { showError } = useNotificationActions();\n\n  const handleError = (error: Error | string, title = \"Error\") => {\n    const message = typeof error === \"string\" ? error : error.message;\n    return showError(message, title);\n  };\n\n  return { handleError };\n};\n\nexport const useSuccessHandler = () => {\n  const { showSuccess } = useNotificationActions();\n\n  const handleSuccess = (message: string, title = \"Success\") => {\n    return showSuccess(message, title);\n  };\n\n  return { handleSuccess };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/stores/themeStore.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 141,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 141,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3723, 3726], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3723, 3726], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 176,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 176,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4721, 4724], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4721, 4724], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 212,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 212,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5739, 5742], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5739, 5742], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 229,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 229,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6203, 6206], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6203, 6206], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 261,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 261,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7041, 7044], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7041, 7044], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 288,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 288,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7812, 7815], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7812, 7815], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 320,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 320,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8562, 8565], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8562, 8565], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 362,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 362,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9703, 9706], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9703, 9706], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Theme Store\n * UI state management for theme preferences, animations, and layout settings\n * Zustand store - handles theme and UI preference state\n */\nimport { create } from \"zustand\";\nimport { devtools, persist } from \"zustand/middleware\";\nimport { serviceLogger } from \"@/utils/logging\";\n\nconst logger = serviceLogger(\"ThemeStore\");\n\nexport type ThemeMode = \"light\" | \"dark\" | \"system\";\nexport type ColorScheme = \"nightly\" | \"classic\" | \"high-contrast\";\nexport type FontSize = \"sm\" | \"md\" | \"lg\" | \"xl\";\nexport type AnimationSpeed = \"none\" | \"reduced\" | \"normal\" | \"fast\";\n\nexport interface ThemeState {\n  // Theme settings\n  mode: ThemeMode;\n  colorScheme: ColorScheme;\n\n  // Typography\n  fontSize: FontSize;\n\n  // Animations and motion\n  animationSpeed: AnimationSpeed;\n  reduceMotion: boolean;\n\n  // Layout preferences\n  compactMode: boolean;\n  showSidebar: boolean;\n  sidebarCollapsed: boolean;\n\n  // Accessibility\n  highContrast: boolean;\n  focusIndicators: boolean;\n\n  // UI preferences\n  showTooltips: boolean;\n  showHints: boolean;\n  autoSave: boolean;\n\n  // System detection\n  systemPrefersDark: boolean;\n  systemPrefersReducedMotion: boolean;\n}\n\nexport interface ThemeActions {\n  // Theme management\n  setMode: (mode: ThemeMode) => void;\n  setColorScheme: (scheme: ColorScheme) => void;\n  toggleMode: () => void;\n\n  // Typography\n  setFontSize: (size: FontSize) => void;\n  increaseFontSize: () => void;\n  decreaseFontSize: () => void;\n\n  // Animations and motion\n  setAnimationSpeed: (speed: AnimationSpeed) => void;\n  setReduceMotion: (reduce: boolean) => void;\n  toggleReduceMotion: () => void;\n\n  // Layout preferences\n  setCompactMode: (compact: boolean) => void;\n  toggleCompactMode: () => void;\n  setShowSidebar: (show: boolean) => void;\n  toggleSidebar: () => void;\n  setSidebarCollapsed: (collapsed: boolean) => void;\n  toggleSidebarCollapse: () => void;\n\n  // Accessibility\n  setHighContrast: (enabled: boolean) => void;\n  toggleHighContrast: () => void;\n  setFocusIndicators: (enabled: boolean) => void;\n  toggleFocusIndicators: () => void;\n\n  // UI preferences\n  setShowTooltips: (show: boolean) => void;\n  toggleTooltips: () => void;\n  setShowHints: (show: boolean) => void;\n  toggleHints: () => void;\n  setAutoSave: (enabled: boolean) => void;\n  toggleAutoSave: () => void;\n\n  // System detection\n  updateSystemPreferences: () => void;\n\n  // Computed getters\n  getEffectiveMode: () => \"light\" | \"dark\";\n  getEffectiveAnimationSpeed: () => AnimationSpeed;\n  shouldReduceMotion: () => boolean;\n\n  // Presets\n  applyPreset: (\n    preset: \"default\" | \"minimal\" | \"accessible\" | \"performance\",\n  ) => void;\n\n  // Reset\n  resetToDefaults: () => void;\n  resetStore: () => void;\n}\n\nexport interface ThemeStore extends ThemeState, ThemeActions {}\n\nconst defaultState: ThemeState = {\n  mode: \"system\",\n  colorScheme: \"nightly\",\n  fontSize: \"md\",\n  animationSpeed: \"normal\",\n  reduceMotion: false,\n  compactMode: false,\n  showSidebar: true,\n  sidebarCollapsed: false,\n  highContrast: false,\n  focusIndicators: true,\n  showTooltips: true,\n  showHints: true,\n  autoSave: true,\n  systemPrefersDark: false,\n  systemPrefersReducedMotion: false,\n};\n\n// Helper functions\nconst detectSystemPreferences = () => {\n  if (typeof window === \"undefined\") {\n    return { dark: false, reducedMotion: false };\n  }\n\n  const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  const prefersReducedMotion = window.matchMedia(\n    \"(prefers-reduced-motion: reduce)\",\n  ).matches;\n\n  return { dark: prefersDark, reducedMotion: prefersReducedMotion };\n};\n\nconst fontSizeOrder: FontSize[] = [\"sm\", \"md\", \"lg\", \"xl\"];\n\n// Helper functions for different action categories\nconst createThemeActions = (set: any, get: () => ThemeStore) => ({\n  setMode: (mode: ThemeMode) => {\n    set({ mode });\n    logger.debug(\"Theme mode set\", { mode });\n\n    // Apply theme class to document\n    if (typeof document !== \"undefined\") {\n      const effectiveMode = get().getEffectiveMode();\n      document.documentElement.classList.toggle(\n        \"dark\",\n        effectiveMode === \"dark\",\n      );\n    }\n  },\n\n  setColorScheme: (scheme: ColorScheme) => {\n    set({ colorScheme: scheme });\n    logger.debug(\"Color scheme set\", { scheme });\n\n    // Apply color scheme class to document\n    if (typeof document !== \"undefined\") {\n      document.documentElement.className = document.documentElement.className\n        .replace(/scheme-\\w+/g, \"\")\n        .concat(` scheme-${scheme}`);\n    }\n  },\n\n  toggleMode: () => {\n    const { mode } = get();\n    const newMode: ThemeMode =\n      mode === \"light\" ? \"dark\" : mode === \"dark\" ? \"system\" : \"light\";\n    get().setMode(newMode);\n  },\n});\n\nconst createTypographyActions = (set: any, get: () => ThemeStore) => ({\n  setFontSize: (size: FontSize) => {\n    set({ fontSize: size });\n    logger.debug(\"Font size set\", { size });\n\n    // Apply font size class to document\n    if (typeof document !== \"undefined\") {\n      document.documentElement.className = document.documentElement.className\n        .replace(/text-size-\\w+/g, \"\")\n        .concat(` text-size-${size}`);\n    }\n  },\n\n  increaseFontSize: () => {\n    const { fontSize } = get();\n    const currentIndex = fontSizeOrder.indexOf(fontSize);\n    if (currentIndex < fontSizeOrder.length - 1) {\n      const newSize = fontSizeOrder[currentIndex + 1];\n      if (newSize) {\n        get().setFontSize(newSize);\n      }\n    }\n  },\n\n  decreaseFontSize: () => {\n    const { fontSize } = get();\n    const currentIndex = fontSizeOrder.indexOf(fontSize);\n    if (currentIndex > 0) {\n      const newSize = fontSizeOrder[currentIndex - 1];\n      if (newSize) {\n        get().setFontSize(newSize);\n      }\n    }\n  },\n});\n\nconst createAnimationActions = (set: any, get: () => ThemeStore) => ({\n  setAnimationSpeed: (speed: AnimationSpeed) => {\n    set({ animationSpeed: speed });\n    logger.debug(\"Animation speed set\", { speed });\n  },\n\n  setReduceMotion: (reduce: boolean) => {\n    set({ reduceMotion: reduce });\n    logger.debug(\"Reduce motion set\", { reduce });\n  },\n\n  toggleReduceMotion: () => {\n    const { reduceMotion } = get();\n    get().setReduceMotion(!reduceMotion);\n  },\n});\n\nconst createLayoutActions = (set: any, get: () => ThemeStore) => ({\n  setCompactMode: (compact: boolean) => {\n    set({ compactMode: compact });\n    logger.debug(\"Compact mode set\", { compact });\n  },\n\n  toggleCompactMode: () => {\n    const { compactMode } = get();\n    get().setCompactMode(!compactMode);\n  },\n\n  setShowSidebar: (show: boolean) => {\n    set({ showSidebar: show });\n    logger.debug(\"Show sidebar set\", { show });\n  },\n\n  toggleSidebar: () => {\n    const { showSidebar } = get();\n    get().setShowSidebar(!showSidebar);\n  },\n\n  setSidebarCollapsed: (collapsed: boolean) => {\n    set({ sidebarCollapsed: collapsed });\n    logger.debug(\"Sidebar collapsed set\", { collapsed });\n  },\n\n  toggleSidebarCollapse: () => {\n    const { sidebarCollapsed } = get();\n    get().setSidebarCollapsed(!sidebarCollapsed);\n  },\n});\n\nconst createAccessibilityActions = (set: any, get: () => ThemeStore) => ({\n  setHighContrast: (enabled: boolean) => {\n    set({ highContrast: enabled });\n    logger.debug(\"High contrast set\", { enabled });\n\n    // Apply high contrast class to document\n    if (typeof document !== \"undefined\") {\n      document.documentElement.classList.toggle(\"high-contrast\", enabled);\n    }\n  },\n\n  toggleHighContrast: () => {\n    const { highContrast } = get();\n    get().setHighContrast(!highContrast);\n  },\n\n  setFocusIndicators: (enabled: boolean) => {\n    set({ focusIndicators: enabled });\n    logger.debug(\"Focus indicators set\", { enabled });\n  },\n\n  toggleFocusIndicators: () => {\n    const { focusIndicators } = get();\n    get().setFocusIndicators(!focusIndicators);\n  },\n});\n\nconst createUIPreferenceActions = (set: any, get: () => ThemeStore) => ({\n  setShowTooltips: (show: boolean) => {\n    set({ showTooltips: show });\n    logger.debug(\"Show tooltips set\", { show });\n  },\n\n  toggleTooltips: () => {\n    const { showTooltips } = get();\n    get().setShowTooltips(!showTooltips);\n  },\n\n  setShowHints: (show: boolean) => {\n    set({ showHints: show });\n    logger.debug(\"Show hints set\", { show });\n  },\n\n  toggleHints: () => {\n    const { showHints } = get();\n    get().setShowHints(!showHints);\n  },\n\n  setAutoSave: (enabled: boolean) => {\n    set({ autoSave: enabled });\n    logger.debug(\"Auto save set\", { enabled });\n  },\n\n  toggleAutoSave: () => {\n    const { autoSave } = get();\n    get().setAutoSave(!autoSave);\n  },\n});\n\nconst createSystemActions = (set: any, get: () => ThemeStore) => ({\n  updateSystemPreferences: () => {\n    const { dark, reducedMotion } = detectSystemPreferences();\n\n    set({\n      systemPrefersDark: dark,\n      systemPrefersReducedMotion: reducedMotion,\n    });\n\n    logger.debug(\"System preferences updated\", { dark, reducedMotion });\n\n    // Update effective mode if using system preference\n    const { mode } = get();\n    if (mode === \"system\") {\n      get().setMode(\"system\"); // Triggers re-application of theme\n    }\n  },\n});\n\nconst createComputedGetters = (get: () => ThemeStore) => ({\n  getEffectiveMode: () => {\n    const { mode, systemPrefersDark } = get();\n    if (mode === \"system\") {\n      return systemPrefersDark ? \"dark\" : \"light\";\n    }\n    return mode;\n  },\n\n  getEffectiveAnimationSpeed: () => {\n    const { animationSpeed, systemPrefersReducedMotion } = get();\n    if (systemPrefersReducedMotion) {\n      return \"none\";\n    }\n    return animationSpeed;\n  },\n\n  shouldReduceMotion: () => {\n    const { reduceMotion, systemPrefersReducedMotion } = get();\n    return reduceMotion || systemPrefersReducedMotion;\n  },\n});\n\nconst createPresetActions = (set: any) => ({\n  applyPreset: (\n    preset: \"default\" | \"minimal\" | \"accessible\" | \"performance\",\n  ) => {\n    const presets = {\n      default: { ...defaultState },\n      minimal: {\n        ...defaultState,\n        showTooltips: false,\n        showHints: false,\n        animationSpeed: \"reduced\" as AnimationSpeed,\n        compactMode: true,\n      },\n      accessible: {\n        ...defaultState,\n        highContrast: true,\n        focusIndicators: true,\n        fontSize: \"lg\" as FontSize,\n        reduceMotion: true,\n        animationSpeed: \"none\" as AnimationSpeed,\n      },\n      performance: {\n        ...defaultState,\n        animationSpeed: \"none\" as AnimationSpeed,\n        reduceMotion: true,\n        showTooltips: false,\n        autoSave: false,\n      },\n    };\n\n    const presetConfig = presets[preset];\n    set(presetConfig);\n    logger.info(\"Theme preset applied\", { preset });\n  },\n\n  resetToDefaults: () => {\n    set(defaultState);\n    logger.info(\"Theme reset to defaults\");\n  },\n\n  resetStore: () => {\n    set(defaultState);\n    logger.debug(\"Theme store reset to initial state\");\n  },\n});\n\nexport const useThemeStore = create<ThemeStore>()(\n  devtools(\n    persist(\n      (set, get) => ({\n        ...defaultState,\n        ...createThemeActions(set, get),\n        ...createTypographyActions(set, get),\n        ...createAnimationActions(set, get),\n        ...createLayoutActions(set, get),\n        ...createAccessibilityActions(set, get),\n        ...createUIPreferenceActions(set, get),\n        ...createSystemActions(set, get),\n        ...createComputedGetters(get),\n        ...createPresetActions(set),\n      }),\n      {\n        name: \"theme-store\",\n        // Only persist certain settings\n        partialize: (state) => ({\n          mode: state.mode,\n          colorScheme: state.colorScheme,\n          fontSize: state.fontSize,\n          animationSpeed: state.animationSpeed,\n          reduceMotion: state.reduceMotion,\n          compactMode: state.compactMode,\n          showSidebar: state.showSidebar,\n          sidebarCollapsed: state.sidebarCollapsed,\n          highContrast: state.highContrast,\n          focusIndicators: state.focusIndicators,\n          showTooltips: state.showTooltips,\n          showHints: state.showHints,\n          autoSave: state.autoSave,\n        }),\n      },\n    ),\n    {\n      name: \"theme-store\",\n      // Only enable devtools in development\n      enabled:\n        import.meta.env.MODE === \"development\" ||\n        import.meta.env.MODE === \"nightly\",\n    },\n  ),\n);\n\n// Initialize system preferences and listen for changes\nif (typeof window !== \"undefined\") {\n  // Initial detection\n  useThemeStore.getState().updateSystemPreferences();\n\n  // Listen for system preference changes\n  const darkModeQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n  const reducedMotionQuery = window.matchMedia(\n    \"(prefers-reduced-motion: reduce)\",\n  );\n\n  darkModeQuery.addEventListener(\"change\", () => {\n    useThemeStore.getState().updateSystemPreferences();\n  });\n\n  reducedMotionQuery.addEventListener(\"change\", () => {\n    useThemeStore.getState().updateSystemPreferences();\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/stores/uiPreferencesStore.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/test-setup.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/test/setup.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/test/utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/types/account-linking.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/types/achievements.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/types/core.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/types/database.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/types/events.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/types/feedback.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/types/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/types/relationships.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/utils/formatting/date.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/utils/formatting/time.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/utils/helpers/hash.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/utils/helpers/string.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/utils/iconImport.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/utils/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/utils/logging.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/utils/systemInfo.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/src/vite-env.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/runner/work/chastityOS/chastityOS/vitest.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
