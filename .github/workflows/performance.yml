name: Performance Monitoring

on:
  push:
    branches: [main, nightly]
  pull_request:
    branches: [main, nightly]
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '22'

jobs:
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for analysis
        run: npm run build:nightly

      - name: Analyze bundle size
        run: |
          echo "Analyzing bundle size..."

          # Check if dist directory exists
          if [ -d "dist" ]; then
            echo "# Bundle Size Analysis" > bundle-analysis.md
            echo "Generated on: $(date)" >> bundle-analysis.md
            echo "" >> bundle-analysis.md

            # Get total bundle size
            TOTAL_SIZE=$(du -sh dist/ | cut -f1)
            echo "Total bundle size: $TOTAL_SIZE" >> bundle-analysis.md
            echo "" >> bundle-analysis.md

            # Analyze individual chunks
            echo "## Bundle Breakdown" >> bundle-analysis.md
            find dist/assets -name "*.js" -exec du -h {} \; | sort -hr >> bundle-analysis.md

            # Check for large chunks (>1MB)
            echo "" >> bundle-analysis.md
            echo "## Large Chunks (>1MB)" >> bundle-analysis.md
            find dist/assets -name "*.js" -size +1M -exec ls -lh {} \; | awk '{print $9 ": " $5}' >> bundle-analysis.md || echo "No large chunks found" >> bundle-analysis.md

            # Performance recommendations
            echo "" >> bundle-analysis.md
            echo "## Recommendations" >> bundle-analysis.md

            # Check if any JS files are over 500KB
            if find dist/assets -name "*.js" -size +500k | grep -q .; then
              echo "- Consider code splitting for large chunks" >> bundle-analysis.md
              echo "- Implement lazy loading for non-critical components" >> bundle-analysis.md
            fi

            # Check for duplicate dependencies (basic check)
            if [ $(find dist/assets -name "*.js" | wc -l) -gt 10 ]; then
              echo "- Review for potential duplicate dependencies" >> bundle-analysis.md
            fi

            echo "✅ Bundle analysis complete"
            cat bundle-analysis.md
          else
            echo "❌ Build failed - dist directory not found"
            exit 1
          fi

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: bundle-analysis.md

  lighthouse-performance:
    name: Lighthouse Performance Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build:nightly

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.13.x

      - name: Run Lighthouse CI
        run: |
          echo "Running Lighthouse performance audit..."
          lhci autorun --config=lighthouserc.json || echo "Lighthouse audit completed with warnings"

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/

      - name: Performance budget check
        run: |
          echo "Checking performance budgets..."

          # Define performance budgets
          MAX_FCP=2000      # First Contentful Paint (ms)
          MAX_LCP=4000      # Largest Contentful Paint (ms)
          MAX_CLS=0.1       # Cumulative Layout Shift
          MIN_SCORE=80      # Minimum performance score

          # Check if Lighthouse results exist
          if [ -d ".lighthouseci" ] && [ -n "$(find .lighthouseci -name "*.json" 2>/dev/null)" ]; then
            echo "✅ Lighthouse results found, analyzing performance metrics..."

            # This would require parsing JSON results in a real implementation
            echo "Performance budget validation would be implemented here"
            echo "Budgets: FCP<${MAX_FCP}ms, LCP<${MAX_LCP}ms, CLS<${MAX_CLS}, Score>${MIN_SCORE}"
          else
            echo "⚠️ No Lighthouse results found for budget analysis"
          fi

  web-vitals-monitoring:
    name: Core Web Vitals Monitoring
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build:nightly

      - name: Install web-vitals CLI
        run: npm install -g web-vitals

      - name: Start development server
        run: |
          npm run preview &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV

          # Wait for server to be ready
          timeout 30 sh -c 'until nc -z localhost 4173; do sleep 1; done' || echo "Server may not be ready"

      - name: Measure Core Web Vitals
        run: |
          echo "Measuring Core Web Vitals..."
          echo "This would integrate with real Web Vitals measurement tools"
          echo "Monitoring: LCP, FID, CLS, FCP, TTFB"

          # In a real implementation, this would use tools like:
          # - Puppeteer with web-vitals library
          # - Chrome DevTools Protocol
          # - Third-party monitoring services

      - name: Cleanup
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || echo "Server already stopped"
          fi

  accessibility-performance:
    name: Accessibility Performance Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build:nightly

      - name: Start preview server
        run: |
          npm run preview &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          sleep 5

      - name: Run accessibility tests
        run: |
          echo "Running accessibility performance tests..."

          # This would run axe-core accessibility tests
          # For now, we'll use the existing test command if available
          if npm run test:a11y 2>/dev/null; then
            echo "✅ Accessibility tests passed"
          else
            echo "ℹ️ Accessibility tests not configured yet"
          fi

      - name: Cleanup server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || echo "Server already stopped"
          fi

  performance-regression:
    name: Performance Regression Detection
    runs-on: ubuntu-latest
    needs: [bundle-analysis, lighthouse-performance]
    if: always()

    steps:
      - name: Check for performance regressions
        run: |
          echo "Performance Regression Analysis"
          echo "=============================="

          # Check job results
          BUNDLE_RESULT="${{ needs.bundle-analysis.result }}"
          LIGHTHOUSE_RESULT="${{ needs.lighthouse-performance.result }}"

          echo "Bundle Analysis: $BUNDLE_RESULT"
          echo "Lighthouse Performance: $LIGHTHOUSE_RESULT"

          # Determine if there are any performance concerns
          if [[ "$BUNDLE_RESULT" == "failure" ]]; then
            echo "❌ Bundle size regression detected"
            echo "PERFORMANCE_REGRESSION=true" >> $GITHUB_ENV
          elif [[ "$LIGHTHOUSE_RESULT" == "failure" ]]; then
            echo "❌ Lighthouse performance regression detected"
            echo "PERFORMANCE_REGRESSION=true" >> $GITHUB_ENV
          else
            echo "✅ No performance regressions detected"
            echo "PERFORMANCE_REGRESSION=false" >> $GITHUB_ENV
          fi

      - name: Create performance regression issue
        if: env.PERFORMANCE_REGRESSION == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Performance Regression Detected - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Performance Regression Alert

            A performance regression has been detected in the latest changes.

            **Details:**
            - **Branch:** ${{ github.ref_name }}
            - **Commit:** ${{ github.sha }}
            - **Workflow:** ${{ github.workflow }}
            - **Run:** ${{ github.run_id }}

            **Failed Checks:**
            - Bundle Analysis: ${{ needs.bundle-analysis.result }}
            - Lighthouse Performance: ${{ needs.lighthouse-performance.result }}

            **Next Steps:**
            1. Review the performance artifacts from this workflow run
            2. Identify the changes causing the regression
            3. Optimize bundle size and/or runtime performance
            4. Re-run performance tests after fixes

            **Artifacts:**
            Check the workflow artifacts for detailed analysis results.

            ---
            🤖 Generated with [Claude Code](https://claude.ai/code)
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['performance', 'regression', 'priority-high']
            });